# Autogenerated IDAOps from allins.hpp
use strict;
use warnings;
package IDAOps;

require Exporter;
our @ISA = qw(Exporter);

use constant NN_null                 => 0;
use constant NN_aaa                  => 1;
use constant NN_aad                  => 2;
use constant NN_aam                  => 3;
use constant NN_aas                  => 4;
use constant NN_adc                  => 5;
use constant NN_add                  => 6;
use constant NN_and                  => 7;
use constant NN_arpl                 => 8;
use constant NN_bound                => 9;
use constant NN_bsf                  => 10;
use constant NN_bsr                  => 11;
use constant NN_bt                   => 12;
use constant NN_btc                  => 13;
use constant NN_btr                  => 14;
use constant NN_bts                  => 15;
use constant NN_call                 => 16;
use constant NN_callfi               => 17;
use constant NN_callni               => 18;
use constant NN_cbw                  => 19;
use constant NN_cwde                 => 20;
use constant NN_cdqe                 => 21;
use constant NN_clc                  => 22;
use constant NN_cld                  => 23;
use constant NN_cli                  => 24;
use constant NN_clts                 => 25;
use constant NN_cmc                  => 26;
use constant NN_cmp                  => 27;
use constant NN_cmps                 => 28;
use constant NN_cwd                  => 29;
use constant NN_cdq                  => 30;
use constant NN_cqo                  => 31;
use constant NN_daa                  => 32;
use constant NN_das                  => 33;
use constant NN_dec                  => 34;
use constant NN_div                  => 35;
use constant NN_enterw               => 36;
use constant NN_enter                => 37;
use constant NN_enterd               => 38;
use constant NN_enterq               => 39;
use constant NN_hlt                  => 40;
use constant NN_idiv                 => 41;
use constant NN_imul                 => 42;
use constant NN_in                   => 43;
use constant NN_inc                  => 44;
use constant NN_ins                  => 45;
use constant NN_int                  => 46;
use constant NN_into                 => 47;
use constant NN_int3                 => 48;
use constant NN_iretw                => 49;
use constant NN_iret                 => 50;
use constant NN_iretd                => 51;
use constant NN_iretq                => 52;
use constant NN_ja                   => 53;
use constant NN_jae                  => 54;
use constant NN_jb                   => 55;
use constant NN_jbe                  => 56;
use constant NN_jc                   => 57;
use constant NN_jcxz                 => 58;
use constant NN_jecxz                => 59;
use constant NN_jrcxz                => 60;
use constant NN_je                   => 61;
use constant NN_jg                   => 62;
use constant NN_jge                  => 63;
use constant NN_jl                   => 64;
use constant NN_jle                  => 65;
use constant NN_jna                  => 66;
use constant NN_jnae                 => 67;
use constant NN_jnb                  => 68;
use constant NN_jnbe                 => 69;
use constant NN_jnc                  => 70;
use constant NN_jne                  => 71;
use constant NN_jng                  => 72;
use constant NN_jnge                 => 73;
use constant NN_jnl                  => 74;
use constant NN_jnle                 => 75;
use constant NN_jno                  => 76;
use constant NN_jnp                  => 77;
use constant NN_jns                  => 78;
use constant NN_jnz                  => 79;
use constant NN_jo                   => 80;
use constant NN_jp                   => 81;
use constant NN_jpe                  => 82;
use constant NN_jpo                  => 83;
use constant NN_js                   => 84;
use constant NN_jz                   => 85;
use constant NN_jmp                  => 86;
use constant NN_jmpfi                => 87;
use constant NN_jmpni                => 88;
use constant NN_jmpshort             => 89;
use constant NN_lahf                 => 90;
use constant NN_lar                  => 91;
use constant NN_lea                  => 92;
use constant NN_leavew               => 93;
use constant NN_leave                => 94;
use constant NN_leaved               => 95;
use constant NN_leaveq               => 96;
use constant NN_lgdt                 => 97;
use constant NN_lidt                 => 98;
use constant NN_lgs                  => 99;
use constant NN_lss                  => 100;
use constant NN_lds                  => 101;
use constant NN_les                  => 102;
use constant NN_lfs                  => 103;
use constant NN_lldt                 => 104;
use constant NN_lmsw                 => 105;
use constant NN_lock                 => 106;
use constant NN_lods                 => 107;
use constant NN_loopw                => 108;
use constant NN_loop                 => 109;
use constant NN_loopd                => 110;
use constant NN_loopq                => 111;
use constant NN_loopwe               => 112;
use constant NN_loope                => 113;
use constant NN_loopde               => 114;
use constant NN_loopqe               => 115;
use constant NN_loopwne              => 116;
use constant NN_loopne               => 117;
use constant NN_loopdne              => 118;
use constant NN_loopqne              => 119;
use constant NN_lsl                  => 120;
use constant NN_ltr                  => 121;
use constant NN_mov                  => 122;
use constant NN_movsp                => 123;
use constant NN_movs                 => 124;
use constant NN_movsx                => 125;
use constant NN_movzx                => 126;
use constant NN_mul                  => 127;
use constant NN_neg                  => 128;
use constant NN_nop                  => 129;
use constant NN_not                  => 130;
use constant NN_or                   => 131;
use constant NN_out                  => 132;
use constant NN_outs                 => 133;
use constant NN_pop                  => 134;
use constant NN_popaw                => 135;
use constant NN_popa                 => 136;
use constant NN_popad                => 137;
use constant NN_popaq                => 138;
use constant NN_popfw                => 139;
use constant NN_popf                 => 140;
use constant NN_popfd                => 141;
use constant NN_popfq                => 142;
use constant NN_push                 => 143;
use constant NN_pushaw               => 144;
use constant NN_pusha                => 145;
use constant NN_pushad               => 146;
use constant NN_pushaq               => 147;
use constant NN_pushfw               => 148;
use constant NN_pushf                => 149;
use constant NN_pushfd               => 150;
use constant NN_pushfq               => 151;
use constant NN_rcl                  => 152;
use constant NN_rcr                  => 153;
use constant NN_rol                  => 154;
use constant NN_ror                  => 155;
use constant NN_rep                  => 156;
use constant NN_repe                 => 157;
use constant NN_repne                => 158;
use constant NN_retn                 => 159;
use constant NN_retf                 => 160;
use constant NN_sahf                 => 161;
use constant NN_sal                  => 162;
use constant NN_sar                  => 163;
use constant NN_shl                  => 164;
use constant NN_shr                  => 165;
use constant NN_sbb                  => 166;
use constant NN_scas                 => 167;
use constant NN_seta                 => 168;
use constant NN_setae                => 169;
use constant NN_setb                 => 170;
use constant NN_setbe                => 171;
use constant NN_setc                 => 172;
use constant NN_sete                 => 173;
use constant NN_setg                 => 174;
use constant NN_setge                => 175;
use constant NN_setl                 => 176;
use constant NN_setle                => 177;
use constant NN_setna                => 178;
use constant NN_setnae               => 179;
use constant NN_setnb                => 180;
use constant NN_setnbe               => 181;
use constant NN_setnc                => 182;
use constant NN_setne                => 183;
use constant NN_setng                => 184;
use constant NN_setnge               => 185;
use constant NN_setnl                => 186;
use constant NN_setnle               => 187;
use constant NN_setno                => 188;
use constant NN_setnp                => 189;
use constant NN_setns                => 190;
use constant NN_setnz                => 191;
use constant NN_seto                 => 192;
use constant NN_setp                 => 193;
use constant NN_setpe                => 194;
use constant NN_setpo                => 195;
use constant NN_sets                 => 196;
use constant NN_setz                 => 197;
use constant NN_sgdt                 => 198;
use constant NN_sidt                 => 199;
use constant NN_shld                 => 200;
use constant NN_shrd                 => 201;
use constant NN_sldt                 => 202;
use constant NN_smsw                 => 203;
use constant NN_stc                  => 204;
use constant NN_std                  => 205;
use constant NN_sti                  => 206;
use constant NN_stos                 => 207;
use constant NN_str                  => 208;
use constant NN_sub                  => 209;
use constant NN_test                 => 210;
use constant NN_verr                 => 211;
use constant NN_verw                 => 212;
use constant NN_wait                 => 213;
use constant NN_xchg                 => 214;
use constant NN_xlat                 => 215;
use constant NN_xor                  => 216;
use constant NN_cmpxchg              => 217;
use constant NN_bswap                => 218;
use constant NN_xadd                 => 219;
use constant NN_invd                 => 220;
use constant NN_wbinvd               => 221;
use constant NN_invlpg               => 222;
use constant NN_rdmsr                => 223;
use constant NN_wrmsr                => 224;
use constant NN_cpuid                => 225;
use constant NN_cmpxchg8b            => 226;
use constant NN_rdtsc                => 227;
use constant NN_rsm                  => 228;
use constant NN_cmova                => 229;
use constant NN_cmovb                => 230;
use constant NN_cmovbe               => 231;
use constant NN_cmovg                => 232;
use constant NN_cmovge               => 233;
use constant NN_cmovl                => 234;
use constant NN_cmovle               => 235;
use constant NN_cmovnb               => 236;
use constant NN_cmovno               => 237;
use constant NN_cmovnp               => 238;
use constant NN_cmovns               => 239;
use constant NN_cmovnz               => 240;
use constant NN_cmovo                => 241;
use constant NN_cmovp                => 242;
use constant NN_cmovs                => 243;
use constant NN_cmovz                => 244;
use constant NN_fcmovb               => 245;
use constant NN_fcmove               => 246;
use constant NN_fcmovbe              => 247;
use constant NN_fcmovu               => 248;
use constant NN_fcmovnb              => 249;
use constant NN_fcmovne              => 250;
use constant NN_fcmovnbe             => 251;
use constant NN_fcmovnu              => 252;
use constant NN_fcomi                => 253;
use constant NN_fucomi               => 254;
use constant NN_fcomip               => 255;
use constant NN_fucomip              => 256;
use constant NN_rdpmc                => 257;
use constant NN_fld                  => 258;
use constant NN_fst                  => 259;
use constant NN_fstp                 => 260;
use constant NN_fxch                 => 261;
use constant NN_fild                 => 262;
use constant NN_fist                 => 263;
use constant NN_fistp                => 264;
use constant NN_fbld                 => 265;
use constant NN_fbstp                => 266;
use constant NN_fadd                 => 267;
use constant NN_faddp                => 268;
use constant NN_fiadd                => 269;
use constant NN_fsub                 => 270;
use constant NN_fsubp                => 271;
use constant NN_fisub                => 272;
use constant NN_fsubr                => 273;
use constant NN_fsubrp               => 274;
use constant NN_fisubr               => 275;
use constant NN_fmul                 => 276;
use constant NN_fmulp                => 277;
use constant NN_fimul                => 278;
use constant NN_fdiv                 => 279;
use constant NN_fdivp                => 280;
use constant NN_fidiv                => 281;
use constant NN_fdivr                => 282;
use constant NN_fdivrp               => 283;
use constant NN_fidivr               => 284;
use constant NN_fsqrt                => 285;
use constant NN_fscale               => 286;
use constant NN_fprem                => 287;
use constant NN_frndint              => 288;
use constant NN_fxtract              => 289;
use constant NN_fabs                 => 290;
use constant NN_fchs                 => 291;
use constant NN_fcom                 => 292;
use constant NN_fcomp                => 293;
use constant NN_fcompp               => 294;
use constant NN_ficom                => 295;
use constant NN_ficomp               => 296;
use constant NN_ftst                 => 297;
use constant NN_fxam                 => 298;
use constant NN_fptan                => 299;
use constant NN_fpatan               => 300;
use constant NN_f2xm1                => 301;
use constant NN_fyl2x                => 302;
use constant NN_fyl2xp1              => 303;
use constant NN_fldz                 => 304;
use constant NN_fld1                 => 305;
use constant NN_fldpi                => 306;
use constant NN_fldl2t               => 307;
use constant NN_fldl2e               => 308;
use constant NN_fldlg2               => 309;
use constant NN_fldln2               => 310;
use constant NN_finit                => 311;
use constant NN_fninit               => 312;
use constant NN_fsetpm               => 313;
use constant NN_fldcw                => 314;
use constant NN_fstcw                => 315;
use constant NN_fnstcw               => 316;
use constant NN_fstsw                => 317;
use constant NN_fnstsw               => 318;
use constant NN_fclex                => 319;
use constant NN_fnclex               => 320;
use constant NN_fstenv               => 321;
use constant NN_fnstenv              => 322;
use constant NN_fldenv               => 323;
use constant NN_fsave                => 324;
use constant NN_fnsave               => 325;
use constant NN_frstor               => 326;
use constant NN_fincstp              => 327;
use constant NN_fdecstp              => 328;
use constant NN_ffree                => 329;
use constant NN_fnop                 => 330;
use constant NN_feni                 => 331;
use constant NN_fneni                => 332;
use constant NN_fdisi                => 333;
use constant NN_fndisi               => 334;
use constant NN_fprem1               => 335;
use constant NN_fsincos              => 336;
use constant NN_fsin                 => 337;
use constant NN_fcos                 => 338;
use constant NN_fucom                => 339;
use constant NN_fucomp               => 340;
use constant NN_fucompp              => 341;
use constant NN_setalc               => 342;
use constant NN_svdc                 => 343;
use constant NN_rsdc                 => 344;
use constant NN_svldt                => 345;
use constant NN_rsldt                => 346;
use constant NN_svts                 => 347;
use constant NN_rsts                 => 348;
use constant NN_icebp                => 349;
use constant NN_loadall              => 350;
use constant NN_emms                 => 351;
use constant NN_movd                 => 352;
use constant NN_movq                 => 353;
use constant NN_packsswb             => 354;
use constant NN_packssdw             => 355;
use constant NN_packuswb             => 356;
use constant NN_paddb                => 357;
use constant NN_paddw                => 358;
use constant NN_paddd                => 359;
use constant NN_paddsb               => 360;
use constant NN_paddsw               => 361;
use constant NN_paddusb              => 362;
use constant NN_paddusw              => 363;
use constant NN_pand                 => 364;
use constant NN_pandn                => 365;
use constant NN_pcmpeqb              => 366;
use constant NN_pcmpeqw              => 367;
use constant NN_pcmpeqd              => 368;
use constant NN_pcmpgtb              => 369;
use constant NN_pcmpgtw              => 370;
use constant NN_pcmpgtd              => 371;
use constant NN_pmaddwd              => 372;
use constant NN_pmulhw               => 373;
use constant NN_pmullw               => 374;
use constant NN_por                  => 375;
use constant NN_psllw                => 376;
use constant NN_pslld                => 377;
use constant NN_psllq                => 378;
use constant NN_psraw                => 379;
use constant NN_psrad                => 380;
use constant NN_psrlw                => 381;
use constant NN_psrld                => 382;
use constant NN_psrlq                => 383;
use constant NN_psubb                => 384;
use constant NN_psubw                => 385;
use constant NN_psubd                => 386;
use constant NN_psubsb               => 387;
use constant NN_psubsw               => 388;
use constant NN_psubusb              => 389;
use constant NN_psubusw              => 390;
use constant NN_punpckhbw            => 391;
use constant NN_punpckhwd            => 392;
use constant NN_punpckhdq            => 393;
use constant NN_punpcklbw            => 394;
use constant NN_punpcklwd            => 395;
use constant NN_punpckldq            => 396;
use constant NN_pxor                 => 397;
use constant NN_fxsave               => 398;
use constant NN_fxrstor              => 399;
use constant NN_sysenter             => 400;
use constant NN_sysexit              => 401;
use constant NN_pavgusb              => 402;
use constant NN_pfadd                => 403;
use constant NN_pfsub                => 404;
use constant NN_pfsubr               => 405;
use constant NN_pfacc                => 406;
use constant NN_pfcmpge              => 407;
use constant NN_pfcmpgt              => 408;
use constant NN_pfcmpeq              => 409;
use constant NN_pfmin                => 410;
use constant NN_pfmax                => 411;
use constant NN_pi2fd                => 412;
use constant NN_pf2id                => 413;
use constant NN_pfrcp                => 414;
use constant NN_pfrsqrt              => 415;
use constant NN_pfmul                => 416;
use constant NN_pfrcpit1             => 417;
use constant NN_pfrsqit1             => 418;
use constant NN_pfrcpit2             => 419;
use constant NN_pmulhrw              => 420;
use constant NN_femms                => 421;
use constant NN_prefetch             => 422;
use constant NN_prefetchw            => 423;
use constant NN_addps                => 424;
use constant NN_addss                => 425;
use constant NN_andnps               => 426;
use constant NN_andps                => 427;
use constant NN_cmpps                => 428;
use constant NN_cmpss                => 429;
use constant NN_comiss               => 430;
use constant NN_cvtpi2ps             => 431;
use constant NN_cvtps2pi             => 432;
use constant NN_cvtsi2ss             => 433;
use constant NN_cvtss2si             => 434;
use constant NN_cvttps2pi            => 435;
use constant NN_cvttss2si            => 436;
use constant NN_divps                => 437;
use constant NN_divss                => 438;
use constant NN_ldmxcsr              => 439;
use constant NN_maxps                => 440;
use constant NN_maxss                => 441;
use constant NN_minps                => 442;
use constant NN_minss                => 443;
use constant NN_movaps               => 444;
use constant NN_movhlps              => 445;
use constant NN_movhps               => 446;
use constant NN_movlhps              => 447;
use constant NN_movlps               => 448;
use constant NN_movmskps             => 449;
use constant NN_movss                => 450;
use constant NN_movups               => 451;
use constant NN_mulps                => 452;
use constant NN_mulss                => 453;
use constant NN_orps                 => 454;
use constant NN_rcpps                => 455;
use constant NN_rcpss                => 456;
use constant NN_rsqrtps              => 457;
use constant NN_rsqrtss              => 458;
use constant NN_shufps               => 459;
use constant NN_sqrtps               => 460;
use constant NN_sqrtss               => 461;
use constant NN_stmxcsr              => 462;
use constant NN_subps                => 463;
use constant NN_subss                => 464;
use constant NN_ucomiss              => 465;
use constant NN_unpckhps             => 466;
use constant NN_unpcklps             => 467;
use constant NN_xorps                => 468;
use constant NN_pavgb                => 469;
use constant NN_pavgw                => 470;
use constant NN_pextrw               => 471;
use constant NN_pinsrw               => 472;
use constant NN_pmaxsw               => 473;
use constant NN_pmaxub               => 474;
use constant NN_pminsw               => 475;
use constant NN_pminub               => 476;
use constant NN_pmovmskb             => 477;
use constant NN_pmulhuw              => 478;
use constant NN_psadbw               => 479;
use constant NN_pshufw               => 480;
use constant NN_maskmovq             => 481;
use constant NN_movntps              => 482;
use constant NN_movntq               => 483;
use constant NN_prefetcht0           => 484;
use constant NN_prefetcht1           => 485;
use constant NN_prefetcht2           => 486;
use constant NN_prefetchnta          => 487;
use constant NN_sfence               => 488;
use constant NN_cmpeqps              => 489;
use constant NN_cmpltps              => 490;
use constant NN_cmpleps              => 491;
use constant NN_cmpunordps           => 492;
use constant NN_cmpneqps             => 493;
use constant NN_cmpnltps             => 494;
use constant NN_cmpnleps             => 495;
use constant NN_cmpordps             => 496;
use constant NN_cmpeqss              => 497;
use constant NN_cmpltss              => 498;
use constant NN_cmpless              => 499;
use constant NN_cmpunordss           => 500;
use constant NN_cmpneqss             => 501;
use constant NN_cmpnltss             => 502;
use constant NN_cmpnless             => 503;
use constant NN_cmpordss             => 504;
use constant NN_pf2iw                => 505;
use constant NN_pfnacc               => 506;
use constant NN_pfpnacc              => 507;
use constant NN_pi2fw                => 508;
use constant NN_pswapd               => 509;
use constant NN_fstp1                => 510;
use constant NN_fcom2                => 511;
use constant NN_fcomp3               => 512;
use constant NN_fxch4                => 513;
use constant NN_fcomp5               => 514;
use constant NN_ffreep               => 515;
use constant NN_fxch7                => 516;
use constant NN_fstp8                => 517;
use constant NN_fstp9                => 518;
use constant NN_addpd                => 519;
use constant NN_addsd                => 520;
use constant NN_andnpd               => 521;
use constant NN_andpd                => 522;
use constant NN_clflush              => 523;
use constant NN_cmppd                => 524;
use constant NN_cmpsd                => 525;
use constant NN_comisd               => 526;
use constant NN_cvtdq2pd             => 527;
use constant NN_cvtdq2ps             => 528;
use constant NN_cvtpd2dq             => 529;
use constant NN_cvtpd2pi             => 530;
use constant NN_cvtpd2ps             => 531;
use constant NN_cvtpi2pd             => 532;
use constant NN_cvtps2dq             => 533;
use constant NN_cvtps2pd             => 534;
use constant NN_cvtsd2si             => 535;
use constant NN_cvtsd2ss             => 536;
use constant NN_cvtsi2sd             => 537;
use constant NN_cvtss2sd             => 538;
use constant NN_cvttpd2dq            => 539;
use constant NN_cvttpd2pi            => 540;
use constant NN_cvttps2dq            => 541;
use constant NN_cvttsd2si            => 542;
use constant NN_divpd                => 543;
use constant NN_divsd                => 544;
use constant NN_lfence               => 545;
use constant NN_maskmovdqu           => 546;
use constant NN_maxpd                => 547;
use constant NN_maxsd                => 548;
use constant NN_mfence               => 549;
use constant NN_minpd                => 550;
use constant NN_minsd                => 551;
use constant NN_movapd               => 552;
use constant NN_movdq2q              => 553;
use constant NN_movdqa               => 554;
use constant NN_movdqu               => 555;
use constant NN_movhpd               => 556;
use constant NN_movlpd               => 557;
use constant NN_movmskpd             => 558;
use constant NN_movntdq              => 559;
use constant NN_movnti               => 560;
use constant NN_movntpd              => 561;
use constant NN_movq2dq              => 562;
use constant NN_movsd                => 563;
use constant NN_movupd               => 564;
use constant NN_mulpd                => 565;
use constant NN_mulsd                => 566;
use constant NN_orpd                 => 567;
use constant NN_paddq                => 568;
use constant NN_pause                => 569;
use constant NN_pmuludq              => 570;
use constant NN_pshufd               => 571;
use constant NN_pshufhw              => 572;
use constant NN_pshuflw              => 573;
use constant NN_pslldq               => 574;
use constant NN_psrldq               => 575;
use constant NN_psubq                => 576;
use constant NN_punpckhqdq           => 577;
use constant NN_punpcklqdq           => 578;
use constant NN_shufpd               => 579;
use constant NN_sqrtpd               => 580;
use constant NN_sqrtsd               => 581;
use constant NN_subpd                => 582;
use constant NN_subsd                => 583;
use constant NN_ucomisd              => 584;
use constant NN_unpckhpd             => 585;
use constant NN_unpcklpd             => 586;
use constant NN_xorpd                => 587;
use constant NN_syscall              => 588;
use constant NN_sysret               => 589;
use constant NN_swapgs               => 590;
use constant NN_movddup              => 591;
use constant NN_movshdup             => 592;
use constant NN_movsldup             => 593;
use constant NN_movsxd               => 594;
use constant NN_cmpxchg16b           => 595;
use constant NN_addsubpd             => 596;
use constant NN_addsubps             => 597;
use constant NN_haddpd               => 598;
use constant NN_haddps               => 599;
use constant NN_hsubpd               => 600;
use constant NN_hsubps               => 601;
use constant NN_monitor              => 602;
use constant NN_mwait                => 603;
use constant NN_fisttp               => 604;
use constant NN_lddqu                => 605;
use constant NN_psignb               => 606;
use constant NN_psignw               => 607;
use constant NN_psignd               => 608;
use constant NN_pshufb               => 609;
use constant NN_pmulhrsw             => 610;
use constant NN_pmaddubsw            => 611;
use constant NN_phsubsw              => 612;
use constant NN_phaddsw              => 613;
use constant NN_phaddw               => 614;
use constant NN_phaddd               => 615;
use constant NN_phsubw               => 616;
use constant NN_phsubd               => 617;
use constant NN_palignr              => 618;
use constant NN_pabsb                => 619;
use constant NN_pabsw                => 620;
use constant NN_pabsd                => 621;
use constant NN_vmcall               => 622;
use constant NN_vmclear              => 623;
use constant NN_vmlaunch             => 624;
use constant NN_vmresume             => 625;
use constant NN_vmptrld              => 626;
use constant NN_vmptrst              => 627;
use constant NN_vmread               => 628;
use constant NN_vmwrite              => 629;
use constant NN_vmxoff               => 630;
use constant NN_vmxon                => 631;
use constant NN_ud2                  => 632;
use constant NN_rdtscp               => 633;
use constant NN_pfrcpv               => 634;
use constant NN_pfrsqrtv             => 635;
use constant NN_cmpeqpd              => 636;
use constant NN_cmpltpd              => 637;
use constant NN_cmplepd              => 638;
use constant NN_cmpunordpd           => 639;
use constant NN_cmpneqpd             => 640;
use constant NN_cmpnltpd             => 641;
use constant NN_cmpnlepd             => 642;
use constant NN_cmpordpd             => 643;
use constant NN_cmpeqsd              => 644;
use constant NN_cmpltsd              => 645;
use constant NN_cmplesd              => 646;
use constant NN_cmpunordsd           => 647;
use constant NN_cmpneqsd             => 648;
use constant NN_cmpnltsd             => 649;
use constant NN_cmpnlesd             => 650;
use constant NN_cmpordsd             => 651;
use constant NN_blendpd              => 652;
use constant NN_blendps              => 653;
use constant NN_blendvpd             => 654;
use constant NN_blendvps             => 655;
use constant NN_dppd                 => 656;
use constant NN_dpps                 => 657;
use constant NN_extractps            => 658;
use constant NN_insertps             => 659;
use constant NN_movntdqa             => 660;
use constant NN_mpsadbw              => 661;
use constant NN_packusdw             => 662;
use constant NN_pblendvb             => 663;
use constant NN_pblendw              => 664;
use constant NN_pcmpeqq              => 665;
use constant NN_pextrb               => 666;
use constant NN_pextrd               => 667;
use constant NN_pextrq               => 668;
use constant NN_phminposuw           => 669;
use constant NN_pinsrb               => 670;
use constant NN_pinsrd               => 671;
use constant NN_pinsrq               => 672;
use constant NN_pmaxsb               => 673;
use constant NN_pmaxsd               => 674;
use constant NN_pmaxud               => 675;
use constant NN_pmaxuw               => 676;
use constant NN_pminsb               => 677;
use constant NN_pminsd               => 678;
use constant NN_pminud               => 679;
use constant NN_pminuw               => 680;
use constant NN_pmovsxbw             => 681;
use constant NN_pmovsxbd             => 682;
use constant NN_pmovsxbq             => 683;
use constant NN_pmovsxwd             => 684;
use constant NN_pmovsxwq             => 685;
use constant NN_pmovsxdq             => 686;
use constant NN_pmovzxbw             => 687;
use constant NN_pmovzxbd             => 688;
use constant NN_pmovzxbq             => 689;
use constant NN_pmovzxwd             => 690;
use constant NN_pmovzxwq             => 691;
use constant NN_pmovzxdq             => 692;
use constant NN_pmuldq               => 693;
use constant NN_pmulld               => 694;
use constant NN_ptest                => 695;
use constant NN_roundpd              => 696;
use constant NN_roundps              => 697;
use constant NN_roundsd              => 698;
use constant NN_roundss              => 699;
use constant NN_crc32                => 700;
use constant NN_pcmpestri            => 701;
use constant NN_pcmpestrm            => 702;
use constant NN_pcmpistri            => 703;
use constant NN_pcmpistrm            => 704;
use constant NN_pcmpgtq              => 705;
use constant NN_popcnt               => 706;
use constant NN_extrq                => 707;
use constant NN_insertq              => 708;
use constant NN_movntsd              => 709;
use constant NN_movntss              => 710;
use constant NN_lzcnt                => 711;
use constant NN_xgetbv               => 712;
use constant NN_xrstor               => 713;
use constant NN_xsave                => 714;
use constant NN_xsetbv               => 715;
use constant NN_getsec               => 716;
use constant NN_clgi                 => 717;
use constant NN_invlpga              => 718;
use constant NN_skinit               => 719;
use constant NN_stgi                 => 720;
use constant NN_vmexit               => 721;
use constant NN_vmload               => 722;
use constant NN_vmmcall              => 723;
use constant NN_vmrun                => 724;
use constant NN_vmsave               => 725;
use constant NN_invept               => 726;
use constant NN_invvpid              => 727;
use constant NN_movbe                => 728;
use constant NN_aesenc               => 729;
use constant NN_aesenclast           => 730;
use constant NN_aesdec               => 731;
use constant NN_aesdeclast           => 732;
use constant NN_aesimc               => 733;
use constant NN_aeskeygenassist      => 734;
use constant NN_pclmulqdq            => 735;
use constant NN_retnw                => 736;
use constant NN_retnd                => 737;
use constant NN_retnq                => 738;
use constant NN_retfw                => 739;
use constant NN_retfd                => 740;
use constant NN_retfq                => 741;
use constant NN_last                 => 742;
use constant I5_null                 => 0;
use constant I5_aci                  => 1;
use constant I5_adc                  => 2;
use constant Z80_adc                 => 2;
use constant I5_add                  => 3;
use constant Z80_add                 => 3;
use constant I5_adi                  => 4;
use constant I5_ana                  => 5;
use constant I5_ani                  => 6;
use constant I5_call                 => 7;
use constant I5_cnz                  => 8;
use constant I5_cz                   => 9;
use constant I5_cnc                  => 10;
use constant I5_cc                   => 11;
use constant I5_cpo                  => 12;
use constant I5_cpe                  => 13;
use constant I5_cp                   => 14;
use constant I5_cm                   => 15;
use constant I5_cmc                  => 16;
use constant I5_cmp                  => 17;
use constant I5_cpi                  => 18;
use constant I5_cma                  => 19;
use constant I5_daa                  => 20;
use constant I5_dad                  => 21;
use constant I5_dcr                  => 22;
use constant I5_dcx                  => 23;
use constant I5_di                   => 24;
use constant Z80_di                  => 24;
use constant I5_ei                   => 25;
use constant Z80_ei                  => 25;
use constant I5_halt                 => 26;
use constant I5_in                   => 27;
use constant Z80_in                  => 27;
use constant I5_inr                  => 28;
use constant I5_inx                  => 29;
use constant I5_jmp                  => 30;
use constant I5_jnz                  => 31;
use constant I5_jz                   => 32;
use constant I5_jnc                  => 33;
use constant I5_jc                   => 34;
use constant I5_jpo                  => 35;
use constant I5_jpe                  => 36;
use constant I5_jp                   => 37;
use constant I5_jm                   => 38;
use constant I5_lda                  => 39;
use constant I5_ldax                 => 40;
use constant I5_lhld                 => 41;
use constant I5_lxi                  => 42;
use constant I5_mov                  => 43;
use constant I5_mvi                  => 44;
use constant I5_nop                  => 45;
use constant I5_ora                  => 46;
use constant I5_ori                  => 47;
use constant I5_out                  => 48;
use constant Z80_out                 => 48;
use constant I5_pchl                 => 49;
use constant I5_pop                  => 50;
use constant Z80_pop                 => 50;
use constant I5_push                 => 51;
use constant Z80_push                => 51;
use constant I5_ret                  => 52;
use constant I5_rnz                  => 53;
use constant I5_rz                   => 54;
use constant I5_rnc                  => 55;
use constant I5_rc                   => 56;
use constant I5_rpo                  => 57;
use constant I5_rpe                  => 58;
use constant I5_rp                   => 59;
use constant I5_rm                   => 60;
use constant I5_ral                  => 61;
use constant I5_rlc                  => 62;
use constant I5_rar                  => 63;
use constant I5_rrc                  => 64;
use constant I5_rst                  => 65;
use constant I5_sbb                  => 66;
use constant I5_sbi                  => 67;
use constant I5_stc                  => 68;
use constant I5_sphl                 => 69;
use constant I5_sta                  => 70;
use constant I5_stax                 => 71;
use constant I5_shld                 => 72;
use constant I5_sui                  => 73;
use constant I5_sub                  => 74;
use constant Z80_sub                 => 74;
use constant I5_xra                  => 75;
use constant I5_xri                  => 76;
use constant I5_xchg                 => 77;
use constant I5_xthl                 => 78;
use constant I5_rim                  => 79;
use constant I5_sim                  => 80;
use constant Z80_and                 => 81;
use constant Z80_bit                 => 82;
use constant Z80_call                => 83;
use constant Z80_ccf                 => 84;
use constant Z80_cp                  => 85;
use constant Z80_cpd                 => 86;
use constant Z80_cpdr                => 87;
use constant Z80_cpi                 => 88;
use constant Z80_cpir                => 89;
use constant Z80_cpl                 => 90;
use constant Z80_dec                 => 91;
use constant Z80_djnz                => 92;
use constant Z80_ex                  => 93;
use constant Z80_exx                 => 94;
use constant Z80_halt                => 95;
use constant Z80_im                  => 96;
use constant Z80_inc                 => 97;
use constant Z80_ind                 => 98;
use constant Z80_indr                => 99;
use constant Z80_ini                 => 100;
use constant Z80_inir                => 101;
use constant Z80_jp                  => 102;
use constant Z80_jr                  => 103;
use constant Z80_ld                  => 104;
use constant Z80_ldd                 => 105;
use constant Z80_lddr                => 106;
use constant Z80_ldi                 => 107;
use constant Z80_ldir                => 108;
use constant Z80_neg                 => 109;
use constant Z80_or                  => 110;
use constant Z80_otdr                => 111;
use constant Z80_otir                => 112;
use constant Z80_outd                => 113;
use constant Z80_outi                => 114;
use constant Z80_res                 => 115;
use constant Z80_ret                 => 116;
use constant Z80_reti                => 117;
use constant Z80_retn                => 118;
use constant Z80_rl                  => 119;
use constant Z80_rla                 => 120;
use constant Z80_rlc                 => 121;
use constant Z80_rlca                => 122;
use constant Z80_rld                 => 123;
use constant Z80_rr                  => 124;
use constant Z80_rra                 => 125;
use constant Z80_rrc                 => 126;
use constant Z80_rrca                => 127;
use constant Z80_rrd                 => 128;
use constant Z80_scf                 => 129;
use constant Z80_sbc                 => 130;
use constant Z80_set                 => 131;
use constant Z80_sla                 => 132;
use constant Z80_sra                 => 133;
use constant Z80_srl                 => 134;
use constant Z80_xor                 => 135;
use constant Z80_inp                 => 136;
use constant Z80_outp                => 137;
use constant Z80_srr                 => 138;
use constant HD_in0                  => 139;
use constant Z80_in0                 => 139;
use constant HD_mlt                  => 140;
use constant Z80_mlt                 => 140;
use constant HD_otim                 => 141;
use constant Z80_otim                => 141;
use constant HD_otimr                => 142;
use constant Z80_otimr               => 142;
use constant HD_otdm                 => 143;
use constant Z80_otdm                => 143;
use constant HD_otdmr                => 144;
use constant Z80_otdmr               => 144;
use constant HD_out0                 => 145;
use constant Z80_out0                => 145;
use constant HD_slp                  => 146;
use constant Z80_slp                 => 146;
use constant HD_tst                  => 147;
use constant Z80_tst                 => 147;
use constant HD_tstio                => 148;
use constant Z80_tstio               => 148;
use constant A80_lbcd                => 149;
use constant A80_lded                => 150;
use constant A80_lspd                => 151;
use constant A80_lixd                => 152;
use constant A80_liyd                => 153;
use constant A80_sbcd                => 154;
use constant A80_sded                => 155;
use constant A80_sspd                => 156;
use constant A80_sixd                => 157;
use constant A80_siyd                => 158;
use constant A80_xtix                => 159;
use constant A80_xtiy                => 160;
use constant A80_spix                => 161;
use constant A80_spiy                => 162;
use constant A80_pcix                => 163;
use constant A80_pciy                => 164;
use constant A80_mvra                => 165;
use constant A80_mvia                => 166;
use constant A80_mvar                => 167;
use constant A80_mvai                => 168;
use constant A80_addix               => 169;
use constant A80_addiy               => 170;
use constant A80_addc                => 171;
use constant A80_addcix              => 172;
use constant A80_addciy              => 173;
use constant A80_subc                => 174;
use constant A80_subcix              => 175;
use constant A80_subciy              => 176;
use constant A80_jrc                 => 177;
use constant A80_jrnc                => 178;
use constant A80_jrz                 => 179;
use constant A80_jrnz                => 180;
use constant A80_cmpi                => 181;
use constant A80_cmpd                => 182;
use constant A80_im0                 => 183;
use constant A80_im1                 => 184;
use constant A80_im2                 => 185;
use constant A80_otd                 => 186;
use constant A80_oti                 => 187;
use constant I5_dsub                 => 188;
use constant I5_arhl                 => 189;
use constant I5_rdel                 => 190;
use constant I5_ldhi                 => 191;
use constant I5_ldsi                 => 192;
use constant I5_shlx                 => 193;
use constant I5_lhlx                 => 194;
use constant I5_rstv                 => 195;
use constant I5_jx5                  => 196;
use constant I5_jnx5                 => 197;
use constant Z80_cplw                => 198;
use constant Z80_swap                => 199;
use constant Z80_inw                 => 200;
use constant Z80_outw                => 201;
use constant Z80_ldw                 => 202;
use constant Z80_addw                => 203;
use constant Z80_subw                => 204;
use constant Z80_adcw                => 205;
use constant Z80_sbcw                => 206;
use constant Z80_andw                => 207;
use constant Z80_xorw                => 208;
use constant Z80_orw                 => 209;
use constant Z80_cpw                 => 210;
use constant Z80_ddir                => 211;
use constant Z80_calr                => 212;
use constant Z80_ldctl               => 213;
use constant Z80_mtest               => 214;
use constant Z80_exxx                => 215;
use constant Z80_exxy                => 216;
use constant Z80_exall               => 217;
use constant Z80_setc                => 218;
use constant Z80_resc                => 219;
use constant Z80_rlcw                => 220;
use constant Z80_rrcw                => 221;
use constant Z80_rlw                 => 222;
use constant Z80_rrw                 => 223;
use constant Z80_slaw                => 224;
use constant Z80_sraw                => 225;
use constant Z80_srlw                => 226;
use constant Z80_multw               => 227;
use constant Z80_multuw              => 228;
use constant Z80_divuw               => 229;
use constant Z80_outaw               => 230;
use constant Z80_inaw                => 231;
use constant Z80_outa                => 232;
use constant Z80_ina                 => 233;
use constant Z80_negw                => 234;
use constant Z80_exts                => 235;
use constant Z80_extsw               => 236;
use constant Z80_btest               => 237;
use constant Z80_ldiw                => 238;
use constant Z80_ldirw               => 239;
use constant Z80_lddw                => 240;
use constant Z80_lddrw               => 241;
use constant Z80_iniw                => 242;
use constant Z80_inirw               => 243;
use constant Z80_indw                => 244;
use constant Z80_indrw               => 245;
use constant Z80_outiw               => 246;
use constant Z80_otirw               => 247;
use constant Z80_outdw               => 248;
use constant Z80_otdrw               => 249;
use constant GB_ldh                  => 250;
use constant GB_stop                 => 251;
use constant I5_last                 => 252;
use constant I860_null               => 0;
use constant I860_adds               => 1;
use constant I860_addu               => 2;
use constant I860_and                => 3;
use constant I860_andh               => 4;
use constant I860_andnot             => 5;
use constant I860_andnoth            => 6;
use constant I860_bc                 => 7;
use constant I860_bc_t               => 8;
use constant I860_bla                => 9;
use constant I860_bnc                => 10;
use constant I860_bnc_t              => 11;
use constant I860_br                 => 12;
use constant I860_bri                => 13;
use constant I860_bte                => 14;
use constant I860_btne               => 15;
use constant I860_call               => 16;
use constant I860_calli              => 17;
use constant I860_fadd               => 18;
use constant I860_faddp              => 19;
use constant I860_faddz              => 20;
use constant I860_famov              => 21;
use constant I860_fiadd              => 22;
use constant I860_fisub              => 23;
use constant I860_fix                => 24;
use constant I860_fld                => 25;
use constant I860_flush              => 26;
use constant I860_fmlow_dd           => 27;
use constant I860_fmul               => 28;
use constant I860_form               => 29;
use constant I860_frcp               => 30;
use constant I860_frsqr              => 31;
use constant I860_fst                => 32;
use constant I860_fsub               => 33;
use constant I860_ftrunc             => 34;
use constant I860_fxfr               => 35;
use constant I860_fzchkl             => 36;
use constant I860_fzchks             => 37;
use constant I860_introvr            => 38;
use constant I860_ixfr               => 39;
use constant I860_ld_c               => 40;
use constant I860_ld                 => 41;
use constant I860_ldint              => 42;
use constant I860_ldio               => 43;
use constant I860_lock               => 44;
use constant I860_or                 => 45;
use constant I860_orh                => 46;
use constant I860_pfadd              => 47;
use constant I860_pfaddp             => 48;
use constant I860_pfaddz             => 49;
use constant I860_pfamov             => 50;
use constant I860_pfeq               => 51;
use constant I860_pfgt               => 52;
use constant I860_pfiadd             => 53;
use constant I860_pfisub             => 54;
use constant I860_pfix               => 55;
use constant I860_pfld               => 56;
use constant I860_pfle               => 57;
use constant I860_pfmul              => 58;
use constant I860_pfmul3_dd          => 59;
use constant I860_pform              => 60;
use constant I860_pfsub              => 61;
use constant I860_pftrunc            => 62;
use constant I860_pfzchkl            => 63;
use constant I860_pfzchks            => 64;
use constant I860_pst_d              => 65;
use constant I860_scyc               => 66;
use constant I860_shl                => 67;
use constant I860_shr                => 68;
use constant I860_shra               => 69;
use constant I860_shrd               => 70;
use constant I860_st_c               => 71;
use constant I860_st                 => 72;
use constant I860_stio               => 73;
use constant I860_subs               => 74;
use constant I860_subu               => 75;
use constant I860_trap               => 76;
use constant I860_unlock             => 77;
use constant I860_xor                => 78;
use constant I860_xorh               => 79;
use constant I860_r2p1               => 80;
use constant I860_r2pt               => 81;
use constant I860_r2ap1              => 82;
use constant I860_r2apt              => 83;
use constant I860_i2p1               => 84;
use constant I860_i2pt               => 85;
use constant I860_i2ap1              => 86;
use constant I860_i2apt              => 87;
use constant I860_rat1p2             => 88;
use constant I860_m12apm             => 89;
use constant I860_ra1p2              => 90;
use constant I860_m12ttpa            => 91;
use constant I860_iat1p2             => 92;
use constant I860_m12tpm             => 93;
use constant I860_ia1p2              => 94;
use constant I860_m12tpa             => 95;
use constant I860_r2s1               => 96;
use constant I860_r2st               => 97;
use constant I860_r2as1              => 98;
use constant I860_r2ast              => 99;
use constant I860_i2s1               => 100;
use constant I860_i2st               => 101;
use constant I860_i2as1              => 102;
use constant I860_i2ast              => 103;
use constant I860_rat1s2             => 104;
use constant I860_m12asm             => 105;
use constant I860_ra1s2              => 106;
use constant I860_m12ttsa            => 107;
use constant I860_iat1s2             => 108;
use constant I860_m12tsm             => 109;
use constant I860_ia1s2              => 110;
use constant I860_m12tsa             => 111;
use constant I860_mr2p1              => 112;
use constant I860_mr2pt              => 113;
use constant I860_mr2mp1             => 114;
use constant I860_mr2mpt             => 115;
use constant I860_mi2p1              => 116;
use constant I860_mi2pt              => 117;
use constant I860_mi2mp1             => 118;
use constant I860_mi2mpt             => 119;
use constant I860_mrmt1p2            => 120;
use constant I860_mm12mpm            => 121;
use constant I860_mrm1p2             => 122;
use constant I860_mm12ttpm           => 123;
use constant I860_mimt1p2            => 124;
use constant I860_mm12tpm            => 125;
use constant I860_mim1p2             => 126;
use constant I860_mr2s1              => 127;
use constant I860_mr2st              => 128;
use constant I860_mr2ms1             => 129;
use constant I860_mr2mst             => 130;
use constant I860_mi2s1              => 131;
use constant I860_mi2st              => 132;
use constant I860_mi2ms1             => 133;
use constant I860_mi2mst             => 134;
use constant I860_mrmt1s2            => 135;
use constant I860_mm12msm            => 136;
use constant I860_mrm1s2             => 137;
use constant I860_mm12ttsm           => 138;
use constant I860_mimt1s2            => 139;
use constant I860_mm12tsm            => 140;
use constant I860_mim1s2             => 141;
use constant I860_last               => 142;
use constant I51_null                => 0;
use constant I51_acall               => 1;
use constant I51_add                 => 2;
use constant I51_addc                => 3;
use constant I51_ajmp                => 4;
use constant I51_anl                 => 5;
use constant I51_cjne                => 6;
use constant I51_clr                 => 7;
use constant I51_cpl                 => 8;
use constant I51_da                  => 9;
use constant I51_dec                 => 10;
use constant I51_div                 => 11;
use constant I51_djnz                => 12;
use constant I51_inc                 => 13;
use constant I51_jb                  => 14;
use constant I51_jbc                 => 15;
use constant I51_jc                  => 16;
use constant I51_jmp                 => 17;
use constant I51_jnb                 => 18;
use constant I51_jnc                 => 19;
use constant I51_jnz                 => 20;
use constant I51_jz                  => 21;
use constant I51_lcall               => 22;
use constant I51_ljmp                => 23;
use constant I51_mov                 => 24;
use constant I51_movc                => 25;
use constant I51_movx                => 26;
use constant I51_mul                 => 27;
use constant I51_nop                 => 28;
use constant I51_orl                 => 29;
use constant I51_pop                 => 30;
use constant I51_push                => 31;
use constant I51_ret                 => 32;
use constant I51_reti                => 33;
use constant I51_rl                  => 34;
use constant I51_rlc                 => 35;
use constant I51_rr                  => 36;
use constant I51_rrc                 => 37;
use constant I51_setb                => 38;
use constant I51_sjmp                => 39;
use constant I51_subb                => 40;
use constant I51_swap                => 41;
use constant I51_xch                 => 42;
use constant I51_xchd                => 43;
use constant I51_xrl                 => 44;
use constant I51_jsle                => 45;
use constant I51_jsg                 => 46;
use constant I51_jle                 => 47;
use constant I51_jg                  => 48;
use constant I51_jsl                 => 49;
use constant I51_jsge                => 50;
use constant I51_je                  => 51;
use constant I51_jne                 => 52;
use constant I51_trap                => 53;
use constant I51_ejmp                => 54;
use constant I51_ecall               => 55;
use constant I51_eret                => 56;
use constant I51_movh                => 57;
use constant I51_movz                => 58;
use constant I51_movs                => 59;
use constant I51_srl                 => 60;
use constant I51_sra                 => 61;
use constant I51_sll                 => 62;
use constant I51_sub                 => 63;
use constant I51_cmp                 => 64;
use constant I51_last                => 65;
use constant TMS_null                => 0;
use constant TMS_abs                 => 1;
use constant TMS_adcb                => 2;
use constant TMS_add                 => 3;
use constant TMS_addb                => 4;
use constant TMS_addc                => 5;
use constant TMS_adds                => 6;
use constant TMS_addt                => 7;
use constant TMS_adrk                => 8;
use constant TMS_and                 => 9;
use constant TMS_andb                => 10;
use constant TMS_apac                => 11;
use constant TMS_apl                 => 12;
use constant TMS_apl2                => 13;
use constant TMS_b                   => 14;
use constant TMS_bacc                => 15;
use constant TMS_baccd               => 16;
use constant TMS_banz                => 17;
use constant TMS_banzd               => 18;
use constant TMS_bcnd                => 19;
use constant TMS_bcndd               => 20;
use constant TMS_bd                  => 21;
use constant TMS_bit                 => 22;
use constant TMS_bitt                => 23;
use constant TMS_bldd                => 24;
use constant TMS_bldp                => 25;
use constant TMS_blpd                => 26;
use constant TMS_bsar                => 27;
use constant TMS_cala                => 28;
use constant TMS_calad               => 29;
use constant TMS_call                => 30;
use constant TMS_calld               => 31;
use constant TMS_cc                  => 32;
use constant TMS_ccd                 => 33;
use constant TMS_clrc                => 34;
use constant TMS_cmpl                => 35;
use constant TMS_cmpr                => 36;
use constant TMS_cpl                 => 37;
use constant TMS_cpl2                => 38;
use constant TMS_crgt                => 39;
use constant TMS_crlt                => 40;
use constant TMS_dmov                => 41;
use constant TMS_estop               => 42;
use constant TMS_exar                => 43;
use constant TMS_idle                => 44;
use constant TMS_idle2               => 45;
use constant TMS_in                  => 46;
use constant TMS_intr                => 47;
use constant TMS_lacb                => 48;
use constant TMS_lacc                => 49;
use constant TMS_lacl                => 50;
use constant TMS_lact                => 51;
use constant TMS_lamm                => 52;
use constant TMS_lar                 => 53;
use constant TMS_ldp                 => 54;
use constant TMS_lmmr                => 55;
use constant TMS_lph                 => 56;
use constant TMS_lst                 => 57;
use constant TMS_lt                  => 58;
use constant TMS_lta                 => 59;
use constant TMS_ltd                 => 60;
use constant TMS_ltp                 => 61;
use constant TMS_lts                 => 62;
use constant TMS_mac                 => 63;
use constant TMS_macd                => 64;
use constant TMS_madd                => 65;
use constant TMS_mads                => 66;
use constant TMS_mar                 => 67;
use constant TMS_mpy                 => 68;
use constant TMS_mpya                => 69;
use constant TMS_mpys                => 70;
use constant TMS_mpyu                => 71;
use constant TMS_neg                 => 72;
use constant TMS_nmi                 => 73;
use constant TMS_nop                 => 74;
use constant TMS_norm                => 75;
use constant TMS_opl                 => 76;
use constant TMS_opl2                => 77;
use constant TMS_or                  => 78;
use constant TMS_orb                 => 79;
use constant TMS_out                 => 80;
use constant TMS_pac                 => 81;
use constant TMS_pop                 => 82;
use constant TMS_popd                => 83;
use constant TMS_pshd                => 84;
use constant TMS_push                => 85;
use constant TMS_ret                 => 86;
use constant TMS_retc                => 87;
use constant TMS_retcd               => 88;
use constant TMS_retd                => 89;
use constant TMS_rete                => 90;
use constant TMS_reti                => 91;
use constant TMS_rol                 => 92;
use constant TMS_rolb                => 93;
use constant TMS_ror                 => 94;
use constant TMS_rorb                => 95;
use constant TMS_rpt                 => 96;
use constant TMS_rptb                => 97;
use constant TMS_rptz                => 98;
use constant TMS_sacb                => 99;
use constant TMS_sach                => 100;
use constant TMS_sacl                => 101;
use constant TMS_samm                => 102;
use constant TMS_sar                 => 103;
use constant TMS_sath                => 104;
use constant TMS_satl                => 105;
use constant TMS_sbb                 => 106;
use constant TMS_sbbb                => 107;
use constant TMS_sbrk                => 108;
use constant TMS_setc                => 109;
use constant TMS_sfl                 => 110;
use constant TMS_sflb                => 111;
use constant TMS_sfr                 => 112;
use constant TMS_sfrb                => 113;
use constant TMS_smmr                => 114;
use constant TMS_spac                => 115;
use constant TMS_sph                 => 116;
use constant TMS_spl                 => 117;
use constant TMS_splk                => 118;
use constant TMS_spm                 => 119;
use constant TMS_sqra                => 120;
use constant TMS_sqrs                => 121;
use constant TMS_sst                 => 122;
use constant TMS_sub                 => 123;
use constant TMS_subb                => 124;
use constant TMS_subc                => 125;
use constant TMS_subs                => 126;
use constant TMS_subt                => 127;
use constant TMS_tblr                => 128;
use constant TMS_tblw                => 129;
use constant TMS_trap                => 130;
use constant TMS_xc                  => 131;
use constant TMS_xor                 => 132;
use constant TMS_xorb                => 133;
use constant TMS_xpl                 => 134;
use constant TMS_xpl2                => 135;
use constant TMS_zalr                => 136;
use constant TMS_zap                 => 137;
use constant TMS_zpr                 => 138;
use constant TMS2_abs                => 139;
use constant TMS2_add                => 140;
use constant TMS2_addc               => 141;
use constant TMS2_addh               => 142;
use constant TMS2_addk               => 143;
use constant TMS2_adds               => 144;
use constant TMS2_addt               => 145;
use constant TMS2_adlk               => 146;
use constant TMS2_adrk               => 147;
use constant TMS2_and                => 148;
use constant TMS2_andk               => 149;
use constant TMS2_apac               => 150;
use constant TMS2_b                  => 151;
use constant TMS2_bacc               => 152;
use constant TMS2_banz               => 153;
use constant TMS2_bbnz               => 154;
use constant TMS2_bbz                => 155;
use constant TMS2_bc                 => 156;
use constant TMS2_bgez               => 157;
use constant TMS2_bgz                => 158;
use constant TMS2_bioz               => 159;
use constant TMS2_bit                => 160;
use constant TMS2_bitt               => 161;
use constant TMS2_blez               => 162;
use constant TMS2_blkd               => 163;
use constant TMS2_blkp               => 164;
use constant TMS2_blz                => 165;
use constant TMS2_bnc                => 166;
use constant TMS2_bnv                => 167;
use constant TMS2_bnz                => 168;
use constant TMS2_bv                 => 169;
use constant TMS2_bz                 => 170;
use constant TMS2_cala               => 171;
use constant TMS2_call               => 172;
use constant TMS2_cmpl               => 173;
use constant TMS2_cmpr               => 174;
use constant TMS2_cnfd               => 175;
use constant TMS2_cnfp               => 176;
use constant TMS2_conf               => 177;
use constant TMS2_dint               => 178;
use constant TMS2_dmov               => 179;
use constant TMS2_eint               => 180;
use constant TMS2_fort               => 181;
use constant TMS2_idle               => 182;
use constant TMS2_in                 => 183;
use constant TMS2_lac                => 184;
use constant TMS2_lack               => 185;
use constant TMS2_lact               => 186;
use constant TMS2_lalk               => 187;
use constant TMS2_lar                => 188;
use constant TMS2_lark               => 189;
use constant TMS2_larp               => 190;
use constant TMS2_ldp                => 191;
use constant TMS2_ldpk               => 192;
use constant TMS2_lph                => 193;
use constant TMS2_lrlk               => 194;
use constant TMS2_lst                => 195;
use constant TMS2_lst1               => 196;
use constant TMS2_lt                 => 197;
use constant TMS2_lta                => 198;
use constant TMS2_ltd                => 199;
use constant TMS2_ltp                => 200;
use constant TMS2_lts                => 201;
use constant TMS2_mac                => 202;
use constant TMS2_macd               => 203;
use constant TMS2_mar                => 204;
use constant TMS2_mpy                => 205;
use constant TMS2_mpya               => 206;
use constant TMS2_mpyk               => 207;
use constant TMS2_mpys               => 208;
use constant TMS2_mpyu               => 209;
use constant TMS2_neg                => 210;
use constant TMS2_nop                => 211;
use constant TMS2_norm               => 212;
use constant TMS2_or                 => 213;
use constant TMS2_ork                => 214;
use constant TMS2_out                => 215;
use constant TMS2_pac                => 216;
use constant TMS2_pop                => 217;
use constant TMS2_popd               => 218;
use constant TMS2_pshd               => 219;
use constant TMS2_push               => 220;
use constant TMS2_rc                 => 221;
use constant TMS2_ret                => 222;
use constant TMS2_rfsm               => 223;
use constant TMS2_rhm                => 224;
use constant TMS2_rol                => 225;
use constant TMS2_ror                => 226;
use constant TMS2_rovm               => 227;
use constant TMS2_rpt                => 228;
use constant TMS2_rptk               => 229;
use constant TMS2_rsxm               => 230;
use constant TMS2_rtc                => 231;
use constant TMS2_rtxm               => 232;
use constant TMS2_rxf                => 233;
use constant TMS2_sach               => 234;
use constant TMS2_sacl               => 235;
use constant TMS2_sar                => 236;
use constant TMS2_sblk               => 237;
use constant TMS2_sbrk               => 238;
use constant TMS2_sc                 => 239;
use constant TMS2_sfl                => 240;
use constant TMS2_sfr                => 241;
use constant TMS2_sfsm               => 242;
use constant TMS2_shm                => 243;
use constant TMS2_sovm               => 244;
use constant TMS2_spac               => 245;
use constant TMS2_sph                => 246;
use constant TMS2_spl                => 247;
use constant TMS2_spm                => 248;
use constant TMS2_sqra               => 249;
use constant TMS2_sqrs               => 250;
use constant TMS2_sst                => 251;
use constant TMS2_sst1               => 252;
use constant TMS2_ssxm               => 253;
use constant TMS2_stc                => 254;
use constant TMS2_stxm               => 255;
use constant TMS2_sub                => 256;
use constant TMS2_subb               => 257;
use constant TMS2_subc               => 258;
use constant TMS2_subh               => 259;
use constant TMS2_subk               => 260;
use constant TMS2_subs               => 261;
use constant TMS2_subt               => 262;
use constant TMS2_sxf                => 263;
use constant TMS2_tblr               => 264;
use constant TMS2_tblw               => 265;
use constant TMS2_trap               => 266;
use constant TMS2_xor                => 267;
use constant TMS2_xork               => 268;
use constant TMS2_zac                => 269;
use constant TMS2_zalh               => 270;
use constant TMS2_zalr               => 271;
use constant TMS2_zals               => 272;
use constant TMS_last                => 273;
use constant M65_null                => 0;
use constant M65_adc                 => 1;
use constant M65_anc                 => 2;
use constant M65_and                 => 3;
use constant M65_ane                 => 4;
use constant M65_arr                 => 5;
use constant M65_asl                 => 6;
use constant M65_asr                 => 7;
use constant M65_bcc                 => 8;
use constant M65_bcs                 => 9;
use constant M65_beq                 => 10;
use constant M65_bit                 => 11;
use constant M65_bmi                 => 12;
use constant M65_bne                 => 13;
use constant M65_bpl                 => 14;
use constant M65_brk                 => 15;
use constant M65_bvc                 => 16;
use constant M65_bvs                 => 17;
use constant M65_clc                 => 18;
use constant M65_cld                 => 19;
use constant M65_cli                 => 20;
use constant M65_clv                 => 21;
use constant M65_cmp                 => 22;
use constant M65_cpx                 => 23;
use constant M65_cpy                 => 24;
use constant M65_dcp                 => 25;
use constant M65_dec                 => 26;
use constant M65_dex                 => 27;
use constant M65_dey                 => 28;
use constant M65_eor                 => 29;
use constant M65_inc                 => 30;
use constant M65_inx                 => 31;
use constant M65_iny                 => 32;
use constant M65_isb                 => 33;
use constant M65_jmp                 => 34;
use constant M65_jmpi                => 35;
use constant M65_jsr                 => 36;
use constant M65_lae                 => 37;
use constant M65_lax                 => 38;
use constant M65_lda                 => 39;
use constant M65_ldx                 => 40;
use constant M65_ldy                 => 41;
use constant M65_lsr                 => 42;
use constant M65_lxa                 => 43;
use constant M65_nop                 => 44;
use constant M65_ora                 => 45;
use constant M65_pha                 => 46;
use constant M65_php                 => 47;
use constant M65_pla                 => 48;
use constant M65_plp                 => 49;
use constant M65_rla                 => 50;
use constant M65_rol                 => 51;
use constant M65_ror                 => 52;
use constant M65_rra                 => 53;
use constant M65_rti                 => 54;
use constant M65_rts                 => 55;
use constant M65_sax                 => 56;
use constant M65_sbc                 => 57;
use constant M65_sbx                 => 58;
use constant M65_sec                 => 59;
use constant M65_sed                 => 60;
use constant M65_sei                 => 61;
use constant M65_sha                 => 62;
use constant M65_shs                 => 63;
use constant M65_shx                 => 64;
use constant M65_shy                 => 65;
use constant M65_slo                 => 66;
use constant M65_sre                 => 67;
use constant M65_sta                 => 68;
use constant M65_stx                 => 69;
use constant M65_sty                 => 70;
use constant M65_tax                 => 71;
use constant M65_tay                 => 72;
use constant M65_tsx                 => 73;
use constant M65_txa                 => 74;
use constant M65_txs                 => 75;
use constant M65_tya                 => 76;
use constant M65_bbr0                => 77;
use constant M65_bbr1                => 78;
use constant M65_bbr2                => 79;
use constant M65_bbr3                => 80;
use constant M65_bbr4                => 81;
use constant M65_bbr5                => 82;
use constant M65_bbr6                => 83;
use constant M65_bbr7                => 84;
use constant M65_bbs0                => 85;
use constant M65_bbs1                => 86;
use constant M65_bbs2                => 87;
use constant M65_bbs3                => 88;
use constant M65_bbs4                => 89;
use constant M65_bbs5                => 90;
use constant M65_bbs6                => 91;
use constant M65_bbs7                => 92;
use constant M65_rmb0                => 93;
use constant M65_rmb1                => 94;
use constant M65_rmb2                => 95;
use constant M65_rmb3                => 96;
use constant M65_rmb4                => 97;
use constant M65_rmb5                => 98;
use constant M65_rmb6                => 99;
use constant M65_rmb7                => 100;
use constant M65_smb0                => 101;
use constant M65_smb1                => 102;
use constant M65_smb2                => 103;
use constant M65_smb3                => 104;
use constant M65_smb4                => 105;
use constant M65_smb5                => 106;
use constant M65_smb6                => 107;
use constant M65_smb7                => 108;
use constant M65_stz                 => 109;
use constant M65_tsb                 => 110;
use constant M65_trb                 => 111;
use constant M65_phy                 => 112;
use constant M65_ply                 => 113;
use constant M65_phx                 => 114;
use constant M65_plx                 => 115;
use constant M65_bra                 => 116;
use constant M65_last                => 117;
use constant M65816_null             => 0;
use constant M65816_adc              => 1;
use constant M65816_and              => 2;
use constant M65816_asl              => 3;
use constant M65816_bcc              => 4;
use constant M65816_bcs              => 5;
use constant M65816_beq              => 6;
use constant M65816_bit              => 7;
use constant M65816_bmi              => 8;
use constant M65816_bne              => 9;
use constant M65816_bpl              => 10;
use constant M65816_bra              => 11;
use constant M65816_brk              => 12;
use constant M65816_brl              => 13;
use constant M65816_bvc              => 14;
use constant M65816_bvs              => 15;
use constant M65816_clc              => 16;
use constant M65816_cld              => 17;
use constant M65816_cli              => 18;
use constant M65816_clv              => 19;
use constant M65816_cmp              => 20;
use constant M65816_cop              => 21;
use constant M65816_cpx              => 22;
use constant M65816_cpy              => 23;
use constant M65816_dec              => 24;
use constant M65816_dex              => 25;
use constant M65816_dey              => 26;
use constant M65816_eor              => 27;
use constant M65816_inc              => 28;
use constant M65816_inx              => 29;
use constant M65816_iny              => 30;
use constant M65816_jml              => 31;
use constant M65816_jmp              => 32;
use constant M65816_jsl              => 33;
use constant M65816_jsr              => 34;
use constant M65816_lda              => 35;
use constant M65816_ldx              => 36;
use constant M65816_ldy              => 37;
use constant M65816_lsr              => 38;
use constant M65816_mvn              => 39;
use constant M65816_mvp              => 40;
use constant M65816_nop              => 41;
use constant M65816_ora              => 42;
use constant M65816_pea              => 43;
use constant M65816_pei              => 44;
use constant M65816_per              => 45;
use constant M65816_pha              => 46;
use constant M65816_phb              => 47;
use constant M65816_phd              => 48;
use constant M65816_phk              => 49;
use constant M65816_php              => 50;
use constant M65816_phx              => 51;
use constant M65816_phy              => 52;
use constant M65816_pla              => 53;
use constant M65816_plb              => 54;
use constant M65816_pld              => 55;
use constant M65816_plp              => 56;
use constant M65816_plx              => 57;
use constant M65816_ply              => 58;
use constant M65816_rep              => 59;
use constant M65816_rol              => 60;
use constant M65816_ror              => 61;
use constant M65816_rti              => 62;
use constant M65816_rtl              => 63;
use constant M65816_rts              => 64;
use constant M65816_sbc              => 65;
use constant M65816_sec              => 66;
use constant M65816_sed              => 67;
use constant M65816_sei              => 68;
use constant M65816_sep              => 69;
use constant M65816_sta              => 70;
use constant M65816_stp              => 71;
use constant M65816_stx              => 72;
use constant M65816_sty              => 73;
use constant M65816_stz              => 74;
use constant M65816_tax              => 75;
use constant M65816_tay              => 76;
use constant M65816_tcd              => 77;
use constant M65816_tcs              => 78;
use constant M65816_tdc              => 79;
use constant M65816_trb              => 80;
use constant M65816_tsb              => 81;
use constant M65816_tsc              => 82;
use constant M65816_tsx              => 83;
use constant M65816_txa              => 84;
use constant M65816_txs              => 85;
use constant M65816_txy              => 86;
use constant M65816_tya              => 87;
use constant M65816_tyx              => 88;
use constant M65816_wai              => 89;
use constant M65816_wdm              => 90;
use constant M65816_xba              => 91;
use constant M65816_xce              => 92;
use constant M65816_last             => 93;
use constant pdp_null                => 0;
use constant pdp_halt                => 1;
use constant pdp_wait                => 2;
use constant pdp_rti                 => 3;
use constant pdp_bpt                 => 4;
use constant pdp_iot                 => 5;
use constant pdp_reset               => 6;
use constant pdp_rtt                 => 7;
use constant pdp_mfpt                => 8;
use constant pdp_jmp                 => 9;
use constant pdp_rts                 => 10;
use constant pdp_spl                 => 11;
use constant pdp_nop                 => 12;
use constant pdp_clc                 => 13;
use constant pdp_clv                 => 14;
use constant pdp_clz                 => 15;
use constant pdp_cln                 => 16;
use constant pdp_ccc                 => 17;
use constant pdp_sec                 => 18;
use constant pdp_sev                 => 19;
use constant pdp_sez                 => 20;
use constant pdp_sen                 => 21;
use constant pdp_scc                 => 22;
use constant pdp_swab                => 23;
use constant pdp_br                  => 24;
use constant pdp_bne                 => 25;
use constant pdp_beq                 => 26;
use constant pdp_bge                 => 27;
use constant pdp_blt                 => 28;
use constant pdp_bgt                 => 29;
use constant pdp_ble                 => 30;
use constant pdp_jsr                 => 31;
use constant pdp_clr                 => 32;
use constant pdp_com                 => 33;
use constant pdp_inc                 => 34;
use constant pdp_dec                 => 35;
use constant pdp_neg                 => 36;
use constant pdp_adc                 => 37;
use constant pdp_sbc                 => 38;
use constant pdp_tst                 => 39;
use constant pdp_ror                 => 40;
use constant pdp_rol                 => 41;
use constant pdp_asr                 => 42;
use constant pdp_asl                 => 43;
use constant pdp_mark                => 44;
use constant pdp_mfpi                => 45;
use constant pdp_mtpi                => 46;
use constant pdp_sxt                 => 47;
use constant pdp_mov                 => 48;
use constant pdp_cmp                 => 49;
use constant pdp_bit                 => 50;
use constant pdp_bic                 => 51;
use constant pdp_bis                 => 52;
use constant pdp_add                 => 53;
use constant pdp_sub                 => 54;
use constant pdp_mul                 => 55;
use constant pdp_div                 => 56;
use constant pdp_ash                 => 57;
use constant pdp_ashc                => 58;
use constant pdp_xor                 => 59;
use constant pdp_fadd                => 60;
use constant pdp_fsub                => 61;
use constant pdp_fmul                => 62;
use constant pdp_fdiv                => 63;
use constant pdp_sob                 => 64;
use constant pdp_bpl                 => 65;
use constant pdp_bmi                 => 66;
use constant pdp_bhi                 => 67;
use constant pdp_blos                => 68;
use constant pdp_bvc                 => 69;
use constant pdp_bvs                 => 70;
use constant pdp_bcc                 => 71;
use constant pdp_bcs                 => 72;
use constant pdp_emt                 => 73;
use constant pdp_trap                => 74;
use constant pdp_mtps                => 75;
use constant pdp_mfpd                => 76;
use constant pdp_mtpd                => 77;
use constant pdp_mfps                => 78;
use constant pdp_cfcc                => 79;
use constant pdp_setf                => 80;
use constant pdp_seti                => 81;
use constant pdp_setd                => 82;
use constant pdp_setl                => 83;
use constant pdp_ldfps               => 84;
use constant pdp_stfps               => 85;
use constant pdp_stst                => 86;
use constant pdp_clrd                => 87;
use constant pdp_tstd                => 88;
use constant pdp_absd                => 89;
use constant pdp_negd                => 90;
use constant pdp_muld                => 91;
use constant pdp_modd                => 92;
use constant pdp_addd                => 93;
use constant pdp_ldd                 => 94;
use constant pdp_subd                => 95;
use constant pdp_cmpd                => 96;
use constant pdp_std                 => 97;
use constant pdp_divd                => 98;
use constant pdp_stexp               => 99;
use constant pdp_stcdi               => 100;
use constant pdp_stcdf               => 101;
use constant pdp_ldexp               => 102;
use constant pdp_ldcif               => 103;
use constant pdp_ldcfd               => 104;
use constant pdp_call                => 105;
use constant pdp_return              => 106;
use constant pdp_compcc              => 107;
use constant pdp_last                => 108;
use constant mc_null                 => 0;
use constant mc_abcd                 => 1;
use constant mc_add                  => 2;
use constant mc_adda                 => 3;
use constant mc_addi                 => 4;
use constant mc_addq                 => 5;
use constant mc_addx                 => 6;
use constant mc_and                  => 7;
use constant mc_andi                 => 8;
use constant mc_asl                  => 9;
use constant mc_asr                  => 10;
use constant mc_b                    => 11;
use constant mc_bchg                 => 12;
use constant mc_bclr                 => 13;
use constant mc_bftst                => 14;
use constant mc_bfchg                => 15;
use constant mc_bfclr                => 16;
use constant mc_bfset                => 17;
use constant mc_bfextu               => 18;
use constant mc_bfexts               => 19;
use constant mc_bfffo                => 20;
use constant mc_bfins                => 21;
use constant mc_bgnd                 => 22;
use constant mc_bkpt                 => 23;
use constant mc_bra                  => 24;
use constant mc_bset                 => 25;
use constant mc_bsr                  => 26;
use constant mc_btst                 => 27;
use constant mc_callm                => 28;
use constant mc_cas                  => 29;
use constant mc_cas2                 => 30;
use constant mc_chk                  => 31;
use constant mc_chk2                 => 32;
use constant mc_cinv                 => 33;
use constant mc_clr                  => 34;
use constant mc_cmp                  => 35;
use constant mc_cmp2                 => 36;
use constant mc_cmpa                 => 37;
use constant mc_cmpi                 => 38;
use constant mc_cmpm                 => 39;
use constant mc_cpush                => 40;
use constant mc_db                   => 41;
use constant mc_divs                 => 42;
use constant mc_divsl                => 43;
use constant mc_divu                 => 44;
use constant mc_divul                => 45;
use constant mc_eor                  => 46;
use constant mc_eori                 => 47;
use constant mc_exg                  => 48;
use constant mc_ext                  => 49;
use constant mc_extb                 => 50;
use constant mc_fabs                 => 51;
use constant mc_facos                => 52;
use constant mc_fadd                 => 53;
use constant mc_fasin                => 54;
use constant mc_fatan                => 55;
use constant mc_fatanh               => 56;
use constant mc_fb                   => 57;
use constant mc_fcmp                 => 58;
use constant mc_fcos                 => 59;
use constant mc_fcosh                => 60;
use constant mc_fdabs                => 61;
use constant mc_fdadd                => 62;
use constant mc_fdb                  => 63;
use constant mc_fddiv                => 64;
use constant mc_fdiv                 => 65;
use constant mc_fdmove               => 66;
use constant mc_fdmul                => 67;
use constant mc_fdneg                => 68;
use constant mc_fdsqrt               => 69;
use constant mc_fdsub                => 70;
use constant mc_fetox                => 71;
use constant mc_fetoxm1              => 72;
use constant mc_fgetexp              => 73;
use constant mc_fgetman              => 74;
use constant mc_fint                 => 75;
use constant mc_fintrz               => 76;
use constant mc_flog2                => 77;
use constant mc_flog10               => 78;
use constant mc_flogn                => 79;
use constant mc_flognp1              => 80;
use constant mc_fmod                 => 81;
use constant mc_fmove                => 82;
use constant mc_fmovecr              => 83;
use constant mc_fmovem               => 84;
use constant mc_fmul                 => 85;
use constant mc_fneg                 => 86;
use constant mc_fnop                 => 87;
use constant mc_frem                 => 88;
use constant mc_frestore             => 89;
use constant mc_fs                   => 90;
use constant mc_fsabs                => 91;
use constant mc_fsadd                => 92;
use constant mc_fsave                => 93;
use constant mc_fscale               => 94;
use constant mc_fsdiv                => 95;
use constant mc_fsgldiv              => 96;
use constant mc_fsglmul              => 97;
use constant mc_fsin                 => 98;
use constant mc_fsincos              => 99;
use constant mc_fsinh                => 100;
use constant mc_fsmove               => 101;
use constant mc_fsmul                => 102;
use constant mc_fsneg                => 103;
use constant mc_fsqrt                => 104;
use constant mc_fssqrt               => 105;
use constant mc_fssub                => 106;
use constant mc_fsub                 => 107;
use constant mc_ftan                 => 108;
use constant mc_ftanh                => 109;
use constant mc_ftentox              => 110;
use constant mc_ftrap                => 111;
use constant mc_ftst                 => 112;
use constant mc_ftwotox              => 113;
use constant mc_halt                 => 114;
use constant mc_illegal              => 115;
use constant mc_jmp                  => 116;
use constant mc_jsr                  => 117;
use constant mc_lea                  => 118;
use constant mc_link                 => 119;
use constant mc_lpstop               => 120;
use constant mc_lsl                  => 121;
use constant mc_lsr                  => 122;
use constant mc_mac                  => 123;
use constant mc_macl                 => 124;
use constant mc_move                 => 125;
use constant mc_move16               => 126;
use constant mc_movea                => 127;
use constant mc_movec                => 128;
use constant mc_movem                => 129;
use constant mc_movep                => 130;
use constant mc_moveq                => 131;
use constant mc_moves                => 132;
use constant mc_msac                 => 133;
use constant mc_msacl                => 134;
use constant mc_muls                 => 135;
use constant mc_mulu                 => 136;
use constant mc_nbcd                 => 137;
use constant mc_neg                  => 138;
use constant mc_negx                 => 139;
use constant mc_nop                  => 140;
use constant mc_not                  => 141;
use constant mc_or                   => 142;
use constant mc_ori                  => 143;
use constant mc_pack                 => 144;
use constant mc_pea                  => 145;
use constant mc_pb                   => 146;
use constant mc_pdb                  => 147;
use constant mc_pflush               => 148;
use constant mc_pflushr              => 149;
use constant mc_ploadr               => 150;
use constant mc_ploadw               => 151;
use constant mc_pmove                => 152;
use constant mc_prestore             => 153;
use constant mc_psave                => 154;
use constant mc_ps                   => 155;
use constant mc_ptestr               => 156;
use constant mc_ptestw               => 157;
use constant mc_ptrap                => 158;
use constant mc_pulse                => 159;
use constant mc_pvalid               => 160;
use constant mc_rol                  => 161;
use constant mc_ror                  => 162;
use constant mc_roxl                 => 163;
use constant mc_roxr                 => 164;
use constant mc_reset                => 165;
use constant mc_rtd                  => 166;
use constant mc_rte                  => 167;
use constant mc_rtm                  => 168;
use constant mc_rtr                  => 169;
use constant mc_rts                  => 170;
use constant mc_sbcd                 => 171;
use constant mc_s                    => 172;
use constant mc_stop                 => 173;
use constant mc_sub                  => 174;
use constant mc_suba                 => 175;
use constant mc_subi                 => 176;
use constant mc_subq                 => 177;
use constant mc_subx                 => 178;
use constant mc_swap                 => 179;
use constant mc_tas                  => 180;
use constant mc_tbl                  => 181;
use constant mc_trap                 => 182;
use constant mc_trapv                => 183;
use constant mc_tst                  => 184;
use constant mc_unlk                 => 185;
use constant mc_unpk                 => 186;
use constant mc_wddata               => 187;
use constant mc_wdebug               => 188;
use constant mc_atrap                => 189;
use constant mc_last                 => 190;
use constant mc8_null                => 0;
use constant mc8_aba                 => 1;
use constant mc8_ab                  => 2;
use constant mc8_adc                 => 3;
use constant mc8_add                 => 4;
use constant mc8_addd                => 5;
use constant mc8_ais                 => 6;
use constant mc8_aix                 => 7;
use constant mc8_and                 => 8;
use constant mc8_andcc               => 9;
use constant mc8_asr                 => 10;
use constant mc8_bcc                 => 11;
use constant mc8_bclr                => 12;
use constant mc8_bcs                 => 13;
use constant mc8_beq                 => 14;
use constant mc8_bge                 => 15;
use constant mc8_bgt                 => 16;
use constant mc8_bhcc                => 17;
use constant mc8_bhcs                => 18;
use constant mc8_bhi                 => 19;
use constant mc8_bhs                 => 20;
use constant mc8_bih                 => 21;
use constant mc8_bil                 => 22;
use constant mc8_bit                 => 23;
use constant mc8_ble                 => 24;
use constant mc8_blo                 => 25;
use constant mc8_bls                 => 26;
use constant mc8_blt                 => 27;
use constant mc8_bmc                 => 28;
use constant mc8_bmi                 => 29;
use constant mc8_bms                 => 30;
use constant mc8_bne                 => 31;
use constant mc8_bpl                 => 32;
use constant mc8_bra                 => 33;
use constant mc8_brclr               => 34;
use constant mc8_brn                 => 35;
use constant mc8_brset               => 36;
use constant mc8_bset                => 37;
use constant mc8_bsr                 => 38;
use constant mc8_bvc                 => 39;
use constant mc8_bvs                 => 40;
use constant mc8_cba                 => 41;
use constant mc8_cbeq                => 42;
use constant mc8_clc                 => 43;
use constant mc8_cli                 => 44;
use constant mc8_clr                 => 45;
use constant mc8_clv                 => 46;
use constant mc8_cmp                 => 47;
use constant mc8_com                 => 48;
use constant mc8_cp                  => 49;
use constant mc8_cpd                 => 50;
use constant mc8_cphx                => 51;
use constant mc8_cpx                 => 52;
use constant mc8_cwai                => 53;
use constant mc8_daa                 => 54;
use constant mc8_dbnz                => 55;
use constant mc8_de                  => 56;
use constant mc8_dec                 => 57;
use constant mc8_des                 => 58;
use constant mc8_div                 => 59;
use constant mc8_eor                 => 60;
use constant mc8_exg                 => 61;
use constant mc8_fdiv                => 62;
use constant mc8_idiv                => 63;
use constant mc8_in                  => 64;
use constant mc8_inc                 => 65;
use constant mc8_ins                 => 66;
use constant mc8_jmp                 => 67;
use constant mc8_jsr                 => 68;
use constant mc8_ld                  => 69;
use constant mc8_lda                 => 70;
use constant mc8_ldd                 => 71;
use constant mc8_ldhx                => 72;
use constant mc8_lds                 => 73;
use constant mc8_ldx                 => 74;
use constant mc8_lea                 => 75;
use constant mc8_lsl                 => 76;
use constant mc8_lsld                => 77;
use constant mc8_lsr                 => 78;
use constant mc8_lsrd                => 79;
use constant mc8_mov                 => 80;
use constant mc8_mul                 => 81;
use constant mc8_neg                 => 82;
use constant mc8_nop                 => 83;
use constant mc8_nsa                 => 84;
use constant mc8_ora                 => 85;
use constant mc8_orcc                => 86;
use constant mc8_psh                 => 87;
use constant mc8_psha                => 88;
use constant mc8_pshb                => 89;
use constant mc8_pshh                => 90;
use constant mc8_pshx                => 91;
use constant mc8_pul                 => 92;
use constant mc8_pula                => 93;
use constant mc8_pulb                => 94;
use constant mc8_pulh                => 95;
use constant mc8_pulx                => 96;
use constant mc8_rol                 => 97;
use constant mc8_ror                 => 98;
use constant mc8_rsp                 => 99;
use constant mc8_rti                 => 100;
use constant mc8_rts                 => 101;
use constant mc8_sba                 => 102;
use constant mc8_sbc                 => 103;
use constant mc8_sec                 => 104;
use constant mc8_sei                 => 105;
use constant mc8_sev                 => 106;
use constant mc8_sex                 => 107;
use constant mc8_slp                 => 108;
use constant mc8_st                  => 109;
use constant mc8_sta                 => 110;
use constant mc8_std                 => 111;
use constant mc8_sthx                => 112;
use constant mc8_stop                => 113;
use constant mc8_sts                 => 114;
use constant mc8_stx                 => 115;
use constant mc8_sub                 => 116;
use constant mc8_subd                => 117;
use constant mc8_swi                 => 118;
use constant mc8_sync                => 119;
use constant mc8_tab                 => 120;
use constant mc8_tap                 => 121;
use constant mc8_tax                 => 122;
use constant mc8_tba                 => 123;
use constant mc8_test                => 124;
use constant mc8_tfr                 => 125;
use constant mc8_tpa                 => 126;
use constant mc8_ts                  => 127;
use constant mc8_tst                 => 128;
use constant mc8_tsx                 => 129;
use constant mc8_txa                 => 130;
use constant mc8_txs                 => 131;
use constant mc8_tys                 => 132;
use constant mc8_wai                 => 133;
use constant mc8_wait                => 134;
use constant mc8_xgd                 => 135;
use constant mc8_1                   => 136;
use constant mc8_2                   => 137;
use constant mc8_os9                 => 138;
use constant mc8_aim                 => 139;
use constant mc8_oim                 => 140;
use constant mc8_eim                 => 141;
use constant mc8_tim                 => 142;
use constant mc8_bgnd                => 143;
use constant mc8_call                => 144;
use constant mc8_rtc                 => 145;
use constant mc8_last                => 146;
use constant j_nop                   => 0;
use constant j_aconst_null           => 1;
use constant j_iconst_m1             => 2;
use constant j_iconst_0              => 3;
use constant j_iconst_1              => 4;
use constant j_iconst_2              => 5;
use constant j_iconst_3              => 6;
use constant j_iconst_4              => 7;
use constant j_iconst_5              => 8;
use constant j_lconst_0              => 9;
use constant j_lconst_1              => 10;
use constant j_fconst_0              => 11;
use constant j_fconst_1              => 12;
use constant j_fconst_2              => 13;
use constant j_dconst_0              => 14;
use constant j_dconst_1              => 15;
use constant j_bipush                => 16;
use constant j_sipush                => 17;
use constant j_ldc                   => 18;
use constant j_ldcw                  => 19;
use constant j_ldc2w                 => 20;
use constant j_iload                 => 21;
use constant j_lload                 => 22;
use constant j_fload                 => 23;
use constant j_dload                 => 24;
use constant j_aload                 => 25;
use constant j_iload_0               => 26;
use constant j_iload_1               => 27;
use constant j_iload_2               => 28;
use constant j_iload_3               => 29;
use constant j_lload_0               => 30;
use constant j_lload_1               => 31;
use constant j_lload_2               => 32;
use constant j_lload_3               => 33;
use constant j_fload_0               => 34;
use constant j_fload_1               => 35;
use constant j_fload_2               => 36;
use constant j_fload_3               => 37;
use constant j_dload_0               => 38;
use constant j_dload_1               => 39;
use constant j_dload_2               => 40;
use constant j_dload_3               => 41;
use constant j_aload_0               => 42;
use constant j_aload_1               => 43;
use constant j_aload_2               => 44;
use constant j_aload_3               => 45;
use constant j_iaload                => 46;
use constant j_laload                => 47;
use constant j_faload                => 48;
use constant j_daload                => 49;
use constant j_aaload                => 50;
use constant j_baload                => 51;
use constant j_caload                => 52;
use constant j_saload                => 53;
use constant j_istore                => 54;
use constant j_lstore                => 55;
use constant j_fstore                => 56;
use constant j_dstore                => 57;
use constant j_astore                => 58;
use constant j_istore_0              => 59;
use constant j_istore_1              => 60;
use constant j_istore_2              => 61;
use constant j_istore_3              => 62;
use constant j_lstore_0              => 63;
use constant j_lstore_1              => 64;
use constant j_lstore_2              => 65;
use constant j_lstore_3              => 66;
use constant j_fstore_0              => 67;
use constant j_fstore_1              => 68;
use constant j_fstore_2              => 69;
use constant j_fstore_3              => 70;
use constant j_dstore_0              => 71;
use constant j_dstore_1              => 72;
use constant j_dstore_2              => 73;
use constant j_dstore_3              => 74;
use constant j_astore_0              => 75;
use constant j_astore_1              => 76;
use constant j_astore_2              => 77;
use constant j_astore_3              => 78;
use constant j_iastore               => 79;
use constant j_lastore               => 80;
use constant j_fastore               => 81;
use constant j_dastore               => 82;
use constant j_aastore               => 83;
use constant j_bastore               => 84;
use constant j_castore               => 85;
use constant j_sastore               => 86;
use constant j_pop                   => 87;
use constant j_pop2                  => 88;
use constant j_dup                   => 89;
use constant j_dup_x1                => 90;
use constant j_dup_x2                => 91;
use constant j_dup2                  => 92;
use constant j_dup2_x1               => 93;
use constant j_dup2_x2               => 94;
use constant j_swap                  => 95;
use constant j_iadd                  => 96;
use constant j_ladd                  => 97;
use constant j_fadd                  => 98;
use constant j_dadd                  => 99;
use constant j_isub                  => 100;
use constant j_lsub                  => 101;
use constant j_fsub                  => 102;
use constant j_dsub                  => 103;
use constant j_imul                  => 104;
use constant j_lmul                  => 105;
use constant j_fmul                  => 106;
use constant j_dmul                  => 107;
use constant j_idiv                  => 108;
use constant j_ldiv                  => 109;
use constant j_fdiv                  => 110;
use constant j_ddiv                  => 111;
use constant j_irem                  => 112;
use constant j_lrem                  => 113;
use constant j_frem                  => 114;
use constant j_drem                  => 115;
use constant j_ineg                  => 116;
use constant j_lneg                  => 117;
use constant j_fneg                  => 118;
use constant j_dneg                  => 119;
use constant j_ishl                  => 120;
use constant j_lshl                  => 121;
use constant j_ishr                  => 122;
use constant j_lshr                  => 123;
use constant j_iushr                 => 124;
use constant j_lushr                 => 125;
use constant j_iand                  => 126;
use constant j_land                  => 127;
use constant j_ior                   => 128;
use constant j_lor                   => 129;
use constant j_ixor                  => 130;
use constant j_lxor                  => 131;
use constant j_iinc                  => 132;
use constant j_i2l                   => 133;
use constant j_i2f                   => 134;
use constant j_i2d                   => 135;
use constant j_l2i                   => 136;
use constant j_l2f                   => 137;
use constant j_l2d                   => 138;
use constant j_f2i                   => 139;
use constant j_f2l                   => 140;
use constant j_f2d                   => 141;
use constant j_d2i                   => 142;
use constant j_d2l                   => 143;
use constant j_d2f                   => 144;
use constant j_i2b                   => 145;
use constant j_i2c                   => 146;
use constant j_i2s                   => 147;
use constant j_lcmp                  => 148;
use constant j_fcmpl                 => 149;
use constant j_fcmpg                 => 150;
use constant j_dcmpl                 => 151;
use constant j_dcmpg                 => 152;
use constant j_ifeq                  => 153;
use constant j_ifne                  => 154;
use constant j_iflt                  => 155;
use constant j_ifge                  => 156;
use constant j_ifgt                  => 157;
use constant j_ifle                  => 158;
use constant j_if_icmpeq             => 159;
use constant j_if_icmpne             => 160;
use constant j_if_icmplt             => 161;
use constant j_if_icmpge             => 162;
use constant j_if_icmpgt             => 163;
use constant j_if_icmple             => 164;
use constant j_if_acmpeq             => 165;
use constant j_if_acmpne             => 166;
use constant j_goto                  => 167;
use constant j_jsr                   => 168;
use constant j_ret                   => 169;
use constant j_tableswitch           => 170;
use constant j_lookupswitch          => 171;
use constant j_ireturn               => 172;
use constant j_lreturn               => 173;
use constant j_freturn               => 174;
use constant j_dreturn               => 175;
use constant j_areturn               => 176;
use constant j_return                => 177;
use constant j_getstatic             => 178;
use constant j_putstatic             => 179;
use constant j_getfield              => 180;
use constant j_putfield              => 181;
use constant j_invokevirtual         => 182;
use constant j_invokespecial         => 183;
use constant j_invokestatic          => 184;
use constant j_invokeinterface       => 185;
use constant j_invokedynamic         => 186;
use constant j_new                   => 187;
use constant j_newarray              => 188;
use constant j_anewarray             => 189;
use constant j_arraylength           => 190;
use constant j_athrow                => 191;
use constant j_checkcast             => 192;
use constant j_instanceof            => 193;
use constant j_monitorenter          => 194;
use constant j_monitorexit           => 195;
use constant j_wide                  => 196;
use constant j_multianewarray        => 197;
use constant j_ifnull                => 198;
use constant j_ifnonnull             => 199;
use constant j_goto_w                => 200;
use constant j_jsr_w                 => 201;
use constant j_breakpoint            => 202;
use constant j_lastnorm              => 203;
use constant j_a_invokesuper         => 203;
use constant j_a_invokevirtualobject => 204;
use constant j_a_invokeignored       => 205;
use constant j_a_software            => 206;
use constant j_a_hardware            => 207;
use constant j_last                  => 208;
use constant ARM_null                => 0;
use constant ARM_ret                 => 1;
use constant ARM_nop                 => 2;
use constant ARM_b                   => 3;
use constant ARM_bl                  => 4;
use constant ARM_asr                 => 5;
use constant ARM_lsl                 => 6;
use constant ARM_lsr                 => 7;
use constant ARM_ror                 => 8;
use constant ARM_neg                 => 9;
use constant ARM_and                 => 10;
use constant ARM_eor                 => 11;
use constant ARM_sub                 => 12;
use constant ARM_rsb                 => 13;
use constant ARM_add                 => 14;
use constant ARM_adc                 => 15;
use constant ARM_sbc                 => 16;
use constant ARM_rsc                 => 17;
use constant ARM_tst                 => 18;
use constant ARM_teq                 => 19;
use constant ARM_cmp                 => 20;
use constant ARM_cmn                 => 21;
use constant ARM_orr                 => 22;
use constant ARM_mov                 => 23;
use constant ARM_bic                 => 24;
use constant ARM_mvn                 => 25;
use constant ARM_mrs                 => 26;
use constant ARM_msr                 => 27;
use constant ARM_mul                 => 28;
use constant ARM_mla                 => 29;
use constant ARM_ldr                 => 30;
use constant ARM_ldrpc               => 31;
use constant ARM_str                 => 32;
use constant ARM_ldm                 => 33;
use constant ARM_stm                 => 34;
use constant ARM_swp                 => 35;
use constant ARM_svc                 => 36;
use constant ARM_smull               => 37;
use constant ARM_smlal               => 38;
use constant ARM_umull               => 39;
use constant ARM_umlal               => 40;
use constant ARM_bx                  => 41;
use constant ARM_pop                 => 42;
use constant ARM_push                => 43;
use constant ARM_adr                 => 44;
use constant ARM_bkpt                => 45;
use constant ARM_blx1                => 46;
use constant ARM_blx2                => 47;
use constant ARM_clz                 => 48;
use constant ARM_ldrd                => 49;
use constant ARM_pld                 => 50;
use constant ARM_qadd                => 51;
use constant ARM_qdadd               => 52;
use constant ARM_qdsub               => 53;
use constant ARM_qsub                => 54;
use constant ARM_smlabb              => 55;
use constant ARM_smlatb              => 56;
use constant ARM_smlabt              => 57;
use constant ARM_smlatt              => 58;
use constant ARM_smlalbb             => 59;
use constant ARM_smlaltb             => 60;
use constant ARM_smlalbt             => 61;
use constant ARM_smlaltt             => 62;
use constant ARM_smlawb              => 63;
use constant ARM_smulwb              => 64;
use constant ARM_smlawt              => 65;
use constant ARM_smulwt              => 66;
use constant ARM_smulbb              => 67;
use constant ARM_smultb              => 68;
use constant ARM_smulbt              => 69;
use constant ARM_smultt              => 70;
use constant ARM_strd                => 71;
use constant xScale_mia              => 72;
use constant xScale_miaph            => 73;
use constant xScale_miabb            => 74;
use constant xScale_miabt            => 75;
use constant xScale_miatb            => 76;
use constant xScale_miatt            => 77;
use constant xScale_mar              => 78;
use constant xScale_mra              => 79;
use constant ARM_movl                => 80;
use constant ARM_adrl                => 81;
use constant ARM_swbkpt              => 82;
use constant ARM_cdp                 => 83;
use constant ARM_cdp2                => 84;
use constant ARM_ldc                 => 85;
use constant ARM_ldc2                => 86;
use constant ARM_stc                 => 87;
use constant ARM_stc2                => 88;
use constant ARM_mrc                 => 89;
use constant ARM_mrc2                => 90;
use constant ARM_mcr                 => 91;
use constant ARM_mcr2                => 92;
use constant ARM_mcrr                => 93;
use constant ARM_mrrc                => 94;
use constant ARM_fabsd               => 95;
use constant ARM_fabss               => 96;
use constant ARM_faddd               => 97;
use constant ARM_fadds               => 98;
use constant ARM_fcmpd               => 99;
use constant ARM_fcmps               => 100;
use constant ARM_fcmped              => 101;
use constant ARM_fcmpes              => 102;
use constant ARM_fcmpezd             => 103;
use constant ARM_fcmpezs             => 104;
use constant ARM_fcmpzd              => 105;
use constant ARM_fcmpzs              => 106;
use constant ARM_fcpyd               => 107;
use constant ARM_fcpys               => 108;
use constant ARM_fcvtsd              => 109;
use constant ARM_fcvtds              => 110;
use constant ARM_fdivd               => 111;
use constant ARM_fdivs               => 112;
use constant ARM_fldd                => 113;
use constant ARM_flds                => 114;
use constant ARM_fldmd               => 115;
use constant ARM_fldms               => 116;
use constant ARM_fldmx               => 117;
use constant ARM_fmacd               => 118;
use constant ARM_fmacs               => 119;
use constant ARM_fmscd               => 120;
use constant ARM_fmscs               => 121;
use constant ARM_fmstat              => 122;
use constant ARM_fmuld               => 123;
use constant ARM_fmuls               => 124;
use constant ARM_fnegd               => 125;
use constant ARM_fnegs               => 126;
use constant ARM_fnmacd              => 127;
use constant ARM_fnmacs              => 128;
use constant ARM_fnmscd              => 129;
use constant ARM_fnmscs              => 130;
use constant ARM_fnmuld              => 131;
use constant ARM_fnmuls              => 132;
use constant ARM_fsitod              => 133;
use constant ARM_fsitos              => 134;
use constant ARM_fsqrtd              => 135;
use constant ARM_fsqrts              => 136;
use constant ARM_fstd                => 137;
use constant ARM_fsts                => 138;
use constant ARM_fstmd               => 139;
use constant ARM_fstms               => 140;
use constant ARM_fstmx               => 141;
use constant ARM_fsubd               => 142;
use constant ARM_fsubs               => 143;
use constant ARM_ftosid              => 144;
use constant ARM_ftosis              => 145;
use constant ARM_ftosizd             => 146;
use constant ARM_ftosizs             => 147;
use constant ARM_ftouid              => 148;
use constant ARM_ftouis              => 149;
use constant ARM_ftouizd             => 150;
use constant ARM_ftouizs             => 151;
use constant ARM_fuitod              => 152;
use constant ARM_fuitos              => 153;
use constant ARM_fmdhr               => 154;
use constant ARM_fmrdh               => 155;
use constant ARM_fmdlr               => 156;
use constant ARM_fmrdl               => 157;
use constant ARM_fmxr                => 158;
use constant ARM_fmrx                => 159;
use constant ARM_fmsr                => 160;
use constant ARM_fmrs                => 161;
use constant ARM_fmdrr               => 162;
use constant ARM_fmrrd               => 163;
use constant ARM_fmsrr               => 164;
use constant ARM_fmrrs               => 165;
use constant ARM_bxj                 => 166;
use constant ARM_mcrr2               => 167;
use constant ARM_mrrc2               => 168;
use constant ARM_cps                 => 169;
use constant ARM_cpsid               => 170;
use constant ARM_cpsie               => 171;
use constant ARM_ldrex               => 172;
use constant ARM_pkhbt               => 173;
use constant ARM_pkhtb               => 174;
use constant ARM_qadd16              => 175;
use constant ARM_qadd8               => 176;
use constant ARM_qaddsubx            => 177;
use constant ARM_qsub16              => 178;
use constant ARM_qsub8               => 179;
use constant ARM_qsubaddx            => 180;
use constant ARM_rev                 => 181;
use constant ARM_rev16               => 182;
use constant ARM_revsh               => 183;
use constant ARM_rfe                 => 184;
use constant ARM_sadd16              => 185;
use constant ARM_sadd8               => 186;
use constant ARM_saddsubx            => 187;
use constant ARM_sel                 => 188;
use constant ARM_setend              => 189;
use constant ARM_shadd16             => 190;
use constant ARM_shadd8              => 191;
use constant ARM_shaddsubx           => 192;
use constant ARM_shsub16             => 193;
use constant ARM_shsub8              => 194;
use constant ARM_shsubaddx           => 195;
use constant ARM_smlad               => 196;
use constant ARM_smladx              => 197;
use constant ARM_smuad               => 198;
use constant ARM_smuadx              => 199;
use constant ARM_smlald              => 200;
use constant ARM_smlaldx             => 201;
use constant ARM_smlsd               => 202;
use constant ARM_smlsdx              => 203;
use constant ARM_smusd               => 204;
use constant ARM_smusdx              => 205;
use constant ARM_smlsld              => 206;
use constant ARM_smlsldx             => 207;
use constant ARM_smmla               => 208;
use constant ARM_smmlar              => 209;
use constant ARM_smmul               => 210;
use constant ARM_smmulr              => 211;
use constant ARM_smmls               => 212;
use constant ARM_smmlsr              => 213;
use constant ARM_srs                 => 214;
use constant ARM_ssat                => 215;
use constant ARM_ssat16              => 216;
use constant ARM_ssub16              => 217;
use constant ARM_ssub8               => 218;
use constant ARM_ssubaddx            => 219;
use constant ARM_strex               => 220;
use constant ARM_sxtab               => 221;
use constant ARM_sxtb                => 222;
use constant ARM_sxtab16             => 223;
use constant ARM_sxtb16              => 224;
use constant ARM_sxtah               => 225;
use constant ARM_sxth                => 226;
use constant ARM_uadd16              => 227;
use constant ARM_uadd8               => 228;
use constant ARM_uaddsubx            => 229;
use constant ARM_uhadd16             => 230;
use constant ARM_uhadd8              => 231;
use constant ARM_uhaddsubx           => 232;
use constant ARM_uhsub16             => 233;
use constant ARM_uhsub8              => 234;
use constant ARM_uhsubaddx           => 235;
use constant ARM_umaal               => 236;
use constant ARM_uqadd16             => 237;
use constant ARM_uqadd8              => 238;
use constant ARM_uqaddsubx           => 239;
use constant ARM_uqsub16             => 240;
use constant ARM_uqsub8              => 241;
use constant ARM_uqsubaddx           => 242;
use constant ARM_usada8              => 243;
use constant ARM_usad8               => 244;
use constant ARM_usat                => 245;
use constant ARM_usat16              => 246;
use constant ARM_usub16              => 247;
use constant ARM_usub8               => 248;
use constant ARM_usubaddx            => 249;
use constant ARM_uxtab               => 250;
use constant ARM_uxtb                => 251;
use constant ARM_uxtab16             => 252;
use constant ARM_uxtb16              => 253;
use constant ARM_uxtah               => 254;
use constant ARM_uxth                => 255;
use constant ARM_clrex               => 256;
use constant ARM_ldrexb              => 257;
use constant ARM_ldrexd              => 258;
use constant ARM_ldrexh              => 259;
use constant ARM_strexb              => 260;
use constant ARM_strexd              => 261;
use constant ARM_strexh              => 262;
use constant ARM_yield               => 263;
use constant ARM_sev                 => 264;
use constant ARM_wfe                 => 265;
use constant ARM_wfi                 => 266;
use constant ARM_smc                 => 267;
use constant ARM_orn                 => 268;
use constant ARM_movt                => 269;
use constant ARM_sbfx                => 270;
use constant ARM_ubfx                => 271;
use constant ARM_bfi                 => 272;
use constant ARM_bfc                 => 273;
use constant ARM_tbb                 => 274;
use constant ARM_tbh                 => 275;
use constant ARM_pli                 => 276;
use constant ARM_rbit                => 277;
use constant ARM_it                  => 278;
use constant ARM_mls                 => 279;
use constant ARM_sdiv                => 280;
use constant ARM_udiv                => 281;
use constant ARM_cbz                 => 282;
use constant ARM_cbnz                => 283;
use constant ARM_dsb                 => 284;
use constant ARM_dmb                 => 285;
use constant ARM_isb                 => 286;
use constant ARM_dbg                 => 287;
use constant ARM_und                 => 288;
use constant ARM_rrx                 => 289;
use constant ARM_enterx              => 290;
use constant ARM_leavex              => 291;
use constant ARM_chka                => 292;
use constant ARM_hb                  => 293;
use constant ARM_hbl                 => 294;
use constant ARM_hblp                => 295;
use constant ARM_hbp                 => 296;
use constant ARM_vaba                => 297;
use constant ARM_vabal               => 298;
use constant ARM_vabd                => 299;
use constant ARM_vabdl               => 300;
use constant ARM_vabs                => 301;
use constant ARM_vacge               => 302;
use constant ARM_vacgt               => 303;
use constant ARM_vacle               => 304;
use constant ARM_vaclt               => 305;
use constant ARM_vadd                => 306;
use constant ARM_vaddhn              => 307;
use constant ARM_vaddl               => 308;
use constant ARM_vaddw               => 309;
use constant ARM_vand                => 310;
use constant ARM_vbic                => 311;
use constant ARM_vbif                => 312;
use constant ARM_vbit                => 313;
use constant ARM_vbsl                => 314;
use constant ARM_vceq                => 315;
use constant ARM_vcge                => 316;
use constant ARM_vcgt                => 317;
use constant ARM_vcle                => 318;
use constant ARM_vcls                => 319;
use constant ARM_vclt                => 320;
use constant ARM_vclz                => 321;
use constant ARM_vcmp                => 322;
use constant ARM_vcmpe               => 323;
use constant ARM_vcnt                => 324;
use constant ARM_vcvt                => 325;
use constant ARM_vcvtr               => 326;
use constant ARM_vcvtb               => 327;
use constant ARM_vcvtt               => 328;
use constant ARM_vdiv                => 329;
use constant ARM_vdup                => 330;
use constant ARM_veor                => 331;
use constant ARM_vext                => 332;
use constant ARM_vfma                => 333;
use constant ARM_vfms                => 334;
use constant ARM_vfnma               => 335;
use constant ARM_vfnms               => 336;
use constant ARM_vhadd               => 337;
use constant ARM_vhsub               => 338;
use constant ARM_vld1                => 339;
use constant ARM_vld2                => 340;
use constant ARM_vld3                => 341;
use constant ARM_vld4                => 342;
use constant ARM_vldm                => 343;
use constant ARM_vldr                => 344;
use constant ARM_vmax                => 345;
use constant ARM_vmin                => 346;
use constant ARM_vmla                => 347;
use constant ARM_vmlal               => 348;
use constant ARM_vmls                => 349;
use constant ARM_vmlsl               => 350;
use constant ARM_vmov                => 351;
use constant ARM_vmovl               => 352;
use constant ARM_vmovn               => 353;
use constant ARM_vmrs                => 354;
use constant ARM_vmsr                => 355;
use constant ARM_vmul                => 356;
use constant ARM_vmull               => 357;
use constant ARM_vmvn                => 358;
use constant ARM_vneg                => 359;
use constant ARM_vnmla               => 360;
use constant ARM_vnmls               => 361;
use constant ARM_vnmul               => 362;
use constant ARM_vorn                => 363;
use constant ARM_vorr                => 364;
use constant ARM_vpadal              => 365;
use constant ARM_vpadd               => 366;
use constant ARM_vpaddl              => 367;
use constant ARM_vpmax               => 368;
use constant ARM_vpmin               => 369;
use constant ARM_vpop                => 370;
use constant ARM_vpush               => 371;
use constant ARM_vqabs               => 372;
use constant ARM_vqadd               => 373;
use constant ARM_vqdmlal             => 374;
use constant ARM_vqdmlsl             => 375;
use constant ARM_vqdmulh             => 376;
use constant ARM_vqdmull             => 377;
use constant ARM_vqmovn              => 378;
use constant ARM_vqmovun             => 379;
use constant ARM_vqneg               => 380;
use constant ARM_vqrdmulh            => 381;
use constant ARM_vqrshl              => 382;
use constant ARM_vqrshrn             => 383;
use constant ARM_vqrshrun            => 384;
use constant ARM_vqshl               => 385;
use constant ARM_vqshlu              => 386;
use constant ARM_vqshrn              => 387;
use constant ARM_vqshrun             => 388;
use constant ARM_vqsub               => 389;
use constant ARM_vraddhn             => 390;
use constant ARM_vrecpe              => 391;
use constant ARM_vrecps              => 392;
use constant ARM_vrev16              => 393;
use constant ARM_vrev32              => 394;
use constant ARM_vrev64              => 395;
use constant ARM_vrhadd              => 396;
use constant ARM_vrshl               => 397;
use constant ARM_vrshr               => 398;
use constant ARM_vrshrn              => 399;
use constant ARM_vrsqrte             => 400;
use constant ARM_vrsqrts             => 401;
use constant ARM_vrsra               => 402;
use constant ARM_vrsubhn             => 403;
use constant ARM_vshl                => 404;
use constant ARM_vshll               => 405;
use constant ARM_vshr                => 406;
use constant ARM_vshrn               => 407;
use constant ARM_vsli                => 408;
use constant ARM_vsqrt               => 409;
use constant ARM_vsra                => 410;
use constant ARM_vsri                => 411;
use constant ARM_vst1                => 412;
use constant ARM_vst2                => 413;
use constant ARM_vst3                => 414;
use constant ARM_vst4                => 415;
use constant ARM_vstm                => 416;
use constant ARM_vstr                => 417;
use constant ARM_vsub                => 418;
use constant ARM_vsubhn              => 419;
use constant ARM_vsubl               => 420;
use constant ARM_vsubw               => 421;
use constant ARM_vswp                => 422;
use constant ARM_vtbl                => 423;
use constant ARM_vtbx                => 424;
use constant ARM_vtrn                => 425;
use constant ARM_vtst                => 426;
use constant ARM_vuzp                => 427;
use constant ARM_vzip                => 428;
use constant ARM_last                => 429;
use constant TMS6_null               => 0;
use constant TMS6_abs                => 1;
use constant TMS6_add                => 2;
use constant TMS6_addu               => 3;
use constant TMS6_addab              => 4;
use constant TMS6_addah              => 5;
use constant TMS6_addaw              => 6;
use constant TMS6_addk               => 7;
use constant TMS6_add2               => 8;
use constant TMS6_and                => 9;
use constant TMS6_b                  => 10;
use constant TMS6_clr                => 11;
use constant TMS6_cmpeq              => 12;
use constant TMS6_cmpgt              => 13;
use constant TMS6_cmpgtu             => 14;
use constant TMS6_cmplt              => 15;
use constant TMS6_cmpltu             => 16;
use constant TMS6_ext                => 17;
use constant TMS6_extu               => 18;
use constant TMS6_idle               => 19;
use constant TMS6_ldb                => 20;
use constant TMS6_ldbu               => 21;
use constant TMS6_ldh                => 22;
use constant TMS6_ldhu               => 23;
use constant TMS6_ldw                => 24;
use constant TMS6_lmbd               => 25;
use constant TMS6_mpy                => 26;
use constant TMS6_mpyu               => 27;
use constant TMS6_mpyus              => 28;
use constant TMS6_mpysu              => 29;
use constant TMS6_mpyh               => 30;
use constant TMS6_mpyhu              => 31;
use constant TMS6_mpyhus             => 32;
use constant TMS6_mpyhsu             => 33;
use constant TMS6_mpyhl              => 34;
use constant TMS6_mpyhlu             => 35;
use constant TMS6_mpyhuls            => 36;
use constant TMS6_mpyhslu            => 37;
use constant TMS6_mpylh              => 38;
use constant TMS6_mpylhu             => 39;
use constant TMS6_mpyluhs            => 40;
use constant TMS6_mpylshu            => 41;
use constant TMS6_mv                 => 42;
use constant TMS6_mvc                => 43;
use constant TMS6_mvk                => 44;
use constant TMS6_mvkh               => 45;
use constant TMS6_mvklh              => 46;
use constant TMS6_neg                => 47;
use constant TMS6_nop                => 48;
use constant TMS6_norm               => 49;
use constant TMS6_not                => 50;
use constant TMS6_or                 => 51;
use constant TMS6_sadd               => 52;
use constant TMS6_sat                => 53;
use constant TMS6_set                => 54;
use constant TMS6_shl                => 55;
use constant TMS6_shr                => 56;
use constant TMS6_shru               => 57;
use constant TMS6_smpy               => 58;
use constant TMS6_smpyhl             => 59;
use constant TMS6_smpylh             => 60;
use constant TMS6_smpyh              => 61;
use constant TMS6_sshl               => 62;
use constant TMS6_ssub               => 63;
use constant TMS6_stb                => 64;
use constant TMS6_stbu               => 65;
use constant TMS6_sth                => 66;
use constant TMS6_sthu               => 67;
use constant TMS6_stw                => 68;
use constant TMS6_sub                => 69;
use constant TMS6_subu               => 70;
use constant TMS6_subab              => 71;
use constant TMS6_subah              => 72;
use constant TMS6_subaw              => 73;
use constant TMS6_subc               => 74;
use constant TMS6_sub2               => 75;
use constant TMS6_xor                => 76;
use constant TMS6_zero               => 77;
use constant TMS6_abs2               => 78;
use constant TMS6_absdp              => 79;
use constant TMS6_abssp              => 80;
use constant TMS6_add4               => 81;
use constant TMS6_addad              => 82;
use constant TMS6_adddp              => 83;
use constant TMS6_addkpc             => 84;
use constant TMS6_addsp              => 85;
use constant TMS6_addsub             => 86;
use constant TMS6_addsub2            => 87;
use constant TMS6_andn               => 88;
use constant TMS6_avg2               => 89;
use constant TMS6_avgu4              => 90;
use constant TMS6_bdec               => 91;
use constant TMS6_bitc4              => 92;
use constant TMS6_bitr               => 93;
use constant TMS6_bnop               => 94;
use constant TMS6_bpos               => 95;
use constant TMS6_callp              => 96;
use constant TMS6_cmpeq2             => 97;
use constant TMS6_cmpeq4             => 98;
use constant TMS6_cmpeqdp            => 99;
use constant TMS6_cmpeqsp            => 100;
use constant TMS6_cmpgt2             => 101;
use constant TMS6_cmpgtdp            => 102;
use constant TMS6_cmpgtsp            => 103;
use constant TMS6_cmpgtu4            => 104;
use constant TMS6_cmplt2             => 105;
use constant TMS6_cmpltdp            => 106;
use constant TMS6_cmpltsp            => 107;
use constant TMS6_cmpltu4            => 108;
use constant TMS6_cmpy               => 109;
use constant TMS6_cmpyr              => 110;
use constant TMS6_cmpyr1             => 111;
use constant TMS6_ddotp4             => 112;
use constant TMS6_ddotph2            => 113;
use constant TMS6_ddotph2r           => 114;
use constant TMS6_ddotpl2            => 115;
use constant TMS6_ddotpl2r           => 116;
use constant TMS6_deal               => 117;
use constant TMS6_dint               => 118;
use constant TMS6_dmv                => 119;
use constant TMS6_dotp2              => 120;
use constant TMS6_dotpn2             => 121;
use constant TMS6_dotpnrsu2          => 122;
use constant TMS6_dotpnrus2          => 123;
use constant TMS6_dotprsu2           => 124;
use constant TMS6_dotprus2           => 125;
use constant TMS6_dotpsu4            => 126;
use constant TMS6_dotpu4             => 127;
use constant TMS6_dotpus4            => 128;
use constant TMS6_dpack2             => 129;
use constant TMS6_dpackx2            => 130;
use constant TMS6_dpint              => 131;
use constant TMS6_dpsp               => 132;
use constant TMS6_dptrunc            => 133;
use constant TMS6_gmpy               => 134;
use constant TMS6_gmpy4              => 135;
use constant TMS6_intdp              => 136;
use constant TMS6_intdpu             => 137;
use constant TMS6_intsp              => 138;
use constant TMS6_intspu             => 139;
use constant TMS6_lddw               => 140;
use constant TMS6_ldndw              => 141;
use constant TMS6_ldnw               => 142;
use constant TMS6_max2               => 143;
use constant TMS6_maxu4              => 144;
use constant TMS6_min2               => 145;
use constant TMS6_minu4              => 146;
use constant TMS6_mpy2               => 147;
use constant TMS6_mpy2ir             => 148;
use constant TMS6_mpy32              => 149;
use constant TMS6_mpy32su            => 150;
use constant TMS6_mpy32u             => 151;
use constant TMS6_mpy32us            => 152;
use constant TMS6_mpydp              => 153;
use constant TMS6_mpyhi              => 154;
use constant TMS6_mpyhir             => 155;
use constant TMS6_mpyi               => 156;
use constant TMS6_mpyid              => 157;
use constant TMS6_mpyih              => 158;
use constant TMS6_mpyihr             => 159;
use constant TMS6_mpyil              => 160;
use constant TMS6_mpyilr             => 161;
use constant TMS6_mpyli              => 162;
use constant TMS6_mpylir             => 163;
use constant TMS6_mpysp              => 164;
use constant TMS6_mpysp2dp           => 165;
use constant TMS6_mpyspdp            => 166;
use constant TMS6_mpysu4             => 167;
use constant TMS6_mpyu4              => 168;
use constant TMS6_mpyus4             => 169;
use constant TMS6_mvd                => 170;
use constant TMS6_mvkl               => 171;
use constant TMS6_pack2              => 172;
use constant TMS6_packh2             => 173;
use constant TMS6_packh4             => 174;
use constant TMS6_packhl2            => 175;
use constant TMS6_packl4             => 176;
use constant TMS6_packlh2            => 177;
use constant TMS6_rcpdp              => 178;
use constant TMS6_rcpsp              => 179;
use constant TMS6_rint               => 180;
use constant TMS6_rotl               => 181;
use constant TMS6_rpack2             => 182;
use constant TMS6_rsqrdp             => 183;
use constant TMS6_rsqrsp             => 184;
use constant TMS6_sadd2              => 185;
use constant TMS6_saddsu2            => 186;
use constant TMS6_saddsub            => 187;
use constant TMS6_saddsub2           => 188;
use constant TMS6_saddu4             => 189;
use constant TMS6_saddus2            => 190;
use constant TMS6_shfl               => 191;
use constant TMS6_shfl3              => 192;
use constant TMS6_shlmb              => 193;
use constant TMS6_shr2               => 194;
use constant TMS6_shrmb              => 195;
use constant TMS6_shru2              => 196;
use constant TMS6_smpy2              => 197;
use constant TMS6_smpy32             => 198;
use constant TMS6_spack2             => 199;
use constant TMS6_spacku4            => 200;
use constant TMS6_spdp               => 201;
use constant TMS6_spint              => 202;
use constant TMS6_spkernel           => 203;
use constant TMS6_spkernelr          => 204;
use constant TMS6_sploop             => 205;
use constant TMS6_sploopd            => 206;
use constant TMS6_sploopw            => 207;
use constant TMS6_spmask             => 208;
use constant TMS6_spmaskr            => 209;
use constant TMS6_sptrunc            => 210;
use constant TMS6_sshvl              => 211;
use constant TMS6_sshvr              => 212;
use constant TMS6_ssub2              => 213;
use constant TMS6_stdw               => 214;
use constant TMS6_stndw              => 215;
use constant TMS6_stnw               => 216;
use constant TMS6_sub4               => 217;
use constant TMS6_subabs4            => 218;
use constant TMS6_subdp              => 219;
use constant TMS6_subsp              => 220;
use constant TMS6_swap2              => 221;
use constant TMS6_swap4              => 222;
use constant TMS6_swe                => 223;
use constant TMS6_swenr              => 224;
use constant TMS6_unpkhu4            => 225;
use constant TMS6_unpklu4            => 226;
use constant TMS6_xormpy             => 227;
use constant TMS6_xpnd2              => 228;
use constant TMS6_xpnd4              => 229;
use constant TMS6_last               => 230;
use constant I196_null               => 0;
use constant I196_add2               => 1;
use constant I196_add3               => 2;
use constant I196_addb2              => 3;
use constant I196_addb3              => 4;
use constant I196_addc               => 5;
use constant I196_addcb              => 6;
use constant I196_and2               => 7;
use constant I196_and3               => 8;
use constant I196_andb2              => 9;
use constant I196_andb3              => 10;
use constant I196_bmov               => 11;
use constant I196_bmovi              => 12;
use constant I196_br                 => 13;
use constant I196_clr                => 14;
use constant I196_clrb               => 15;
use constant I196_clrc               => 16;
use constant I196_clrvt              => 17;
use constant I196_cmp                => 18;
use constant I196_cmpb               => 19;
use constant I196_cmpl               => 20;
use constant I196_dec                => 21;
use constant I196_decb               => 22;
use constant I196_di                 => 23;
use constant I196_div                => 24;
use constant I196_divb               => 25;
use constant I196_divu               => 26;
use constant I196_divub              => 27;
use constant I196_djnz               => 28;
use constant I196_djnzw              => 29;
use constant I196_dpts               => 30;
use constant I196_ei                 => 31;
use constant I196_epts               => 32;
use constant I196_ext                => 33;
use constant I196_extb               => 34;
use constant I196_idlpd              => 35;
use constant I196_inc                => 36;
use constant I196_incb               => 37;
use constant I196_jbc                => 38;
use constant I196_jbs                => 39;
use constant I196_jc                 => 40;
use constant I196_je                 => 41;
use constant I196_jge                => 42;
use constant I196_jgt                => 43;
use constant I196_jh                 => 44;
use constant I196_jle                => 45;
use constant I196_jlt                => 46;
use constant I196_jnc                => 47;
use constant I196_jne                => 48;
use constant I196_jnh                => 49;
use constant I196_jnst               => 50;
use constant I196_jnv                => 51;
use constant I196_jnvt               => 52;
use constant I196_jst                => 53;
use constant I196_jv                 => 54;
use constant I196_jvt                => 55;
use constant I196_lcall              => 56;
use constant I196_ld                 => 57;
use constant I196_ldb                => 58;
use constant I196_ldbse              => 59;
use constant I196_ldbze              => 60;
use constant I196_ljmp               => 61;
use constant I196_mul2               => 62;
use constant I196_mul3               => 63;
use constant I196_mulb2              => 64;
use constant I196_mulb3              => 65;
use constant I196_mulu2              => 66;
use constant I196_mulu3              => 67;
use constant I196_mulub2             => 68;
use constant I196_mulub3             => 69;
use constant I196_neg                => 70;
use constant I196_negb               => 71;
use constant I196_nop                => 72;
use constant I196_norml              => 73;
use constant I196_not                => 74;
use constant I196_notb               => 75;
use constant I196_or                 => 76;
use constant I196_orb                => 77;
use constant I196_pop                => 78;
use constant I196_popa               => 79;
use constant I196_popf               => 80;
use constant I196_push               => 81;
use constant I196_pusha              => 82;
use constant I196_pushf              => 83;
use constant I196_ret                => 84;
use constant I196_rst                => 85;
use constant I196_scall              => 86;
use constant I196_setc               => 87;
use constant I196_shl                => 88;
use constant I196_shlb               => 89;
use constant I196_shll               => 90;
use constant I196_shr                => 91;
use constant I196_shra               => 92;
use constant I196_shrab              => 93;
use constant I196_shral              => 94;
use constant I196_shrb               => 95;
use constant I196_shrl               => 96;
use constant I196_sjmp               => 97;
use constant I196_skip               => 98;
use constant I196_st                 => 99;
use constant I196_stb                => 100;
use constant I196_sub2               => 101;
use constant I196_sub3               => 102;
use constant I196_subb2              => 103;
use constant I196_subb3              => 104;
use constant I196_subc               => 105;
use constant I196_subcb              => 106;
use constant I196_tijmp              => 107;
use constant I196_trap               => 108;
use constant I196_xch                => 109;
use constant I196_xchb               => 110;
use constant I196_xor                => 111;
use constant I196_xorb               => 112;
use constant I196_ebmovi             => 113;
use constant I196_ebr                => 114;
use constant I196_ecall              => 115;
use constant I196_ejmp               => 116;
use constant I196_eld                => 117;
use constant I196_eldb               => 118;
use constant I196_est                => 119;
use constant I196_estb               => 120;
use constant I196_last               => 121;
use constant SH3_null                => 0;
use constant SH3_add                 => 1;
use constant SH3_addc                => 2;
use constant SH3_addv                => 3;
use constant SH3_and                 => 4;
use constant SH3_and_b               => 5;
use constant SH3_bf                  => 6;
use constant SH3_bf_s                => 7;
use constant SH3_bra                 => 8;
use constant SH3_braf                => 9;
use constant SH3_bsr                 => 10;
use constant SH3_bsrf                => 11;
use constant SH3_bt                  => 12;
use constant SH3_bt_s                => 13;
use constant SH3_clrmac              => 14;
use constant SH3_clrs                => 15;
use constant SH3_clrt                => 16;
use constant SH3_cmp_eq              => 17;
use constant SH3_cmp_ge              => 18;
use constant SH3_cmp_gt              => 19;
use constant SH3_cmp_hi              => 20;
use constant SH3_cmp_hs              => 21;
use constant SH3_cmp_pl              => 22;
use constant SH3_cmp_pz              => 23;
use constant SH3_cmp_str             => 24;
use constant SH3_div0s               => 25;
use constant SH3_div0u               => 26;
use constant SH3_div1                => 27;
use constant SH3_dmuls_l             => 28;
use constant SH3_dmulu_l             => 29;
use constant SH3_dt                  => 30;
use constant SH3_exts_b              => 31;
use constant SH3_exts_w              => 32;
use constant SH3_extu_b              => 33;
use constant SH3_extu_w              => 34;
use constant SH3_jmp                 => 35;
use constant SH3_jsr                 => 36;
use constant SH3_ldc                 => 37;
use constant SH3_ldc_l               => 38;
use constant SH3_lds                 => 39;
use constant SH3_lds_l               => 40;
use constant SH3_ldtlb               => 41;
use constant SH3_mac_w               => 42;
use constant SH3_mac_l               => 43;
use constant SH3_mov                 => 44;
use constant SH3_mov_b               => 45;
use constant SH3_mov_w               => 46;
use constant SH3_mov_l               => 47;
use constant SH3_movi                => 48;
use constant SH3_movi_w              => 49;
use constant SH3_movi_l              => 50;
use constant SH3_movp_b              => 51;
use constant SH3_movp_w              => 52;
use constant SH3_movp_l              => 53;
use constant SH3_movs_b              => 54;
use constant SH3_movs_w              => 55;
use constant SH3_movs_l              => 56;
use constant SH3_mova                => 57;
use constant SH3_movt                => 58;
use constant SH3_mul                 => 59;
use constant SH3_muls                => 60;
use constant SH3_mulu                => 61;
use constant SH3_neg                 => 62;
use constant SH3_negc                => 63;
use constant SH3_nop                 => 64;
use constant SH3_not                 => 65;
use constant SH3_or                  => 66;
use constant SH3_or_b                => 67;
use constant SH3_pref                => 68;
use constant SH3_rotcl               => 69;
use constant SH3_rotcr               => 70;
use constant SH3_rotl                => 71;
use constant SH3_rotr                => 72;
use constant SH3_rte                 => 73;
use constant SH3_rts                 => 74;
use constant SH3_sets                => 75;
use constant SH3_sett                => 76;
use constant SH3_shad                => 77;
use constant SH3_shal                => 78;
use constant SH3_shar                => 79;
use constant SH3_shld                => 80;
use constant SH3_shll                => 81;
use constant SH3_shll2               => 82;
use constant SH3_shll8               => 83;
use constant SH3_shll16              => 84;
use constant SH3_shlr                => 85;
use constant SH3_shlr2               => 86;
use constant SH3_shlr8               => 87;
use constant SH3_shlr16              => 88;
use constant SH3_sleep               => 89;
use constant SH3_stc                 => 90;
use constant SH3_stc_l               => 91;
use constant SH3_sts                 => 92;
use constant SH3_sts_l               => 93;
use constant SH3_sub                 => 94;
use constant SH3_subc                => 95;
use constant SH3_subv                => 96;
use constant SH3_swap_b              => 97;
use constant SH3_swap_w              => 98;
use constant SH3_tas_b               => 99;
use constant SH3_trapa               => 100;
use constant SH3_tst                 => 101;
use constant SH3_tst_b               => 102;
use constant SH3_xor                 => 103;
use constant SH3_xor_b               => 104;
use constant SH3_xtrct               => 105;
use constant SH4_fabs                => 106;
use constant SH4_fadd                => 107;
use constant SH4_fcmp_eq             => 108;
use constant SH4_fcmp_gt             => 109;
use constant SH4_fcnvds              => 110;
use constant SH4_fcnvsd              => 111;
use constant SH4_fdiv                => 112;
use constant SH4_fipr                => 113;
use constant SH4_fldi0               => 114;
use constant SH4_fldi1               => 115;
use constant SH4_flds                => 116;
use constant SH4_float               => 117;
use constant SH4_fmac                => 118;
use constant SH4_fmov                => 119;
use constant SH4_fmov_s              => 120;
use constant SH4_fmovex              => 121;
use constant SH4_fmul                => 122;
use constant SH4_fneg                => 123;
use constant SH4_frchg               => 124;
use constant SH4_fschg               => 125;
use constant SH4_fsqrt               => 126;
use constant SH4_fsts                => 127;
use constant SH4_fsub                => 128;
use constant SH4_ftrc                => 129;
use constant SH4_ftrv                => 130;
use constant SH4_ftstn               => 131;
use constant SH4_movca_l             => 132;
use constant SH4_ocbi                => 133;
use constant SH4_ocbp                => 134;
use constant SH4_ocbwb               => 135;
use constant SH4_fsca                => 136;
use constant SH2a_band_b             => 137;
use constant SH2a_bandnot_b          => 138;
use constant SH2a_bclr               => 139;
use constant SH2a_bclr_b             => 140;
use constant SH2a_bld                => 141;
use constant SH2a_bld_b              => 142;
use constant SH2a_bldnot_b           => 143;
use constant SH2a_bor_b              => 144;
use constant SH2a_bornot_b           => 145;
use constant SH2a_bset               => 146;
use constant SH2a_bset_b             => 147;
use constant SH2a_bst                => 148;
use constant SH2a_bst_b              => 149;
use constant SH2a_bxor_b             => 150;
use constant SH2a_clips_b            => 151;
use constant SH2a_clips_w            => 152;
use constant SH2a_clipu_b            => 153;
use constant SH2a_clipu_w            => 154;
use constant SH2a_divs               => 155;
use constant SH2a_divu               => 156;
use constant SH2a_jsr_n              => 157;
use constant SH2a_ldbank             => 158;
use constant SH2a_movi20             => 159;
use constant SH2a_movi20s            => 160;
use constant SH2a_movml_l            => 161;
use constant SH2a_movmu_l            => 162;
use constant SH2a_movrt              => 163;
use constant SH2a_movu_b             => 164;
use constant SH2a_movu_w             => 165;
use constant SH2a_mulr               => 166;
use constant SH2a_nott               => 167;
use constant SH2a_resbank            => 168;
use constant SH2a_rts_n              => 169;
use constant SH2a_rtv_n              => 170;
use constant SH2a_stbank             => 171;
use constant SH4a_movco_l            => 172;
use constant SH4a_movli_l            => 173;
use constant SH4a_movua_l            => 174;
use constant SH4a_icbi               => 175;
use constant SH4a_prefi              => 176;
use constant SH4a_synco              => 177;
use constant SH4a_fsrra              => 178;
use constant SH4a_fpchg              => 179;
use constant SH4_last                => 180;
use constant Z8_null                 => 0;
use constant Z8_adc                  => 1;
use constant Z8_add                  => 2;
use constant Z8_and                  => 3;
use constant Z8_call                 => 4;
use constant Z8_ccf                  => 5;
use constant Z8_clr                  => 6;
use constant Z8_com                  => 7;
use constant Z8_cp                   => 8;
use constant Z8_da                   => 9;
use constant Z8_dec                  => 10;
use constant Z8_decw                 => 11;
use constant Z8_di                   => 12;
use constant Z8_djnz                 => 13;
use constant Z8_ei                   => 14;
use constant Z8_halt                 => 15;
use constant Z8_inc                  => 16;
use constant Z8_incw                 => 17;
use constant Z8_iret                 => 18;
use constant Z8_jp                   => 19;
use constant Z8_jpcond               => 20;
use constant Z8_jr                   => 21;
use constant Z8_jrcond               => 22;
use constant Z8_ld                   => 23;
use constant Z8_ldc                  => 24;
use constant Z8_ldci                 => 25;
use constant Z8_lde                  => 26;
use constant Z8_ldei                 => 27;
use constant Z8_nop                  => 28;
use constant Z8_or                   => 29;
use constant Z8_pop                  => 30;
use constant Z8_push                 => 31;
use constant Z8_rcf                  => 32;
use constant Z8_ret                  => 33;
use constant Z8_rl                   => 34;
use constant Z8_rlc                  => 35;
use constant Z8_rr                   => 36;
use constant Z8_rrc                  => 37;
use constant Z8_sbc                  => 38;
use constant Z8_scf                  => 39;
use constant Z8_sra                  => 40;
use constant Z8_srp                  => 41;
use constant Z8_stop                 => 42;
use constant Z8_sub                  => 43;
use constant Z8_swap                 => 44;
use constant Z8_tm                   => 45;
use constant Z8_tcm                  => 46;
use constant Z8_xor                  => 47;
use constant Z8_wdh                  => 48;
use constant Z8_wdt                  => 49;
use constant Z8_last                 => 50;
use constant AVR_null                => 0;
use constant AVR_add                 => 1;
use constant AVR_adc                 => 2;
use constant AVR_adiw                => 3;
use constant AVR_sub                 => 4;
use constant AVR_subi                => 5;
use constant AVR_sbc                 => 6;
use constant AVR_sbci                => 7;
use constant AVR_sbiw                => 8;
use constant AVR_and                 => 9;
use constant AVR_andi                => 10;
use constant AVR_or                  => 11;
use constant AVR_ori                 => 12;
use constant AVR_eor                 => 13;
use constant AVR_com                 => 14;
use constant AVR_neg                 => 15;
use constant AVR_sbr                 => 16;
use constant AVR_cbr                 => 17;
use constant AVR_inc                 => 18;
use constant AVR_dec                 => 19;
use constant AVR_tst                 => 20;
use constant AVR_clr                 => 21;
use constant AVR_ser                 => 22;
use constant AVR_cp                  => 23;
use constant AVR_cpc                 => 24;
use constant AVR_cpi                 => 25;
use constant AVR_mul                 => 26;
use constant AVR_rjmp                => 27;
use constant AVR_ijmp                => 28;
use constant AVR_jmp                 => 29;
use constant AVR_rcall               => 30;
use constant AVR_icall               => 31;
use constant AVR_call                => 32;
use constant AVR_ret                 => 33;
use constant AVR_reti                => 34;
use constant AVR_cpse                => 35;
use constant AVR_sbrc                => 36;
use constant AVR_sbrs                => 37;
use constant AVR_sbic                => 38;
use constant AVR_sbis                => 39;
use constant AVR_brbs                => 40;
use constant AVR_brbc                => 41;
use constant AVR_breq                => 42;
use constant AVR_brne                => 43;
use constant AVR_brcs                => 44;
use constant AVR_brcc                => 45;
use constant AVR_brsh                => 46;
use constant AVR_brlo                => 47;
use constant AVR_brmi                => 48;
use constant AVR_brpl                => 49;
use constant AVR_brge                => 50;
use constant AVR_brlt                => 51;
use constant AVR_brhs                => 52;
use constant AVR_brhc                => 53;
use constant AVR_brts                => 54;
use constant AVR_brtc                => 55;
use constant AVR_brvs                => 56;
use constant AVR_brvc                => 57;
use constant AVR_brie                => 58;
use constant AVR_brid                => 59;
use constant AVR_mov                 => 60;
use constant AVR_ldi                 => 61;
use constant AVR_lds                 => 62;
use constant AVR_ld                  => 63;
use constant AVR_ldd                 => 64;
use constant AVR_sts                 => 65;
use constant AVR_st                  => 66;
use constant AVR_std                 => 67;
use constant AVR_lpm                 => 68;
use constant AVR_in                  => 69;
use constant AVR_out                 => 70;
use constant AVR_push                => 71;
use constant AVR_pop                 => 72;
use constant AVR_lsl                 => 73;
use constant AVR_lsr                 => 74;
use constant AVR_rol                 => 75;
use constant AVR_ror                 => 76;
use constant AVR_asr                 => 77;
use constant AVR_swap                => 78;
use constant AVR_bset                => 79;
use constant AVR_bclr                => 80;
use constant AVR_sbi                 => 81;
use constant AVR_cbi                 => 82;
use constant AVR_bst                 => 83;
use constant AVR_bld                 => 84;
use constant AVR_sec                 => 85;
use constant AVR_clc                 => 86;
use constant AVR_sen                 => 87;
use constant AVR_cln                 => 88;
use constant AVR_sez                 => 89;
use constant AVR_clz                 => 90;
use constant AVR_sei                 => 91;
use constant AVR_cli                 => 92;
use constant AVR_ses                 => 93;
use constant AVR_cls                 => 94;
use constant AVR_sev                 => 95;
use constant AVR_clv                 => 96;
use constant AVR_set                 => 97;
use constant AVR_clt                 => 98;
use constant AVR_seh                 => 99;
use constant AVR_clh                 => 100;
use constant AVR_nop                 => 101;
use constant AVR_sleep               => 102;
use constant AVR_wdr                 => 103;
use constant AVR_elpm                => 104;
use constant AVR_espm                => 105;
use constant AVR_fmul                => 106;
use constant AVR_fmuls               => 107;
use constant AVR_fmulsu              => 108;
use constant AVR_movw                => 109;
use constant AVR_muls                => 110;
use constant AVR_mulsu               => 111;
use constant AVR_spm                 => 112;
use constant AVR_eicall              => 113;
use constant AVR_eijmp               => 114;
use constant AVR_des                 => 115;
use constant AVR_lac                 => 116;
use constant AVR_las                 => 117;
use constant AVR_lat                 => 118;
use constant AVR_xch                 => 119;
use constant AVR_last                => 120;
use constant MIPS_null               => 0;
use constant MIPS_add                => 1;
use constant MIPS_addu               => 2;
use constant MIPS_and                => 3;
use constant MIPS_dadd               => 4;
use constant MIPS_daddu              => 5;
use constant MIPS_dsub               => 6;
use constant MIPS_dsubu              => 7;
use constant MIPS_nor                => 8;
use constant MIPS_or                 => 9;
use constant MIPS_slt                => 10;
use constant MIPS_sltu               => 11;
use constant MIPS_sub                => 12;
use constant MIPS_subu               => 13;
use constant MIPS_xor                => 14;
use constant MIPS_dsll               => 15;
use constant MIPS_dsll32             => 16;
use constant MIPS_dsra               => 17;
use constant MIPS_dsra32             => 18;
use constant MIPS_dsrl               => 19;
use constant MIPS_dsrl32             => 20;
use constant MIPS_sll                => 21;
use constant MIPS_sra                => 22;
use constant MIPS_srl                => 23;
use constant MIPS_dsllv              => 24;
use constant MIPS_dsrav              => 25;
use constant MIPS_dsrlv              => 26;
use constant MIPS_sllv               => 27;
use constant MIPS_srav               => 28;
use constant MIPS_srlv               => 29;
use constant MIPS_addi               => 30;
use constant MIPS_addiu              => 31;
use constant MIPS_daddi              => 32;
use constant MIPS_daddiu             => 33;
use constant MIPS_slti               => 34;
use constant MIPS_sltiu              => 35;
use constant MIPS_andi               => 36;
use constant MIPS_ori                => 37;
use constant MIPS_xori               => 38;
use constant MIPS_teq                => 39;
use constant MIPS_tge                => 40;
use constant MIPS_tgeu               => 41;
use constant MIPS_tlt                => 42;
use constant MIPS_tltu               => 43;
use constant MIPS_tne                => 44;
use constant MIPS_cfc1               => 45;
use constant MIPS_cfc2               => 46;
use constant MIPS_ctc1               => 47;
use constant MIPS_ctc2               => 48;
use constant MIPS_dmfc0              => 49;
use constant MIPS_qmfc2              => 50;
use constant MIPS_dmtc0              => 51;
use constant MIPS_qmtc2              => 52;
use constant MIPS_mfc0               => 53;
use constant MIPS_mfc1               => 54;
use constant MIPS_mfc2               => 55;
use constant MIPS_mtc0               => 56;
use constant MIPS_mtc1               => 57;
use constant MIPS_mtc2               => 58;
use constant MIPS_teqi               => 59;
use constant MIPS_tgei               => 60;
use constant MIPS_tgeiu              => 61;
use constant MIPS_tlti               => 62;
use constant MIPS_tltiu              => 63;
use constant MIPS_tnei               => 64;
use constant MIPS_ddiv               => 65;
use constant MIPS_ddivu              => 66;
use constant MIPS_div                => 67;
use constant MIPS_divu               => 68;
use constant MIPS_dmult              => 69;
use constant MIPS_dmultu             => 70;
use constant MIPS_mult               => 71;
use constant MIPS_multu              => 72;
use constant MIPS_mthi               => 73;
use constant MIPS_mtlo               => 74;
use constant MIPS_mfhi               => 75;
use constant MIPS_mflo               => 76;
use constant MIPS_cop0               => 77;
use constant MIPS_cop1               => 78;
use constant MIPS_cop2               => 79;
use constant MIPS_break              => 80;
use constant MIPS_syscall            => 81;
use constant MIPS_bc0f               => 82;
use constant MIPS_bc1f               => 83;
use constant MIPS_bc2f               => 84;
use constant MIPS_bc3f               => 85;
use constant MIPS_bc0fl              => 86;
use constant MIPS_bc1fl              => 87;
use constant MIPS_bc2fl              => 88;
use constant MIPS_bc3fl              => 89;
use constant MIPS_bc0t               => 90;
use constant MIPS_bc1t               => 91;
use constant MIPS_bc2t               => 92;
use constant MIPS_bc3t               => 93;
use constant MIPS_bc0tl              => 94;
use constant MIPS_bc1tl              => 95;
use constant MIPS_bc2tl              => 96;
use constant MIPS_bc3tl              => 97;
use constant MIPS_bgez               => 98;
use constant MIPS_bgezal             => 99;
use constant MIPS_bgezall            => 100;
use constant MIPS_bgezl              => 101;
use constant MIPS_bgtz               => 102;
use constant MIPS_bgtzl              => 103;
use constant MIPS_blez               => 104;
use constant MIPS_blezl              => 105;
use constant MIPS_bltz               => 106;
use constant MIPS_bltzal             => 107;
use constant MIPS_bltzall            => 108;
use constant MIPS_bltzl              => 109;
use constant MIPS_beq                => 110;
use constant MIPS_beql               => 111;
use constant MIPS_bne                => 112;
use constant MIPS_bnel               => 113;
use constant MIPS_jalr               => 114;
use constant MIPS_j                  => 115;
use constant MIPS_jr                 => 116;
use constant MIPS_jal                => 117;
use constant MIPS_jalx               => 118;
use constant MIPS_cache              => 119;
use constant MIPS_lb                 => 120;
use constant MIPS_lbu                => 121;
use constant MIPS_ldl                => 122;
use constant MIPS_ldr                => 123;
use constant MIPS_lwl                => 124;
use constant MIPS_lwr                => 125;
use constant MIPS_ld                 => 126;
use constant MIPS_lld                => 127;
use constant MIPS_ldc1               => 128;
use constant MIPS_ldc2               => 129;
use constant MIPS_ll                 => 130;
use constant MIPS_lw                 => 131;
use constant MIPS_lwu                => 132;
use constant MIPS_lh                 => 133;
use constant MIPS_lhu                => 134;
use constant MIPS_lui                => 135;
use constant MIPS_lwc1               => 136;
use constant MIPS_lwc2               => 137;
use constant MIPS_sb                 => 138;
use constant MIPS_sdl                => 139;
use constant MIPS_sdr                => 140;
use constant MIPS_swl                => 141;
use constant MIPS_swr                => 142;
use constant MIPS_scd                => 143;
use constant MIPS_sd                 => 144;
use constant MIPS_sdc1               => 145;
use constant MIPS_sdc2               => 146;
use constant MIPS_sc                 => 147;
use constant MIPS_sw                 => 148;
use constant MIPS_sh                 => 149;
use constant MIPS_swc1               => 150;
use constant MIPS_swc2               => 151;
use constant MIPS_sync               => 152;
use constant MIPS_eret               => 153;
use constant MIPS_tlbp               => 154;
use constant MIPS_tlbr               => 155;
use constant MIPS_tlbwi              => 156;
use constant MIPS_tlbwr              => 157;
use constant MIPS_fadd               => 158;
use constant MIPS_fsub               => 159;
use constant MIPS_fmul               => 160;
use constant MIPS_fdiv               => 161;
use constant MIPS_fabs               => 162;
use constant MIPS_fcvt_s             => 163;
use constant MIPS_fcvt_d             => 164;
use constant MIPS_fcvt_w             => 165;
use constant MIPS_fcvt_l             => 166;
use constant MIPS_fround_l           => 167;
use constant MIPS_ftrunc_l           => 168;
use constant MIPS_fceil_l            => 169;
use constant MIPS_ffloor_l           => 170;
use constant MIPS_fround_w           => 171;
use constant MIPS_ftrunc_w           => 172;
use constant MIPS_fceil_w            => 173;
use constant MIPS_ffloor_w           => 174;
use constant MIPS_fmov               => 175;
use constant MIPS_fneg               => 176;
use constant MIPS_fsqrt              => 177;
use constant MIPS_fc_f               => 178;
use constant MIPS_fc_un              => 179;
use constant MIPS_fc_eq              => 180;
use constant MIPS_fc_ueq             => 181;
use constant MIPS_fc_olt             => 182;
use constant MIPS_fc_ult             => 183;
use constant MIPS_fc_ole             => 184;
use constant MIPS_fc_ule             => 185;
use constant MIPS_fc_sf              => 186;
use constant MIPS_fc_ngle            => 187;
use constant MIPS_fc_seq             => 188;
use constant MIPS_fc_ngl             => 189;
use constant MIPS_fc_lt              => 190;
use constant MIPS_fc_nge             => 191;
use constant MIPS_fc_le              => 192;
use constant MIPS_fc_ngt             => 193;
use constant MIPS_nop                => 194;
use constant MIPS_mov                => 195;
use constant MIPS_neg                => 196;
use constant MIPS_negu               => 197;
use constant MIPS_bnez               => 198;
use constant MIPS_bnezl              => 199;
use constant MIPS_beqz               => 200;
use constant MIPS_beqzl              => 201;
use constant MIPS_b                  => 202;
use constant MIPS_bal                => 203;
use constant MIPS_li                 => 204;
use constant MIPS_la                 => 205;
use constant MIPS_pref               => 206;
use constant MIPS_ldxc1              => 207;
use constant MIPS_lwxc1              => 208;
use constant MIPS_sdxc1              => 209;
use constant MIPS_swxc1              => 210;
use constant MIPS_madd_s             => 211;
use constant MIPS_madd_d             => 212;
use constant MIPS_msub_s             => 213;
use constant MIPS_msub_d             => 214;
use constant MIPS_movf               => 215;
use constant MIPS_movt               => 216;
use constant MIPS_movn               => 217;
use constant MIPS_movz               => 218;
use constant MIPS_fmovf              => 219;
use constant MIPS_fmovt              => 220;
use constant MIPS_fmovn              => 221;
use constant MIPS_fmovz              => 222;
use constant MIPS_nmadd_s            => 223;
use constant MIPS_nmadd_d            => 224;
use constant MIPS_nmsub_s            => 225;
use constant MIPS_nmsub_d            => 226;
use constant MIPS_prefx              => 227;
use constant MIPS_frecip             => 228;
use constant MIPS_frsqrt             => 229;
use constant MIPS_lbv                => 230;
use constant MIPS_lsv                => 231;
use constant MIPS_llv                => 232;
use constant MIPS_ldv                => 233;
use constant MIPS_lqv                => 234;
use constant MIPS_lrv                => 235;
use constant MIPS_lpv                => 236;
use constant MIPS_luv                => 237;
use constant MIPS_lhv                => 238;
use constant MIPS_lfv                => 239;
use constant MIPS_lwv                => 240;
use constant MIPS_ltv                => 241;
use constant MIPS_sbv                => 242;
use constant MIPS_ssv                => 243;
use constant MIPS_slv                => 244;
use constant MIPS_sdv                => 245;
use constant MIPS_sqv                => 246;
use constant MIPS_srv                => 247;
use constant MIPS_spv                => 248;
use constant MIPS_suv                => 249;
use constant MIPS_shv                => 250;
use constant MIPS_sfv                => 251;
use constant MIPS_swv                => 252;
use constant MIPS_stv                => 253;
use constant MIPS_vmulf              => 254;
use constant MIPS_vmacf              => 255;
use constant MIPS_vmulu              => 256;
use constant MIPS_vmacu              => 257;
use constant MIPS_vrndp              => 258;
use constant MIPS_vrndn              => 259;
use constant MIPS_vmulq              => 260;
use constant MIPS_vmacq              => 261;
use constant MIPS_vmudh              => 262;
use constant MIPS_vmadh              => 263;
use constant MIPS_vmudm              => 264;
use constant MIPS_vmadm              => 265;
use constant MIPS_vmudn              => 266;
use constant MIPS_vmadn              => 267;
use constant MIPS_vmudl              => 268;
use constant MIPS_vmadl              => 269;
use constant MIPS_vadd               => 270;
use constant MIPS_vsub               => 271;
use constant MIPS_vsut               => 272;
use constant MIPS_vabs               => 273;
use constant MIPS_vaddc              => 274;
use constant MIPS_vsubc              => 275;
use constant MIPS_vaddb              => 276;
use constant MIPS_vsubb              => 277;
use constant MIPS_vaccb              => 278;
use constant MIPS_vsucb              => 279;
use constant MIPS_vsad               => 280;
use constant MIPS_vsac               => 281;
use constant MIPS_vsum               => 282;
use constant MIPS_vsaw               => 283;
use constant MIPS_vlt                => 284;
use constant MIPS_veq                => 285;
use constant MIPS_vne                => 286;
use constant MIPS_vge                => 287;
use constant MIPS_vcl                => 288;
use constant MIPS_vch                => 289;
use constant MIPS_vcr                => 290;
use constant MIPS_vmrg               => 291;
use constant MIPS_vand               => 292;
use constant MIPS_vnand              => 293;
use constant MIPS_vor                => 294;
use constant MIPS_vnor               => 295;
use constant MIPS_vxor               => 296;
use constant MIPS_vnxor              => 297;
use constant MIPS_vnoop              => 298;
use constant MIPS_vmov               => 299;
use constant MIPS_vrcp               => 300;
use constant MIPS_vrsq               => 301;
use constant MIPS_vrcph              => 302;
use constant MIPS_vrsqh              => 303;
use constant MIPS_vrcpl              => 304;
use constant MIPS_vrsql              => 305;
use constant MIPS_vinst              => 306;
use constant MIPS_vextt              => 307;
use constant MIPS_vinsq              => 308;
use constant MIPS_vextq              => 309;
use constant MIPS_vinsn              => 310;
use constant MIPS_vextn              => 311;
use constant MIPS_cfc0               => 312;
use constant MIPS_ctc0               => 313;
use constant MIPS_mtsa               => 314;
use constant MIPS_R5900_first        => 314;
use constant MIPS_mfsa               => 315;
use constant MIPS_mtsab              => 316;
use constant MIPS_mtsah              => 317;
use constant MIPS_fadda              => 318;
use constant MIPS_fsuba              => 319;
use constant MIPS_fmula              => 320;
use constant MIPS_fmadda             => 321;
use constant MIPS_fmsuba             => 322;
use constant MIPS_fmadd              => 323;
use constant MIPS_fmsub              => 324;
use constant MIPS_fmax               => 325;
use constant MIPS_fmin               => 326;
use constant MIPS_plzcw              => 327;
use constant MIPS_mthi1              => 328;
use constant MIPS_mtlo1              => 329;
use constant MIPS_pmthl_lw           => 330;
use constant MIPS_pmthi              => 331;
use constant MIPS_pmtlo              => 332;
use constant MIPS_div1               => 333;
use constant MIPS_divu1              => 334;
use constant MIPS_pdivw              => 335;
use constant MIPS_pdivuw             => 336;
use constant MIPS_pdivbw             => 337;
use constant MIPS_paddw              => 338;
use constant MIPS_pmaddw             => 339;
use constant MIPS_mult1              => 340;
use constant MIPS_multu1             => 341;
use constant MIPS_madd1              => 342;
use constant MIPS_maddu1             => 343;
use constant MIPS_pmadduw            => 344;
use constant MIPS_psubw              => 345;
use constant MIPS_pcgtw              => 346;
use constant MIPS_psllvw             => 347;
use constant MIPS_pceqw              => 348;
use constant MIPS_pmaxw              => 349;
use constant MIPS_psrlvw             => 350;
use constant MIPS_pminw              => 351;
use constant MIPS_psravw             => 352;
use constant MIPS_paddh              => 353;
use constant MIPS_pmsubw             => 354;
use constant MIPS_padsbh             => 355;
use constant MIPS_psubh              => 356;
use constant MIPS_pcgth              => 357;
use constant MIPS_pceqh              => 358;
use constant MIPS_pmaxh              => 359;
use constant MIPS_pminh              => 360;
use constant MIPS_paddb              => 361;
use constant MIPS_psubb              => 362;
use constant MIPS_pcgtb              => 363;
use constant MIPS_pinth              => 364;
use constant MIPS_pceqb              => 365;
use constant MIPS_pintoh             => 366;
use constant MIPS_pmultw             => 367;
use constant MIPS_pmultuw            => 368;
use constant MIPS_pcpyld             => 369;
use constant MIPS_pcpyud             => 370;
use constant MIPS_paddsw             => 371;
use constant MIPS_pmaddh             => 372;
use constant MIPS_padduw             => 373;
use constant MIPS_psubsw             => 374;
use constant MIPS_phmadh             => 375;
use constant MIPS_psubuw             => 376;
use constant MIPS_pextlw             => 377;
use constant MIPS_pand               => 378;
use constant MIPS_pextuw             => 379;
use constant MIPS_por                => 380;
use constant MIPS_ppacw              => 381;
use constant MIPS_pxor               => 382;
use constant MIPS_pnor               => 383;
use constant MIPS_paddsh             => 384;
use constant MIPS_pmsubh             => 385;
use constant MIPS_padduh             => 386;
use constant MIPS_psubsh             => 387;
use constant MIPS_phmsbh             => 388;
use constant MIPS_psubuh             => 389;
use constant MIPS_pextlh             => 390;
use constant MIPS_pextuh             => 391;
use constant MIPS_ppach              => 392;
use constant MIPS_paddsb             => 393;
use constant MIPS_paddub             => 394;
use constant MIPS_psubsb             => 395;
use constant MIPS_psubub             => 396;
use constant MIPS_pextlb             => 397;
use constant MIPS_pextub             => 398;
use constant MIPS_ppacb              => 399;
use constant MIPS_qfsrv              => 400;
use constant MIPS_pmulth             => 401;
use constant MIPS_pabsw              => 402;
use constant MIPS_pabsh              => 403;
use constant MIPS_pexoh              => 404;
use constant MIPS_pexch              => 405;
use constant MIPS_prevh              => 406;
use constant MIPS_pcpyh              => 407;
use constant MIPS_pext5              => 408;
use constant MIPS_pexow              => 409;
use constant MIPS_pexcw              => 410;
use constant MIPS_ppac5              => 411;
use constant MIPS_prot3w             => 412;
use constant MIPS_psllh              => 413;
use constant MIPS_psrlh              => 414;
use constant MIPS_psrah              => 415;
use constant MIPS_psllw              => 416;
use constant MIPS_psrlw              => 417;
use constant MIPS_psraw              => 418;
use constant MIPS_mfhi1              => 419;
use constant MIPS_mflo1              => 420;
use constant MIPS_pmfhi              => 421;
use constant MIPS_pmflo              => 422;
use constant MIPS_pmfhl              => 423;
use constant MIPS_lq                 => 424;
use constant MIPS_sq                 => 425;
use constant MIPS_lqc2               => 426;
use constant MIPS_sqc2               => 427;
use constant MIPS_madd_r5900         => 428;
use constant MIPS_maddu_r5900        => 429;
use constant MIPS_mult3              => 430;
use constant MIPS_multu3             => 431;
use constant MIPS_R5900_last         => 431;
use constant MIPS_bteqz              => 439;
use constant MIPS_btnez              => 432;
use constant MIPS_cmp                => 433;
use constant MIPS_cmpi               => 434;
use constant MIPS_extend             => 458;
use constant MIPS_move               => 473;
use constant MIPS_not                => 477;
use constant MIPS_dla                => 495;
use constant MIPS_clo                => 498;
use constant MIPS_clz                => 435;
use constant MIPS_madd               => 436;
use constant MIPS_maddu              => 437;
use constant MIPS_msub               => 438;
use constant MIPS_msubu              => 439;
use constant MIPS_mul                => 440;
use constant MIPS_sdbbp              => 441;
use constant MIPS_wait               => 442;
use constant MIPS_alnv_ps            => 443;
use constant MIPS_deret              => 444;
use constant MIPS_di                 => 445;
use constant MIPS_ehb                => 446;
use constant MIPS_ei                 => 447;
use constant MIPS_ext                => 448;
use constant MIPS_fcvt_ps            => 449;
use constant MIPS_fcvt_s_pl          => 450;
use constant MIPS_fcvt_s_pu          => 451;
use constant MIPS_ins                => 452;
use constant MIPS_jalr_hb            => 453;
use constant MIPS_jr_hb              => 454;
use constant MIPS_luxc1              => 455;
use constant MIPS_madd_ps            => 456;
use constant MIPS_mfhc1              => 457;
use constant MIPS_mfhc2              => 458;
use constant MIPS_msub_ps            => 459;
use constant MIPS_mthc1              => 460;
use constant MIPS_mthc2              => 461;
use constant MIPS_nmadd_ps           => 462;
use constant MIPS_nmsub_ps           => 463;
use constant MIPS_pll                => 464;
use constant MIPS_plu                => 465;
use constant MIPS_pul                => 466;
use constant MIPS_puu                => 467;
use constant MIPS_rdhwr              => 468;
use constant MIPS_rdpgpr             => 469;
use constant MIPS_rotr               => 470;
use constant MIPS_rotrv              => 471;
use constant MIPS_seb                => 472;
use constant MIPS_seh                => 473;
use constant MIPS_suxc1              => 474;
use constant MIPS_synci              => 475;
use constant MIPS_wrpgpr             => 476;
use constant MIPS_wsbh               => 477;
use constant MIPS_dmfc1              => 478;
use constant MIPS_dmtc1              => 479;
use constant MIPS_save               => 480;
use constant MIPS_restore            => 481;
use constant MIPS_jalrc              => 482;
use constant MIPS_jrc                => 483;
use constant MIPS_sew                => 484;
use constant MIPS_zeb                => 485;
use constant MIPS_zeh                => 486;
use constant MIPS_zew                => 487;
use constant MIPS_ssnop              => 488;
use constant MIPS_li_s               => 489;
use constant MIPS_li_d               => 490;
use constant MIPS_dneg               => 491;
use constant MIPS_dnegu              => 492;
use constant MIPS_pause              => 493;
use constant MIPS_dclo               => 494;
use constant MIPS_dclz               => 495;
use constant MIPS_dext               => 496;
use constant MIPS_dextm              => 497;
use constant MIPS_dextu              => 498;
use constant MIPS_dins               => 499;
use constant MIPS_dinsm              => 500;
use constant MIPS_dinsu              => 501;
use constant MIPS_dmfc2              => 502;
use constant MIPS_dmtc2              => 503;
use constant MIPS_drotr              => 504;
use constant MIPS_drotr32            => 505;
use constant MIPS_drotrv             => 506;
use constant MIPS_dsbh               => 507;
use constant MIPS_dshd               => 508;
use constant MIPS_baddu              => 509;
use constant MIPS_bbit0              => 510;
use constant MIPS_bbit032            => 511;
use constant MIPS_bbit1              => 512;
use constant MIPS_bbit132            => 513;
use constant MIPS_cins               => 514;
use constant MIPS_cins32             => 515;
use constant MIPS_dmul               => 516;
use constant MIPS_dpop               => 517;
use constant MIPS_exts               => 518;
use constant MIPS_exts32             => 519;
use constant MIPS_mtm0               => 520;
use constant MIPS_mtm1               => 521;
use constant MIPS_mtm2               => 522;
use constant MIPS_mtp0               => 523;
use constant MIPS_mtp1               => 524;
use constant MIPS_mtp2               => 525;
use constant MIPS_pop                => 526;
use constant MIPS_saa                => 527;
use constant MIPS_saad               => 528;
use constant MIPS_seq                => 529;
use constant MIPS_seqi               => 530;
use constant MIPS_sne                => 531;
use constant MIPS_snei               => 532;
use constant MIPS_synciobdma         => 533;
use constant MIPS_syncs              => 534;
use constant MIPS_syncw              => 535;
use constant MIPS_syncws             => 536;
use constant MIPS_uld                => 537;
use constant MIPS_ulw                => 538;
use constant MIPS_usd                => 539;
use constant MIPS_usw                => 540;
use constant MIPS_v3mulu             => 541;
use constant MIPS_vmm0               => 542;
use constant MIPS_vmulu_cn           => 543;
use constant MIPS_dbreak             => 544;
use constant MIPS_dret               => 545;
use constant MIPS_mfdr               => 546;
use constant MIPS_mtdr               => 547;
use constant PSP_bitrev              => 548;
use constant PSP_max                 => 549;
use constant PSP_min                 => 550;
use constant PSP_mfic                => 551;
use constant PSP_mtic                => 552;
use constant PSP_wsbw                => 553;
use constant PSP_sleep               => 554;
use constant PSP_lv                  => 555;
use constant PSP_lvl                 => 556;
use constant PSP_lvr                 => 557;
use constant PSP_sv                  => 558;
use constant PSP_svl                 => 559;
use constant PSP_svr                 => 560;
use constant PSP_mfv                 => 561;
use constant PSP_mtv                 => 562;
use constant PSP_mfvc                => 563;
use constant PSP_mtvc                => 564;
use constant PSP_bvf                 => 565;
use constant PSP_bvt                 => 566;
use constant PSP_bvfl                => 567;
use constant PSP_bvtl                => 568;
use constant PSP_vnop                => 569;
use constant PSP_vflush              => 570;
use constant PSP_vsync               => 571;
use constant PSP_vabs                => 572;
use constant PSP_vadd                => 573;
use constant PSP_vasin               => 574;
use constant PSP_vavg                => 575;
use constant PSP_vbfy1               => 576;
use constant PSP_vbfy2               => 577;
use constant PSP_vc2i                => 578;
use constant PSP_vcmovf              => 579;
use constant PSP_vcmovt              => 580;
use constant PSP_vcmp                => 581;
use constant PSP_vcos                => 582;
use constant PSP_vcrs                => 583;
use constant PSP_vcrsp               => 584;
use constant PSP_vcst                => 585;
use constant PSP_vdet                => 586;
use constant PSP_vdiv                => 587;
use constant PSP_vdot                => 588;
use constant PSP_vexp2               => 589;
use constant PSP_vf2h                => 590;
use constant PSP_vf2id               => 591;
use constant PSP_vf2in               => 592;
use constant PSP_vf2iu               => 593;
use constant PSP_vf2iz               => 594;
use constant PSP_vfad                => 595;
use constant PSP_vfim                => 596;
use constant PSP_vh2f                => 597;
use constant PSP_vhdp                => 598;
use constant PSP_vhtfm2              => 599;
use constant PSP_vhtfm3              => 600;
use constant PSP_vhtfm4              => 601;
use constant PSP_vi2c                => 602;
use constant PSP_vi2f                => 603;
use constant PSP_vi2s                => 604;
use constant PSP_vi2uc               => 605;
use constant PSP_vi2us               => 606;
use constant PSP_vidt                => 607;
use constant PSP_viim                => 608;
use constant PSP_vlgb                => 609;
use constant PSP_vlog2               => 610;
use constant PSP_vmax                => 611;
use constant PSP_vmfvc               => 612;
use constant PSP_vmidt               => 613;
use constant PSP_vmin                => 614;
use constant PSP_vmmov               => 615;
use constant PSP_vmmul               => 616;
use constant PSP_vmone               => 617;
use constant PSP_vmov                => 618;
use constant PSP_vmscl               => 619;
use constant PSP_vmtvc               => 620;
use constant PSP_vmul                => 621;
use constant PSP_vmzero              => 622;
use constant PSP_vneg                => 623;
use constant PSP_vnrcp               => 624;
use constant PSP_vnsin               => 625;
use constant PSP_vocp                => 626;
use constant PSP_vone                => 627;
use constant PSP_vpfxd               => 628;
use constant PSP_vpfxs               => 629;
use constant PSP_vpfxt               => 630;
use constant PSP_vqmul               => 631;
use constant PSP_vrcp                => 632;
use constant PSP_vrexp2              => 633;
use constant PSP_vrndf1              => 634;
use constant PSP_vrndf2              => 635;
use constant PSP_vrndi               => 636;
use constant PSP_vrnds               => 637;
use constant PSP_vrot                => 638;
use constant PSP_vrsq                => 639;
use constant PSP_vs2i                => 640;
use constant PSP_vsat0               => 641;
use constant PSP_vsat1               => 642;
use constant PSP_vsbn                => 643;
use constant PSP_vsbz                => 644;
use constant PSP_vscl                => 645;
use constant PSP_vscmp               => 646;
use constant PSP_vsge                => 647;
use constant PSP_vsgn                => 648;
use constant PSP_vsin                => 649;
use constant PSP_vslt                => 650;
use constant PSP_vsocp               => 651;
use constant PSP_vsqrt               => 652;
use constant PSP_vsrt1               => 653;
use constant PSP_vsrt2               => 654;
use constant PSP_vsrt3               => 655;
use constant PSP_vsrt4               => 656;
use constant PSP_vsub                => 657;
use constant PSP_vt4444              => 658;
use constant PSP_vt5551              => 659;
use constant PSP_vt5650              => 660;
use constant PSP_vtfm2               => 661;
use constant PSP_vtfm3               => 662;
use constant PSP_vtfm4               => 663;
use constant PSP_vuc2i               => 664;
use constant PSP_vus2i               => 665;
use constant PSP_vwbn                => 666;
use constant PSP_vzero               => 667;
use constant PSP_mfvme               => 668;
use constant PSP_mtvme               => 669;
use constant MIPS_last               => 670;
use constant H8_null                 => 0;
use constant H8_add                  => 1;
use constant H8_adds                 => 2;
use constant H8_addx                 => 3;
use constant H8_and                  => 4;
use constant H8_andc                 => 5;
use constant H8_band                 => 6;
use constant H8_bra                  => 7;
use constant H8_brn                  => 8;
use constant H8_bhi                  => 9;
use constant H8_bls                  => 10;
use constant H8_bcc                  => 11;
use constant H8_bcs                  => 12;
use constant H8_bne                  => 13;
use constant H8_beq                  => 14;
use constant H8_bvc                  => 15;
use constant H8_bvs                  => 16;
use constant H8_bpl                  => 17;
use constant H8_bmi                  => 18;
use constant H8_bge                  => 19;
use constant H8_blt                  => 20;
use constant H8_bgt                  => 21;
use constant H8_ble                  => 22;
use constant H8_bclr                 => 23;
use constant H8_biand                => 24;
use constant H8_bild                 => 25;
use constant H8_bior                 => 26;
use constant H8_bist                 => 27;
use constant H8_bixor                => 28;
use constant H8_bld                  => 29;
use constant H8_bnot                 => 30;
use constant H8_bor                  => 31;
use constant H8_bset                 => 32;
use constant H8_bsr                  => 33;
use constant H8_bst                  => 34;
use constant H8_btst                 => 35;
use constant H8_bxor                 => 36;
use constant H8_clrmac               => 37;
use constant H8_cmp                  => 38;
use constant H8_daa                  => 39;
use constant H8_das                  => 40;
use constant H8_dec                  => 41;
use constant H8_divxs                => 42;
use constant H8_divxu                => 43;
use constant H8_eepmov               => 44;
use constant H8_exts                 => 45;
use constant H8_extu                 => 46;
use constant H8_inc                  => 47;
use constant H8_jmp                  => 48;
use constant H8_jsr                  => 49;
use constant H8_ldc                  => 50;
use constant H8_ldm                  => 51;
use constant H8_ldmac                => 52;
use constant H8_mac                  => 53;
use constant H8_mov                  => 54;
use constant H8_movfpe               => 55;
use constant H8_movtpe               => 56;
use constant H8_mulxs                => 57;
use constant H8_mulxu                => 58;
use constant H8_neg                  => 59;
use constant H8_nop                  => 60;
use constant H8_not                  => 61;
use constant H8_or                   => 62;
use constant H8_orc                  => 63;
use constant H8_pop                  => 64;
use constant H8_push                 => 65;
use constant H8_rotl                 => 66;
use constant H8_rotr                 => 67;
use constant H8_rotxl                => 68;
use constant H8_rotxr                => 69;
use constant H8_rte                  => 70;
use constant H8_rts                  => 71;
use constant H8_shal                 => 72;
use constant H8_shar                 => 73;
use constant H8_shll                 => 74;
use constant H8_shlr                 => 75;
use constant H8_sleep                => 76;
use constant H8_stc                  => 77;
use constant H8_stm                  => 78;
use constant H8_stmac                => 79;
use constant H8_sub                  => 80;
use constant H8_subs                 => 81;
use constant H8_subx                 => 82;
use constant H8_tas                  => 83;
use constant H8_trapa                => 84;
use constant H8_xor                  => 85;
use constant H8_xorc                 => 86;
use constant H8_last                 => 87;
use constant PIC_null                => 0;
use constant PIC_addwf               => 1;
use constant PIC_andwf               => 2;
use constant PIC_clrf                => 3;
use constant PIC_clrw                => 4;
use constant PIC_comf                => 5;
use constant PIC_decf                => 6;
use constant PIC_decfsz              => 7;
use constant PIC_incf                => 8;
use constant PIC_incfsz              => 9;
use constant PIC_iorwf               => 10;
use constant PIC_movf                => 11;
use constant PIC_movwf               => 12;
use constant PIC_nop                 => 13;
use constant PIC_rlf                 => 14;
use constant PIC_rrf                 => 15;
use constant PIC_subwf               => 16;
use constant PIC_swapf               => 17;
use constant PIC_xorwf               => 18;
use constant PIC_bcf                 => 19;
use constant PIC_bsf                 => 20;
use constant PIC_btfsc               => 21;
use constant PIC_btfss               => 22;
use constant PIC_addlw               => 23;
use constant PIC_andlw               => 24;
use constant PIC_call                => 25;
use constant PIC_clrwdt              => 26;
use constant PIC_goto                => 27;
use constant PIC_iorlw               => 28;
use constant PIC_movlw               => 29;
use constant PIC_retfie              => 30;
use constant PIC_retlw               => 31;
use constant PIC_return              => 32;
use constant PIC_sleep               => 33;
use constant PIC_sublw               => 34;
use constant PIC_xorlw               => 35;
use constant PIC_option              => 36;
use constant PIC_tris                => 37;
use constant PIC_movfw               => 38;
use constant PIC_tstf                => 39;
use constant PIC_negf                => 40;
use constant PIC_b                   => 41;
use constant PIC_clrc                => 42;
use constant PIC_clrdc               => 43;
use constant PIC_clrz                => 44;
use constant PIC_setc                => 45;
use constant PIC_setdc               => 46;
use constant PIC_setz                => 47;
use constant PIC_skpc                => 48;
use constant PIC_skpdc               => 49;
use constant PIC_skpnc               => 50;
use constant PIC_skpndc              => 51;
use constant PIC_skpnz               => 52;
use constant PIC_skpz                => 53;
use constant PIC_bc                  => 54;
use constant PIC_bdc                 => 55;
use constant PIC_bnc                 => 56;
use constant PIC_bndc                => 57;
use constant PIC_bnz                 => 58;
use constant PIC_bz                  => 59;
use constant PIC_addcf               => 60;
use constant PIC_adddcf              => 61;
use constant PIC_subcf               => 62;
use constant PIC_addwf3              => 63;
use constant PIC_addwfc3             => 64;
use constant PIC_andwf3              => 65;
use constant PIC_clrf2               => 66;
use constant PIC_comf3               => 67;
use constant PIC_cpfseq2             => 68;
use constant PIC_cpfsgt2             => 69;
use constant PIC_cpfslt2             => 70;
use constant PIC_decf3               => 71;
use constant PIC_decfsz3             => 72;
use constant PIC_dcfsnz3             => 73;
use constant PIC_incf3               => 74;
use constant PIC_incfsz3             => 75;
use constant PIC_infsnz3             => 76;
use constant PIC_iorwf3              => 77;
use constant PIC_movf3               => 78;
use constant PIC_movff2              => 79;
use constant PIC_movwf2              => 80;
use constant PIC_mulwf2              => 81;
use constant PIC_negf2               => 82;
use constant PIC_rlcf3               => 83;
use constant PIC_rlncf3              => 84;
use constant PIC_rrcf3               => 85;
use constant PIC_rrncf3              => 86;
use constant PIC_setf2               => 87;
use constant PIC_subfwb3             => 88;
use constant PIC_subwf3              => 89;
use constant PIC_subwfb3             => 90;
use constant PIC_swapf3              => 91;
use constant PIC_tstfsz2             => 92;
use constant PIC_xorwf3              => 93;
use constant PIC_bcf3                => 94;
use constant PIC_bsf3                => 95;
use constant PIC_btfsc3              => 96;
use constant PIC_btfss3              => 97;
use constant PIC_btg3                => 98;
use constant PIC_bc1                 => 99;
use constant PIC_bn1                 => 100;
use constant PIC_bnc1                => 101;
use constant PIC_bnn1                => 102;
use constant PIC_bnov1               => 103;
use constant PIC_bnz1                => 104;
use constant PIC_bov1                => 105;
use constant PIC_bra1                => 106;
use constant PIC_bz1                 => 107;
use constant PIC_call2               => 108;
use constant PIC_daw0                => 109;
use constant PIC_pop0                => 110;
use constant PIC_push0               => 111;
use constant PIC_rcall1              => 112;
use constant PIC_reset0              => 113;
use constant PIC_retfie1             => 114;
use constant PIC_return1             => 115;
use constant PIC_lfsr2               => 116;
use constant PIC_movlb1              => 117;
use constant PIC_mullw1              => 118;
use constant PIC_tblrd0              => 119;
use constant PIC_tblrd0p             => 120;
use constant PIC_tblrd0m             => 121;
use constant PIC_tblrdp0             => 122;
use constant PIC_tblwt0              => 123;
use constant PIC_tblwt0p             => 124;
use constant PIC_tblwt0m             => 125;
use constant PIC_tblwtp0             => 126;
use constant PIC_last                => 127;
use constant SPARC_null              => 0;
use constant SPARC_add               => 1;
use constant SPARC_addcc             => 2;
use constant SPARC_addc              => 3;
use constant SPARC_addccc            => 4;
use constant SPARC_and               => 5;
use constant SPARC_andcc             => 6;
use constant SPARC_andn              => 7;
use constant SPARC_andncc            => 8;
use constant SPARC_b                 => 9;
use constant SPARC_bp                => 10;
use constant SPARC_bpr               => 11;
use constant SPARC_call              => 12;
use constant SPARC_casa              => 13;
use constant SPARC_casxa             => 14;
use constant SPARC_done              => 15;
use constant SPARC_fabs              => 16;
use constant SPARC_fadd              => 17;
use constant SPARC_fbp               => 18;
use constant SPARC_fb                => 19;
use constant SPARC_fcmp              => 20;
use constant SPARC_fcmpe             => 21;
use constant SPARC_fdiv              => 22;
use constant SPARC_fdmulq            => 23;
use constant SPARC_flush             => 24;
use constant SPARC_flushw            => 25;
use constant SPARC_fmov              => 26;
use constant SPARC_fmovcc            => 27;
use constant SPARC_fmovr             => 28;
use constant SPARC_fmul              => 29;
use constant SPARC_fneg              => 30;
use constant SPARC_fsmuld            => 31;
use constant SPARC_fsqrt             => 32;
use constant SPARC_fsub              => 33;
use constant SPARC_fstox             => 34;
use constant SPARC_fdtox             => 35;
use constant SPARC_fqtox             => 36;
use constant SPARC_fxtos             => 37;
use constant SPARC_fxtod             => 38;
use constant SPARC_fxtoq             => 39;
use constant SPARC_fitos             => 40;
use constant SPARC_fdtos             => 41;
use constant SPARC_fqtos             => 42;
use constant SPARC_fitod             => 43;
use constant SPARC_fstod             => 44;
use constant SPARC_fqtod             => 45;
use constant SPARC_fitoq             => 46;
use constant SPARC_fstoq             => 47;
use constant SPARC_fdtoq             => 48;
use constant SPARC_fstoi             => 49;
use constant SPARC_fdtoi             => 50;
use constant SPARC_fqtoi             => 51;
use constant SPARC_illtrap           => 52;
use constant SPARC_impdep1           => 53;
use constant SPARC_impdep2           => 54;
use constant SPARC_jmpl              => 55;
use constant SPARC_ldd               => 56;
use constant SPARC_ldda              => 57;
use constant SPARC_lddf              => 58;
use constant SPARC_lddfa             => 59;
use constant SPARC_ldf               => 60;
use constant SPARC_ldfa              => 61;
use constant SPARC_ldfsr             => 62;
use constant SPARC_ldqf              => 63;
use constant SPARC_ldqfa             => 64;
use constant SPARC_ldsb              => 65;
use constant SPARC_ldsba             => 66;
use constant SPARC_ldsh              => 67;
use constant SPARC_ldsha             => 68;
use constant SPARC_ldstub            => 69;
use constant SPARC_ldstuba           => 70;
use constant SPARC_ldsw              => 71;
use constant SPARC_ldswa             => 72;
use constant SPARC_ldub              => 73;
use constant SPARC_lduba             => 74;
use constant SPARC_lduh              => 75;
use constant SPARC_lduha             => 76;
use constant SPARC_lduw              => 77;
use constant SPARC_lduwa             => 78;
use constant SPARC_ldx               => 79;
use constant SPARC_ldxa              => 80;
use constant SPARC_ldxfsr            => 81;
use constant SPARC_membar            => 82;
use constant SPARC_mov               => 83;
use constant SPARC_movr              => 84;
use constant SPARC_mulscc            => 85;
use constant SPARC_mulx              => 86;
use constant SPARC_nop               => 87;
use constant SPARC_or                => 88;
use constant SPARC_orcc              => 89;
use constant SPARC_orn               => 90;
use constant SPARC_orncc             => 91;
use constant SPARC_popc              => 92;
use constant SPARC_prefetch          => 93;
use constant SPARC_prefetcha         => 94;
use constant SPARC_rd                => 95;
use constant SPARC_rdpr              => 96;
use constant SPARC_restore           => 97;
use constant SPARC_restored          => 98;
use constant SPARC_retry             => 99;
use constant SPARC_return            => 100;
use constant SPARC_save              => 101;
use constant SPARC_saved             => 102;
use constant SPARC_sdiv              => 103;
use constant SPARC_sdivcc            => 104;
use constant SPARC_sdivx             => 105;
use constant SPARC_sethi             => 106;
use constant SPARC_sir               => 107;
use constant SPARC_sll               => 108;
use constant SPARC_sllx              => 109;
use constant SPARC_smul              => 110;
use constant SPARC_smulcc            => 111;
use constant SPARC_sra               => 112;
use constant SPARC_srax              => 113;
use constant SPARC_srl               => 114;
use constant SPARC_srlx              => 115;
use constant SPARC_stb               => 116;
use constant SPARC_stba              => 117;
use constant SPARC_stbar             => 118;
use constant SPARC_std               => 119;
use constant SPARC_stda              => 120;
use constant SPARC_stdf              => 121;
use constant SPARC_stdfa             => 122;
use constant SPARC_stf               => 123;
use constant SPARC_stfa              => 124;
use constant SPARC_stfsr             => 125;
use constant SPARC_sth               => 126;
use constant SPARC_stha              => 127;
use constant SPARC_stqf              => 128;
use constant SPARC_stqfa             => 129;
use constant SPARC_stw               => 130;
use constant SPARC_stwa              => 131;
use constant SPARC_stx               => 132;
use constant SPARC_stxa              => 133;
use constant SPARC_stxfsr            => 134;
use constant SPARC_sub               => 135;
use constant SPARC_subcc             => 136;
use constant SPARC_subc              => 137;
use constant SPARC_subccc            => 138;
use constant SPARC_swap              => 139;
use constant SPARC_swapa             => 140;
use constant SPARC_taddcc            => 141;
use constant SPARC_taddcctv          => 142;
use constant SPARC_tsubcc            => 143;
use constant SPARC_tsubcctv          => 144;
use constant SPARC_t                 => 145;
use constant SPARC_udiv              => 146;
use constant SPARC_udivcc            => 147;
use constant SPARC_udivx             => 148;
use constant SPARC_umul              => 149;
use constant SPARC_umulcc            => 150;
use constant SPARC_wr                => 151;
use constant SPARC_wrpr              => 152;
use constant SPARC_xnor              => 153;
use constant SPARC_xnorcc            => 154;
use constant SPARC_xor               => 155;
use constant SPARC_xorcc             => 156;
use constant SPARC_cmp               => 157;
use constant SPARC_jmp               => 158;
use constant SPARC_iprefetch         => 159;
use constant SPARC_tst               => 160;
use constant SPARC_ret               => 161;
use constant SPARC_retl              => 162;
use constant SPARC_setuw             => 163;
use constant SPARC_setsw             => 164;
use constant SPARC_setx              => 165;
use constant SPARC_signx             => 166;
use constant SPARC_not               => 167;
use constant SPARC_neg               => 168;
use constant SPARC_cas               => 169;
use constant SPARC_casl              => 170;
use constant SPARC_casx              => 171;
use constant SPARC_casxl             => 172;
use constant SPARC_inc               => 173;
use constant SPARC_inccc             => 174;
use constant SPARC_dec               => 175;
use constant SPARC_deccc             => 176;
use constant SPARC_btst              => 177;
use constant SPARC_bset              => 178;
use constant SPARC_bclr              => 179;
use constant SPARC_btog              => 180;
use constant SPARC_clr               => 181;
use constant SPARC_clrb              => 182;
use constant SPARC_clrh              => 183;
use constant SPARC_clrx              => 184;
use constant SPARC_clruw             => 185;
use constant SPARC_pseudo_mov        => 186;
use constant SPARC_alignaddress      => 187;
use constant SPARC_array             => 188;
use constant SPARC_edge              => 189;
use constant SPARC_faligndata        => 190;
use constant SPARC_fandnot1          => 191;
use constant SPARC_fandnot2          => 192;
use constant SPARC_fand              => 193;
use constant SPARC_fcmpeq            => 194;
use constant SPARC_fcmpgt            => 195;
use constant SPARC_fcmple            => 196;
use constant SPARC_fcmpne            => 197;
use constant SPARC_fexpand           => 198;
use constant SPARC_fmul8sux16        => 199;
use constant SPARC_fmul8ulx16        => 200;
use constant SPARC_fmul8x16          => 201;
use constant SPARC_fmul8x16al        => 202;
use constant SPARC_fmul8x16au        => 203;
use constant SPARC_fmuld8sux16       => 204;
use constant SPARC_fmuld8ulx16       => 205;
use constant SPARC_fnand             => 206;
use constant SPARC_fnor              => 207;
use constant SPARC_fnot1             => 208;
use constant SPARC_fnot2             => 209;
use constant SPARC_fone              => 210;
use constant SPARC_fornot1           => 211;
use constant SPARC_fornot2           => 212;
use constant SPARC_for               => 213;
use constant SPARC_fpackfix          => 214;
use constant SPARC_fpack             => 215;
use constant SPARC_fpadd             => 216;
use constant SPARC_fpmerge           => 217;
use constant SPARC_fpsub             => 218;
use constant SPARC_fsrc1             => 219;
use constant SPARC_fsrc2             => 220;
use constant SPARC_fxnor             => 221;
use constant SPARC_fxor              => 222;
use constant SPARC_fzero             => 223;
use constant SPARC_pdist             => 224;
use constant SPARC_shutdown          => 225;
use constant SPARC_rett              => 226;
use constant SPARC_last              => 227;
use constant HPPA_null               => 0;
use constant HPPA_add                => 1;
use constant HPPA_addb               => 2;
use constant HPPA_addi               => 3;
use constant HPPA_addib              => 4;
use constant HPPA_addil              => 5;
use constant HPPA_and                => 6;
use constant HPPA_andcm              => 7;
use constant HPPA_b                  => 8;
use constant HPPA_bb                 => 9;
use constant HPPA_be                 => 10;
use constant HPPA_blr                => 11;
use constant HPPA_break              => 12;
use constant HPPA_bv                 => 13;
use constant HPPA_bve                => 14;
use constant HPPA_cldd               => 15;
use constant HPPA_cldw               => 16;
use constant HPPA_clrbts             => 17;
use constant HPPA_cmpb               => 18;
use constant HPPA_cmpclr             => 19;
use constant HPPA_cmpib              => 20;
use constant HPPA_cmpiclr            => 21;
use constant HPPA_copr               => 22;
use constant HPPA_cstd               => 23;
use constant HPPA_cstw               => 24;
use constant HPPA_dcor               => 25;
use constant HPPA_depd               => 26;
use constant HPPA_depdi              => 27;
use constant HPPA_depw               => 28;
use constant HPPA_depwi              => 29;
use constant HPPA_diag               => 30;
use constant HPPA_ds                 => 31;
use constant HPPA_extrd              => 32;
use constant HPPA_extrw              => 33;
use constant HPPA_fdc                => 34;
use constant HPPA_fdce               => 35;
use constant HPPA_fic                => 36;
use constant HPPA_fice               => 37;
use constant HPPA_hadd               => 38;
use constant HPPA_havg               => 39;
use constant HPPA_hshl               => 40;
use constant HPPA_hshladd            => 41;
use constant HPPA_hshr               => 42;
use constant HPPA_hshradd            => 43;
use constant HPPA_hsub               => 44;
use constant HPPA_idtlbt             => 45;
use constant HPPA_iitlbt             => 46;
use constant HPPA_lci                => 47;
use constant HPPA_ldb                => 48;
use constant HPPA_ldcd               => 49;
use constant HPPA_ldcw               => 50;
use constant HPPA_ldd                => 51;
use constant HPPA_ldda               => 52;
use constant HPPA_ldh                => 53;
use constant HPPA_ldil               => 54;
use constant HPPA_ldo                => 55;
use constant HPPA_ldsid              => 56;
use constant HPPA_ldw                => 57;
use constant HPPA_ldwa               => 58;
use constant HPPA_lpa                => 59;
use constant HPPA_mfctl              => 60;
use constant HPPA_mfia               => 61;
use constant HPPA_mfsp               => 62;
use constant HPPA_mixh               => 63;
use constant HPPA_mixw               => 64;
use constant HPPA_movb               => 65;
use constant HPPA_movib              => 66;
use constant HPPA_mtctl              => 67;
use constant HPPA_mtsarcm            => 68;
use constant HPPA_mtsm               => 69;
use constant HPPA_mtsp               => 70;
use constant HPPA_or                 => 71;
use constant HPPA_pdc                => 72;
use constant HPPA_pdtlb              => 73;
use constant HPPA_pdtlbe             => 74;
use constant HPPA_permh              => 75;
use constant HPPA_pitlb              => 76;
use constant HPPA_pitlbe             => 77;
use constant HPPA_popbts             => 78;
use constant HPPA_probe              => 79;
use constant HPPA_probei             => 80;
use constant HPPA_pushbts            => 81;
use constant HPPA_pushnom            => 82;
use constant HPPA_rfi                => 83;
use constant HPPA_rsm                => 84;
use constant HPPA_shladd             => 85;
use constant HPPA_shrpd              => 86;
use constant HPPA_shrpw              => 87;
use constant HPPA_spop0              => 88;
use constant HPPA_spop1              => 89;
use constant HPPA_spop2              => 90;
use constant HPPA_spop3              => 91;
use constant HPPA_ssm                => 92;
use constant HPPA_stb                => 93;
use constant HPPA_stby               => 94;
use constant HPPA_std                => 95;
use constant HPPA_stda               => 96;
use constant HPPA_stdby              => 97;
use constant HPPA_sth                => 98;
use constant HPPA_stw                => 99;
use constant HPPA_stwa               => 100;
use constant HPPA_sub                => 101;
use constant HPPA_subi               => 102;
use constant HPPA_sync               => 103;
use constant HPPA_syncdma            => 104;
use constant HPPA_uaddcm             => 105;
use constant HPPA_uxor               => 106;
use constant HPPA_xor                => 107;
use constant HPPA_fabs               => 108;
use constant HPPA_fadd               => 109;
use constant HPPA_fcmp               => 110;
use constant HPPA_fcnv               => 111;
use constant HPPA_fcpy               => 112;
use constant HPPA_fdiv               => 113;
use constant HPPA_fid                => 114;
use constant HPPA_fldd               => 115;
use constant HPPA_fldw               => 116;
use constant HPPA_fmpy               => 117;
use constant HPPA_fmpyadd            => 118;
use constant HPPA_fmpyfadd           => 119;
use constant HPPA_fmpynfadd          => 120;
use constant HPPA_fmpysub            => 121;
use constant HPPA_fneg               => 122;
use constant HPPA_fnegabs            => 123;
use constant HPPA_frem               => 124;
use constant HPPA_frnd               => 125;
use constant HPPA_fsqrt              => 126;
use constant HPPA_fstd               => 127;
use constant HPPA_fstw               => 128;
use constant HPPA_fsub               => 129;
use constant HPPA_ftest              => 130;
use constant HPPA_xmpyu              => 131;
use constant HPPA_pmdis              => 132;
use constant HPPA_pmenb              => 133;
use constant HPPA_call               => 134;
use constant HPPA_ret                => 135;
use constant HPPA_shld               => 136;
use constant HPPA_shlw               => 137;
use constant HPPA_shrd               => 138;
use constant HPPA_shrw               => 139;
use constant HPPA_ldi                => 140;
use constant HPPA_copy               => 141;
use constant HPPA_mtsar              => 142;
use constant HPPA_nop                => 143;
use constant HPPA_last               => 144;
use constant H8500_null              => 0;
use constant H8500_mov_g             => 1;
use constant H8500_mov_e             => 2;
use constant H8500_mov_i             => 3;
use constant H8500_mov_f             => 4;
use constant H8500_mov_l             => 5;
use constant H8500_mov_s             => 6;
use constant H8500_ldm               => 7;
use constant H8500_stm               => 8;
use constant H8500_xch               => 9;
use constant H8500_swap              => 10;
use constant H8500_movtpe            => 11;
use constant H8500_movfpe            => 12;
use constant H8500_add_g             => 13;
use constant H8500_add_q             => 14;
use constant H8500_sub               => 15;
use constant H8500_adds              => 16;
use constant H8500_subs              => 17;
use constant H8500_addx              => 18;
use constant H8500_subx              => 19;
use constant H8500_dadd              => 20;
use constant H8500_dsub              => 21;
use constant H8500_mulxu             => 22;
use constant H8500_divxu             => 23;
use constant H8500_cmp_g             => 24;
use constant H8500_cmp_e             => 25;
use constant H8500_cmp_i             => 26;
use constant H8500_exts              => 27;
use constant H8500_extu              => 28;
use constant H8500_tst               => 29;
use constant H8500_neg               => 30;
use constant H8500_clr               => 31;
use constant H8500_tas               => 32;
use constant H8500_and               => 33;
use constant H8500_or                => 34;
use constant H8500_xor               => 35;
use constant H8500_not               => 36;
use constant H8500_shal              => 37;
use constant H8500_shar              => 38;
use constant H8500_shll              => 39;
use constant H8500_shlr              => 40;
use constant H8500_rotl              => 41;
use constant H8500_rotr              => 42;
use constant H8500_rotxl             => 43;
use constant H8500_rotxr             => 44;
use constant H8500_bset              => 45;
use constant H8500_bclr              => 46;
use constant H8500_bnot              => 47;
use constant H8500_btst              => 48;
use constant H8500_bra               => 49;
use constant H8500_brn               => 50;
use constant H8500_bhi               => 51;
use constant H8500_bls               => 52;
use constant H8500_bcc               => 53;
use constant H8500_bcs               => 54;
use constant H8500_bne               => 55;
use constant H8500_beq               => 56;
use constant H8500_bvc               => 57;
use constant H8500_bvs               => 58;
use constant H8500_bpl               => 59;
use constant H8500_bmi               => 60;
use constant H8500_bge               => 61;
use constant H8500_blt               => 62;
use constant H8500_bgt               => 63;
use constant H8500_ble               => 64;
use constant H8500_jmp               => 65;
use constant H8500_pjmp              => 66;
use constant H8500_bsr               => 67;
use constant H8500_jsr               => 68;
use constant H8500_pjsr              => 69;
use constant H8500_rts               => 70;
use constant H8500_prts              => 71;
use constant H8500_rtd               => 72;
use constant H8500_prtd              => 73;
use constant H8500_scb               => 74;
use constant H8500_trapa             => 75;
use constant H8500_trap_vs           => 76;
use constant H8500_rte               => 77;
use constant H8500_link              => 78;
use constant H8500_unlk              => 79;
use constant H8500_sleep             => 80;
use constant H8500_ldc               => 81;
use constant H8500_stc               => 82;
use constant H8500_andc              => 83;
use constant H8500_orc               => 84;
use constant H8500_xorc              => 85;
use constant H8500_nop               => 86;
use constant H8500_bpt               => 87;
use constant H8500_last              => 88;
use constant DSP56_null              => 0;
use constant DSP56_abs               => 1;
use constant DSP56_adc               => 2;
use constant DSP56_add               => 3;
use constant DSP56_addl              => 4;
use constant DSP56_addr              => 5;
use constant DSP56_and               => 6;
use constant DSP56_andi              => 7;
use constant DSP56_asl               => 8;
use constant DSP56_asl4              => 9;
use constant DSP56_asr               => 10;
use constant DSP56_asr4              => 11;
use constant DSP56_asr16             => 12;
use constant DSP56_bfchg             => 13;
use constant DSP56_bfclr             => 14;
use constant DSP56_bfset             => 15;
use constant DSP56_bftsth            => 16;
use constant DSP56_bftstl            => 17;
use constant DSP56_bcc               => 18;
use constant DSP56_bchg              => 19;
use constant DSP56_bclr              => 20;
use constant DSP56_bra               => 21;
use constant DSP56_brclr             => 22;
use constant DSP56_brkcc             => 23;
use constant DSP56_brset             => 24;
use constant DSP56_bscc              => 25;
use constant DSP56_bsclr             => 26;
use constant DSP56_bset              => 27;
use constant DSP56_bsr               => 28;
use constant DSP56_bsset             => 29;
use constant DSP56_btst              => 30;
use constant DSP56_chkaau            => 31;
use constant DSP56_clb               => 32;
use constant DSP56_clr               => 33;
use constant DSP56_clr24             => 34;
use constant DSP56_cmp               => 35;
use constant DSP56_cmpm              => 36;
use constant DSP56_cmpu              => 37;
use constant DSP56_debug             => 38;
use constant DSP56_debugcc           => 39;
use constant DSP56_dec               => 40;
use constant DSP56_dec24             => 41;
use constant DSP56_div               => 42;
use constant DSP56_dmac              => 43;
use constant DSP56_do                => 44;
use constant DSP56_do_f              => 45;
use constant DSP56_dor               => 46;
use constant DSP56_dor_f             => 47;
use constant DSP56_enddo             => 48;
use constant DSP56_eor               => 49;
use constant DSP56_extract           => 50;
use constant DSP56_extractu          => 51;
use constant DSP56_ext               => 52;
use constant DSP56_ill               => 53;
use constant DSP56_imac              => 54;
use constant DSP56_impy              => 55;
use constant DSP56_inc               => 56;
use constant DSP56_inc24             => 57;
use constant DSP56_insert            => 58;
use constant DSP56_jcc               => 59;
use constant DSP56_jclr              => 60;
use constant DSP56_jmp               => 61;
use constant DSP56_jscc              => 62;
use constant DSP56_jsclr             => 63;
use constant DSP56_jset              => 64;
use constant DSP56_jsr               => 65;
use constant DSP56_jsset             => 66;
use constant DSP56_lra               => 67;
use constant DSP56_lsl               => 68;
use constant DSP56_lsr               => 69;
use constant DSP56_lua               => 70;
use constant DSP56_lea               => 71;
use constant DSP56_mac               => 72;
use constant DSP56_maci              => 73;
use constant DSP56_mac_s_u           => 74;
use constant DSP56_macr              => 75;
use constant DSP56_macri             => 76;
use constant DSP56_max               => 77;
use constant DSP56_maxm              => 78;
use constant DSP56_merge             => 79;
use constant DSP56_move              => 80;
use constant DSP56_movec             => 81;
use constant DSP56_movei             => 82;
use constant DSP56_movem             => 83;
use constant DSP56_movep             => 84;
use constant DSP56_moves             => 85;
use constant DSP56_mpy               => 86;
use constant DSP56_mpyi              => 87;
use constant DSP56_mpy_s_u           => 88;
use constant DSP56_mpyr              => 89;
use constant DSP56_mpyri             => 90;
use constant DSP56_neg               => 91;
use constant DSP56_negc              => 92;
use constant DSP56_nop               => 93;
use constant DSP56_norm              => 94;
use constant DSP56_normf             => 95;
use constant DSP56_not               => 96;
use constant DSP56_or                => 97;
use constant DSP56_ori               => 98;
use constant DSP56_pflush            => 99;
use constant DSP56_pflushun          => 100;
use constant DSP56_pfree             => 101;
use constant DSP56_plock             => 102;
use constant DSP56_plockr            => 103;
use constant DSP56_punlock           => 104;
use constant DSP56_punlockr          => 105;
use constant DSP56_rep               => 106;
use constant DSP56_repcc             => 107;
use constant DSP56_reset             => 108;
use constant DSP56_rnd               => 109;
use constant DSP56_rol               => 110;
use constant DSP56_ror               => 111;
use constant DSP56_rti               => 112;
use constant DSP56_rts               => 113;
use constant DSP56_sbc               => 114;
use constant DSP56_stop              => 115;
use constant DSP56_sub               => 116;
use constant DSP56_subl              => 117;
use constant DSP56_subr              => 118;
use constant DSP56_swap              => 119;
use constant DSP56_tcc               => 120;
use constant DSP56_tfr               => 121;
use constant DSP56_tfr2              => 122;
use constant DSP56_tfr3              => 123;
use constant DSP56_trap              => 124;
use constant DSP56_trapcc            => 125;
use constant DSP56_tst               => 126;
use constant DSP56_tst2              => 127;
use constant DSP56_vsl               => 128;
use constant DSP56_wait              => 129;
use constant DSP56_zero              => 130;
use constant DSP56_swi               => 131;
use constant DSP56_pmov              => 132;
use constant DSP56_last              => 133;
use constant C166_null               => 0;
use constant C166_add                => 1;
use constant C166_addb               => 2;
use constant C166_addc               => 3;
use constant C166_addcb              => 4;
use constant C166_and                => 5;
use constant C166_andb               => 6;
use constant C166_ashr               => 7;
use constant C166_atomic             => 8;
use constant C166_band               => 9;
use constant C166_bclr               => 10;
use constant C166_bcmp               => 11;
use constant C166_bfldh              => 12;
use constant C166_bfldl              => 13;
use constant C166_bmov               => 14;
use constant C166_bmovn              => 15;
use constant C166_bor                => 16;
use constant C166_bset               => 17;
use constant C166_bxor               => 18;
use constant C166_calla              => 19;
use constant C166_calli              => 20;
use constant C166_callr              => 21;
use constant C166_calls              => 22;
use constant C166_cmp                => 23;
use constant C166_cmpb               => 24;
use constant C166_cmpd1              => 25;
use constant C166_cmpd2              => 26;
use constant C166_cmpi1              => 27;
use constant C166_cmpi2              => 28;
use constant C166_cpl                => 29;
use constant C166_cplb               => 30;
use constant C166_diswdt             => 31;
use constant C166_div                => 32;
use constant C166_divl               => 33;
use constant C166_divlu              => 34;
use constant C166_divu               => 35;
use constant C166_einit              => 36;
use constant C166_extr               => 37;
use constant C166_extp               => 38;
use constant C166_extpr              => 39;
use constant C166_exts               => 40;
use constant C166_extsr              => 41;
use constant C166_idle               => 42;
use constant C166_jb                 => 43;
use constant C166_jbc                => 44;
use constant C166_jmpa               => 45;
use constant C166_jmpi               => 46;
use constant C166_jmpr               => 47;
use constant C166_jmps               => 48;
use constant C166_jnb                => 49;
use constant C166_jnbs               => 50;
use constant C166_mov                => 51;
use constant C166_movb               => 52;
use constant C166_movbs              => 53;
use constant C166_movbz              => 54;
use constant C166_mul                => 55;
use constant C166_mulu               => 56;
use constant C166_neg                => 57;
use constant C166_negb               => 58;
use constant C166_nop                => 59;
use constant C166_or                 => 60;
use constant C166_orb                => 61;
use constant C166_pcall              => 62;
use constant C166_pop                => 63;
use constant C166_prior              => 64;
use constant C166_push               => 65;
use constant C166_pwrdn              => 66;
use constant C166_ret                => 67;
use constant C166_reti               => 68;
use constant C166_retp               => 69;
use constant C166_rets               => 70;
use constant C166_rol                => 71;
use constant C166_ror                => 72;
use constant C166_scxt               => 73;
use constant C166_shl                => 74;
use constant C166_shr                => 75;
use constant C166_srst               => 76;
use constant C166_srvwdt             => 77;
use constant C166_sub                => 78;
use constant C166_subb               => 79;
use constant C166_subc               => 80;
use constant C166_subcb              => 81;
use constant C166_trap               => 82;
use constant C166_xor                => 83;
use constant C166_xorb               => 84;
use constant ST10_CoABS              => 85;
use constant ST10_CoADD              => 86;
use constant ST10_CoASHR             => 87;
use constant ST10_CoCMP              => 88;
use constant ST10_CoLOAD             => 89;
use constant ST10_CoMAC              => 90;
use constant ST10_CoMACM             => 91;
use constant ST10_CoMAX              => 92;
use constant ST10_CoMIN              => 93;
use constant ST10_CoMOV              => 94;
use constant ST10_CoMUL              => 95;
use constant ST10_CoNEG              => 96;
use constant ST10_CoNOP              => 97;
use constant ST10_CoRND              => 98;
use constant ST10_CoSHL              => 99;
use constant ST10_CoSHR              => 100;
use constant ST10_CoSTORE            => 101;
use constant ST10_CoSUB              => 102;
use constant C166_last               => 103;
use constant ST20_null               => 0;
use constant ST20_adc                => 1;
use constant ST20_add                => 2;
use constant ST20_addc               => 3;
use constant ST20_ajw                => 4;
use constant ST20_and                => 5;
use constant ST20_arot               => 6;
use constant ST20_ashr               => 7;
use constant ST20_biquad             => 8;
use constant ST20_bitld              => 9;
use constant ST20_bitmask            => 10;
use constant ST20_bitst              => 11;
use constant ST20_breakpoint         => 12;
use constant ST20_cj                 => 13;
use constant ST20_dequeue            => 14;
use constant ST20_divstep            => 15;
use constant ST20_dup                => 16;
use constant ST20_ecall              => 17;
use constant ST20_enqueue            => 18;
use constant ST20_eqc                => 19;
use constant ST20_eret               => 20;
use constant ST20_fcall              => 21;
use constant ST20_gajw               => 22;
use constant ST20_gt                 => 23;
use constant ST20_gtu                => 24;
use constant ST20_io                 => 25;
use constant ST20_j                  => 26;
use constant ST20_jab                => 27;
use constant ST20_lbinc              => 28;
use constant ST20_ldc                => 29;
use constant ST20_ldl                => 30;
use constant ST20_ldlp               => 31;
use constant ST20_ldnl               => 32;
use constant ST20_ldnlp              => 33;
use constant ST20_ldpi               => 34;
use constant ST20_ldprodid           => 35;
use constant ST20_ldtdesc            => 36;
use constant ST20_lsinc              => 37;
use constant ST20_lsxinc             => 38;
use constant ST20_lwinc              => 39;
use constant ST20_mac                => 40;
use constant ST20_mul                => 41;
use constant ST20_nfix               => 42;
use constant ST20_nop                => 43;
use constant ST20_not                => 44;
use constant ST20_opr                => 45;
use constant ST20_or                 => 46;
use constant ST20_order              => 47;
use constant ST20_orderu             => 48;
use constant ST20_pfix               => 49;
use constant ST20_rev                => 50;
use constant ST20_rmw                => 51;
use constant ST20_rot                => 52;
use constant ST20_run                => 53;
use constant ST20_saturate           => 54;
use constant ST20_sbinc              => 55;
use constant ST20_shl                => 56;
use constant ST20_shr                => 57;
use constant ST20_signal             => 58;
use constant ST20_smacinit           => 59;
use constant ST20_smacloop           => 60;
use constant ST20_smul               => 61;
use constant ST20_ssinc              => 62;
use constant ST20_statusclr          => 63;
use constant ST20_statusset          => 64;
use constant ST20_statustst          => 65;
use constant ST20_stl                => 66;
use constant ST20_stnl               => 67;
use constant ST20_stop               => 68;
use constant ST20_sub                => 69;
use constant ST20_subc               => 70;
use constant ST20_swap32             => 71;
use constant ST20_swinc              => 72;
use constant ST20_timeslice          => 73;
use constant ST20_umac               => 74;
use constant ST20_unsign             => 75;
use constant ST20_wait               => 76;
use constant ST20_wsub               => 77;
use constant ST20_xbword             => 78;
use constant ST20_xor                => 79;
use constant ST20_xsword             => 80;
use constant ST20_alt                => 81;
use constant ST20_altend             => 82;
use constant ST20_altwt              => 83;
use constant ST20_bcnt               => 84;
use constant ST20_bitcnt             => 85;
use constant ST20_bitrevnbits        => 86;
use constant ST20_bitrevword         => 87;
use constant ST20_bsub               => 88;
use constant ST20_call               => 89;
use constant ST20_causeerror         => 90;
use constant ST20_cb                 => 91;
use constant ST20_cbu                => 92;
use constant ST20_ccnt1              => 93;
use constant ST20_cflerr             => 94;
use constant ST20_cir                => 95;
use constant ST20_ciru               => 96;
use constant ST20_clockdis           => 97;
use constant ST20_clockenb           => 98;
use constant ST20_clrhalterr         => 99;
use constant ST20_crcbyte            => 100;
use constant ST20_crcword            => 101;
use constant ST20_cs                 => 102;
use constant ST20_csngl              => 103;
use constant ST20_csu                => 104;
use constant ST20_csub0              => 105;
use constant ST20_cword              => 106;
use constant ST20_devlb              => 107;
use constant ST20_devls              => 108;
use constant ST20_devlw              => 109;
use constant ST20_devmove            => 110;
use constant ST20_devsb              => 111;
use constant ST20_devss              => 112;
use constant ST20_devsw              => 113;
use constant ST20_diff               => 114;
use constant ST20_disc               => 115;
use constant ST20_diss               => 116;
use constant ST20_dist               => 117;
use constant ST20_div                => 118;
use constant ST20_enbc               => 119;
use constant ST20_enbs               => 120;
use constant ST20_enbt               => 121;
use constant ST20_endp               => 122;
use constant ST20_fmul               => 123;
use constant ST20_fptesterr          => 124;
use constant ST20_gcall              => 125;
use constant ST20_gintdis            => 126;
use constant ST20_gintenb            => 127;
use constant ST20_in                 => 128;
use constant ST20_insertqueue        => 129;
use constant ST20_intdis             => 130;
use constant ST20_intenb             => 131;
use constant ST20_iret               => 132;
use constant ST20_ladd               => 133;
use constant ST20_lb                 => 134;
use constant ST20_lbx                => 135;
use constant ST20_ldclock            => 136;
use constant ST20_lddevid            => 137;
use constant ST20_ldiff              => 138;
use constant ST20_ldinf              => 139;
use constant ST20_ldiv               => 140;
use constant ST20_ldmemstartval      => 141;
use constant ST20_ldpri              => 142;
use constant ST20_ldshadow           => 143;
use constant ST20_ldtimer            => 144;
use constant ST20_ldtraph            => 145;
use constant ST20_ldtrapped          => 146;
use constant ST20_lend               => 147;
use constant ST20_lmul               => 148;
use constant ST20_ls                 => 149;
use constant ST20_lshl               => 150;
use constant ST20_lshr               => 151;
use constant ST20_lsub               => 152;
use constant ST20_lsum               => 153;
use constant ST20_lsx                => 154;
use constant ST20_mint               => 155;
use constant ST20_move               => 156;
use constant ST20_move2dall          => 157;
use constant ST20_move2dinit         => 158;
use constant ST20_move2dnonzero      => 159;
use constant ST20_move2dzero         => 160;
use constant ST20_norm               => 161;
use constant ST20_out                => 162;
use constant ST20_outbyte            => 163;
use constant ST20_outword            => 164;
use constant ST20_pop                => 165;
use constant ST20_postnormsn         => 166;
use constant ST20_prod               => 167;
use constant ST20_reboot             => 168;
use constant ST20_rem                => 169;
use constant ST20_resetch            => 170;
use constant ST20_restart            => 171;
use constant ST20_ret                => 172;
use constant ST20_roundsn            => 173;
use constant ST20_runp               => 174;
use constant ST20_satadd             => 175;
use constant ST20_satmul             => 176;
use constant ST20_satsub             => 177;
use constant ST20_saveh              => 178;
use constant ST20_savel              => 179;
use constant ST20_sb                 => 180;
use constant ST20_seterr             => 181;
use constant ST20_sethalterr         => 182;
use constant ST20_settimeslice       => 183;
use constant ST20_slmul              => 184;
use constant ST20_ss                 => 185;
use constant ST20_ssub               => 186;
use constant ST20_startp             => 187;
use constant ST20_stclock            => 188;
use constant ST20_sthb               => 189;
use constant ST20_sthf               => 190;
use constant ST20_stlb               => 191;
use constant ST20_stlf               => 192;
use constant ST20_stoperr            => 193;
use constant ST20_stopp              => 194;
use constant ST20_stshadow           => 195;
use constant ST20_sttimer            => 196;
use constant ST20_sttraph            => 197;
use constant ST20_sttrapped          => 198;
use constant ST20_sulmul             => 199;
use constant ST20_sum                => 200;
use constant ST20_swapqueue          => 201;
use constant ST20_swaptimer          => 202;
use constant ST20_talt               => 203;
use constant ST20_taltwt             => 204;
use constant ST20_testerr            => 205;
use constant ST20_testhalterr        => 206;
use constant ST20_testpranal         => 207;
use constant ST20_tin                => 208;
use constant ST20_trapdis            => 209;
use constant ST20_trapenb            => 210;
use constant ST20_tret               => 211;
use constant ST20_unpacksn           => 212;
use constant ST20_wcnt               => 213;
use constant ST20_wsubdb             => 214;
use constant ST20_xdble              => 215;
use constant ST20_xword              => 216;
use constant ST20_last               => 217;
use constant ST7_null                => 0;
use constant ST7_adc                 => 1;
use constant ST7_add                 => 2;
use constant ST7_and                 => 3;
use constant ST7_bcp                 => 4;
use constant ST7_bres                => 5;
use constant ST7_bset                => 6;
use constant ST7_btjf                => 7;
use constant ST7_btjt                => 8;
use constant ST7_call                => 9;
use constant ST7_callr               => 10;
use constant ST7_clr                 => 11;
use constant ST7_cp                  => 12;
use constant ST7_cpl                 => 13;
use constant ST7_dec                 => 14;
use constant ST7_halt                => 15;
use constant ST7_iret                => 16;
use constant ST7_inc                 => 17;
use constant ST7_jp                  => 18;
use constant ST7_jra                 => 19;
use constant ST7_jrt                 => 20;
use constant ST7_jrf                 => 21;
use constant ST7_jrih                => 22;
use constant ST7_jril                => 23;
use constant ST7_jrh                 => 24;
use constant ST7_jrnh                => 25;
use constant ST7_jrm                 => 26;
use constant ST7_jrnm                => 27;
use constant ST7_jrmi                => 28;
use constant ST7_jrpl                => 29;
use constant ST7_jreq                => 30;
use constant ST7_jrne                => 31;
use constant ST7_jrc                 => 32;
use constant ST7_jrnc                => 33;
use constant ST7_jrult               => 34;
use constant ST7_jruge               => 35;
use constant ST7_jrugt               => 36;
use constant ST7_jrule               => 37;
use constant ST7_ld                  => 38;
use constant ST7_mul                 => 39;
use constant ST7_neg                 => 40;
use constant ST7_nop                 => 41;
use constant ST7_or                  => 42;
use constant ST7_pop                 => 43;
use constant ST7_push                => 44;
use constant ST7_rcf                 => 45;
use constant ST7_ret                 => 46;
use constant ST7_rim                 => 47;
use constant ST7_rlc                 => 48;
use constant ST7_rrc                 => 49;
use constant ST7_rsp                 => 50;
use constant ST7_sbc                 => 51;
use constant ST7_scf                 => 52;
use constant ST7_sim                 => 53;
use constant ST7_sla                 => 54;
use constant ST7_sll                 => 55;
use constant ST7_srl                 => 56;
use constant ST7_sra                 => 57;
use constant ST7_sub                 => 58;
use constant ST7_swap                => 59;
use constant ST7_tnz                 => 60;
use constant ST7_trap                => 61;
use constant ST7_wfi                 => 62;
use constant ST7_xor                 => 63;
use constant ST7_last                => 64;
use constant IA64_null               => 1;
use constant IA64_0                  => 2;
use constant IA64_1                  => 3;
use constant IA64_a                  => 4;
use constant IA64_acq                => 5;
use constant IA64_add                => 6;
use constant IA64_addl               => 7;
use constant IA64_addp4              => 8;
use constant IA64_adds               => 9;
use constant IA64_alloc              => 10;
use constant IA64_and                => 11;
use constant IA64_andcm              => 12;
use constant IA64_b                  => 13;
use constant IA64_bias               => 14;
use constant IA64_br                 => 15;
use constant IA64_break              => 16;
use constant IA64_brl                => 17;
use constant IA64_brp                => 18;
use constant IA64_bsw                => 19;
use constant IA64_c                  => 20;
use constant IA64_call               => 21;
use constant IA64_cexit              => 22;
use constant IA64_chk                => 23;
use constant IA64_cloop              => 24;
use constant IA64_clr                => 25;
use constant IA64_clrrrb             => 26;
use constant IA64_cmp                => 27;
use constant IA64_cmp4               => 28;
use constant IA64_cmpxchg1           => 29;
use constant IA64_cmpxchg2           => 30;
use constant IA64_cmpxchg4           => 31;
use constant IA64_cmpxchg8           => 32;
use constant IA64_cond               => 33;
use constant IA64_cover              => 34;
use constant IA64_ctop               => 35;
use constant IA64_czx1               => 36;
use constant IA64_czx2               => 37;
use constant IA64_d                  => 38;
use constant IA64_dep                => 39;
use constant IA64_dpnt               => 40;
use constant IA64_dptk               => 41;
use constant IA64_e                  => 42;
use constant IA64_epc                => 43;
use constant IA64_eq                 => 44;
use constant IA64_excl               => 45;
use constant IA64_exit               => 46;
use constant IA64_exp                => 47;
use constant IA64_extr               => 48;
use constant IA64_f                  => 49;
use constant IA64_fabs               => 50;
use constant IA64_fadd               => 51;
use constant IA64_famax              => 52;
use constant IA64_famin              => 53;
use constant IA64_fand               => 54;
use constant IA64_fandcm             => 55;
use constant IA64_fault              => 56;
use constant IA64_fc                 => 57;
use constant IA64_fchkf              => 58;
use constant IA64_fclass             => 59;
use constant IA64_fclrf              => 60;
use constant IA64_fcmp               => 61;
use constant IA64_fcvt               => 62;
use constant IA64_fetchadd4          => 63;
use constant IA64_fetchadd8          => 64;
use constant IA64_few                => 65;
use constant IA64_fill               => 66;
use constant IA64_flushrs            => 67;
use constant IA64_fma                => 68;
use constant IA64_fmax               => 69;
use constant IA64_fmerge             => 70;
use constant IA64_fmin               => 71;
use constant IA64_fmix               => 72;
use constant IA64_fmpy               => 73;
use constant IA64_fms                => 74;
use constant IA64_fneg               => 75;
use constant IA64_fnegabs            => 76;
use constant IA64_fnma               => 77;
use constant IA64_fnmpy              => 78;
use constant IA64_fnorm              => 79;
use constant IA64_for                => 80;
use constant IA64_fpabs              => 81;
use constant IA64_fpack              => 82;
use constant IA64_fpamax             => 83;
use constant IA64_fpamin             => 84;
use constant IA64_fpcmp              => 85;
use constant IA64_fpcvt              => 86;
use constant IA64_fpma               => 87;
use constant IA64_fpmax              => 88;
use constant IA64_fpmerge            => 89;
use constant IA64_fpmin              => 90;
use constant IA64_fpmpy              => 91;
use constant IA64_fpms               => 92;
use constant IA64_fpneg              => 93;
use constant IA64_fpnegabs           => 94;
use constant IA64_fpnma              => 95;
use constant IA64_fpnmpy             => 96;
use constant IA64_fprcpa             => 97;
use constant IA64_fprsqrta           => 98;
use constant IA64_frcpa              => 99;
use constant IA64_frsqrta            => 100;
use constant IA64_fselect            => 101;
use constant IA64_fsetc              => 102;
use constant IA64_fsub               => 103;
use constant IA64_fswap              => 104;
use constant IA64_fsxt               => 105;
use constant IA64_fwb                => 106;
use constant IA64_fx                 => 107;
use constant IA64_fxor               => 108;
use constant IA64_fxu                => 109;
use constant IA64_g                  => 110;
use constant IA64_ga                 => 111;
use constant IA64_ge                 => 112;
use constant IA64_getf               => 113;
use constant IA64_geu                => 114;
use constant IA64_gt                 => 115;
use constant IA64_gtu                => 116;
use constant IA64_h                  => 117;
use constant IA64_hu                 => 118;
use constant IA64_i                  => 119;
use constant IA64_ia                 => 120;
use constant IA64_imp                => 121;
use constant IA64_invala             => 122;
use constant IA64_itc                => 123;
use constant IA64_itr                => 124;
use constant IA64_l                  => 125;
use constant IA64_ld1                => 126;
use constant IA64_ld2                => 127;
use constant IA64_ld4                => 128;
use constant IA64_ld8                => 129;
use constant IA64_ldf                => 130;
use constant IA64_ldf8               => 131;
use constant IA64_ldfd               => 132;
use constant IA64_ldfe               => 133;
use constant IA64_ldfp8              => 134;
use constant IA64_ldfpd              => 135;
use constant IA64_ldfps              => 136;
use constant IA64_ldfs               => 137;
use constant IA64_le                 => 138;
use constant IA64_leu                => 139;
use constant IA64_lfetch             => 140;
use constant IA64_loadrs             => 141;
use constant IA64_loop               => 142;
use constant IA64_lr                 => 143;
use constant IA64_lt                 => 144;
use constant IA64_ltu                => 145;
use constant IA64_lu                 => 146;
use constant IA64_m                  => 147;
use constant IA64_many               => 148;
use constant IA64_mf                 => 149;
use constant IA64_mix1               => 150;
use constant IA64_mix2               => 151;
use constant IA64_mix4               => 152;
use constant IA64_mov                => 153;
use constant IA64_movl               => 154;
use constant IA64_mux1               => 155;
use constant IA64_mux2               => 156;
use constant IA64_nc                 => 157;
use constant IA64_ne                 => 158;
use constant IA64_neq                => 159;
use constant IA64_nge                => 160;
use constant IA64_ngt                => 161;
use constant IA64_nl                 => 162;
use constant IA64_nle                => 163;
use constant IA64_nlt                => 164;
use constant IA64_nm                 => 165;
use constant IA64_nop                => 166;
use constant IA64_nr                 => 167;
use constant IA64_ns                 => 168;
use constant IA64_nt1                => 169;
use constant IA64_nt2                => 170;
use constant IA64_nta                => 171;
use constant IA64_nz                 => 172;
use constant IA64_or                 => 173;
use constant IA64_orcm               => 174;
use constant IA64_ord                => 175;
use constant IA64_pack2              => 176;
use constant IA64_pack4              => 177;
use constant IA64_padd1              => 178;
use constant IA64_padd2              => 179;
use constant IA64_padd4              => 180;
use constant IA64_pavg1              => 181;
use constant IA64_pavg2              => 182;
use constant IA64_pavgsub1           => 183;
use constant IA64_pavgsub2           => 184;
use constant IA64_pcmp1              => 185;
use constant IA64_pcmp2              => 186;
use constant IA64_pcmp4              => 187;
use constant IA64_pmax1              => 188;
use constant IA64_pmax2              => 189;
use constant IA64_pmin1              => 190;
use constant IA64_pmin2              => 191;
use constant IA64_pmpy2              => 192;
use constant IA64_pmpyshr2           => 193;
use constant IA64_popcnt             => 194;
use constant IA64_pr                 => 195;
use constant IA64_probe              => 196;
use constant IA64_psad1              => 197;
use constant IA64_pshl2              => 198;
use constant IA64_pshl4              => 199;
use constant IA64_pshladd2           => 200;
use constant IA64_pshr2              => 201;
use constant IA64_pshr4              => 202;
use constant IA64_pshradd2           => 203;
use constant IA64_psub1              => 204;
use constant IA64_psub2              => 205;
use constant IA64_psub4              => 206;
use constant IA64_ptc                => 207;
use constant IA64_ptr                => 208;
use constant IA64_r                  => 209;
use constant IA64_raz                => 210;
use constant IA64_rel                => 211;
use constant IA64_ret                => 212;
use constant IA64_rfi                => 213;
use constant IA64_rsm                => 214;
use constant IA64_rum                => 215;
use constant IA64_rw                 => 216;
use constant IA64_s                  => 217;
use constant IA64_s0                 => 218;
use constant IA64_s1                 => 219;
use constant IA64_s2                 => 220;
use constant IA64_s3                 => 221;
use constant IA64_sa                 => 222;
use constant IA64_se                 => 223;
use constant IA64_setf               => 224;
use constant IA64_shl                => 225;
use constant IA64_shladd             => 226;
use constant IA64_shladdp4           => 227;
use constant IA64_shr                => 228;
use constant IA64_shrp               => 229;
use constant IA64_sig                => 230;
use constant IA64_spill              => 231;
use constant IA64_spnt               => 232;
use constant IA64_sptk               => 233;
use constant IA64_srlz               => 234;
use constant IA64_ssm                => 235;
use constant IA64_sss                => 236;
use constant IA64_st1                => 237;
use constant IA64_st2                => 238;
use constant IA64_st4                => 239;
use constant IA64_st8                => 240;
use constant IA64_stf                => 241;
use constant IA64_stf8               => 242;
use constant IA64_stfd               => 243;
use constant IA64_stfe               => 244;
use constant IA64_stfs               => 245;
use constant IA64_sub                => 246;
use constant IA64_sum                => 247;
use constant IA64_sxt1               => 248;
use constant IA64_sxt2               => 249;
use constant IA64_sxt4               => 250;
use constant IA64_sync               => 251;
use constant IA64_tak                => 252;
use constant IA64_tbit               => 253;
use constant IA64_thash              => 254;
use constant IA64_tnat               => 255;
use constant IA64_tpa                => 256;
use constant IA64_trunc              => 257;
use constant IA64_ttag               => 258;
use constant IA64_u                  => 259;
use constant IA64_unc                => 260;
use constant IA64_unord              => 261;
use constant IA64_unpack1            => 262;
use constant IA64_unpack2            => 263;
use constant IA64_unpack4            => 264;
use constant IA64_uss                => 265;
use constant IA64_uus                => 266;
use constant IA64_uuu                => 267;
use constant IA64_w                  => 268;
use constant IA64_wexit              => 269;
use constant IA64_wtop               => 270;
use constant IA64_x                  => 271;
use constant IA64_xchg1              => 272;
use constant IA64_xchg2              => 273;
use constant IA64_xchg4              => 274;
use constant IA64_xchg8              => 275;
use constant IA64_xf                 => 276;
use constant IA64_xma                => 277;
use constant IA64_xmpy               => 278;
use constant IA64_xor                => 279;
use constant IA64_xuf                => 280;
use constant IA64_z                  => 281;
use constant IA64_zxt1               => 282;
use constant IA64_zxt2               => 283;
use constant IA64_zxt4               => 284;
use constant IA64_last               => 285;
use constant NET_null                => 0;
use constant NET_add                 => 1;
use constant NET_add_ovf             => 2;
use constant NET_add_ovf_un          => 3;
use constant NET_and                 => 4;
use constant NET_ann_arg             => 5;
use constant NET_ann_call            => 6;
use constant NET_ann_catch           => 7;
use constant NET_ann_data            => 8;
use constant NET_ann_data_s          => 9;
use constant NET_ann_dead            => 10;
use constant NET_ann_def             => 11;
use constant NET_ann_hoisted         => 12;
use constant NET_ann_hoisted_call    => 13;
use constant NET_ann_lab             => 14;
use constant NET_ann_live            => 15;
use constant NET_ann_phi             => 16;
use constant NET_ann_ref             => 17;
use constant NET_ann_ref_s           => 18;
use constant NET_arglist             => 19;
use constant NET_beq                 => 20;
use constant NET_beq_s               => 21;
use constant NET_bge                 => 22;
use constant NET_bge_s               => 23;
use constant NET_bge_un              => 24;
use constant NET_bge_un_s            => 25;
use constant NET_bgt                 => 26;
use constant NET_bgt_s               => 27;
use constant NET_bgt_un              => 28;
use constant NET_bgt_un_s            => 29;
use constant NET_ble                 => 30;
use constant NET_ble_s               => 31;
use constant NET_ble_un              => 32;
use constant NET_ble_un_s            => 33;
use constant NET_blt                 => 34;
use constant NET_blt_s               => 35;
use constant NET_blt_un              => 36;
use constant NET_blt_un_s            => 37;
use constant NET_bne_un              => 38;
use constant NET_bne_un_s            => 39;
use constant NET_box                 => 40;
use constant NET_br                  => 41;
use constant NET_br_s                => 42;
use constant NET_break               => 43;
use constant NET_brfalse             => 44;
use constant NET_brfalse_s           => 45;
use constant NET_brtrue              => 46;
use constant NET_brtrue_s            => 47;
use constant NET_call                => 48;
use constant NET_calli               => 49;
use constant NET_callvirt            => 50;
use constant NET_castclass           => 51;
use constant NET_ceq                 => 52;
use constant NET_cgt                 => 53;
use constant NET_cgt_un              => 54;
use constant NET_ckfinite            => 55;
use constant NET_clt                 => 56;
use constant NET_clt_un              => 57;
use constant NET_conv_i              => 58;
use constant NET_conv_i1             => 59;
use constant NET_conv_i2             => 60;
use constant NET_conv_i4             => 61;
use constant NET_conv_i8             => 62;
use constant NET_conv_ovf_i          => 63;
use constant NET_conv_ovf_i1         => 64;
use constant NET_conv_ovf_i1_un      => 65;
use constant NET_conv_ovf_i2         => 66;
use constant NET_conv_ovf_i2_un      => 67;
use constant NET_conv_ovf_i4         => 68;
use constant NET_conv_ovf_i4_un      => 69;
use constant NET_conv_ovf_i8         => 70;
use constant NET_conv_ovf_i8_un      => 71;
use constant NET_conv_ovf_i_un       => 72;
use constant NET_conv_ovf_u          => 73;
use constant NET_conv_ovf_u1         => 74;
use constant NET_conv_ovf_u1_un      => 75;
use constant NET_conv_ovf_u2         => 76;
use constant NET_conv_ovf_u2_un      => 77;
use constant NET_conv_ovf_u4         => 78;
use constant NET_conv_ovf_u4_un      => 79;
use constant NET_conv_ovf_u8         => 80;
use constant NET_conv_ovf_u8_un      => 81;
use constant NET_conv_ovf_u_un       => 82;
use constant NET_conv_r4             => 83;
use constant NET_conv_r8             => 84;
use constant NET_conv_r_un           => 85;
use constant NET_conv_u              => 86;
use constant NET_conv_u1             => 87;
use constant NET_conv_u2             => 88;
use constant NET_conv_u4             => 89;
use constant NET_conv_u8             => 90;
use constant NET_cpblk               => 91;
use constant NET_cpobj               => 92;
use constant NET_div                 => 93;
use constant NET_div_un              => 94;
use constant NET_dup                 => 95;
use constant NET_endfilter           => 96;
use constant NET_endfinally          => 97;
use constant NET_initblk             => 98;
use constant NET_initobj             => 99;
use constant NET_isinst              => 100;
use constant NET_jmp                 => 101;
use constant NET_ldarg               => 102;
use constant NET_ldarg_0             => 103;
use constant NET_ldarg_1             => 104;
use constant NET_ldarg_2             => 105;
use constant NET_ldarg_3             => 106;
use constant NET_ldarg_s             => 107;
use constant NET_ldarga              => 108;
use constant NET_ldarga_s            => 109;
use constant NET_ldc_i4              => 110;
use constant NET_ldc_i4_0            => 111;
use constant NET_ldc_i4_1            => 112;
use constant NET_ldc_i4_2            => 113;
use constant NET_ldc_i4_3            => 114;
use constant NET_ldc_i4_4            => 115;
use constant NET_ldc_i4_5            => 116;
use constant NET_ldc_i4_6            => 117;
use constant NET_ldc_i4_7            => 118;
use constant NET_ldc_i4_8            => 119;
use constant NET_ldc_i4_m1           => 120;
use constant NET_ldc_i4_s            => 121;
use constant NET_ldc_i8              => 122;
use constant NET_ldc_r4              => 123;
use constant NET_ldc_r8              => 124;
use constant NET_ldelem_i            => 125;
use constant NET_ldelem_i1           => 126;
use constant NET_ldelem_i2           => 127;
use constant NET_ldelem_i4           => 128;
use constant NET_ldelem_i8           => 129;
use constant NET_ldelem_r4           => 130;
use constant NET_ldelem_r8           => 131;
use constant NET_ldelem_ref          => 132;
use constant NET_ldelem_u1           => 133;
use constant NET_ldelem_u2           => 134;
use constant NET_ldelem_u4           => 135;
use constant NET_ldelema             => 136;
use constant NET_ldfld               => 137;
use constant NET_ldflda              => 138;
use constant NET_ldftn               => 139;
use constant NET_ldind_i             => 140;
use constant NET_ldind_i1            => 141;
use constant NET_ldind_i2            => 142;
use constant NET_ldind_i4            => 143;
use constant NET_ldind_i8            => 144;
use constant NET_ldind_r4            => 145;
use constant NET_ldind_r8            => 146;
use constant NET_ldind_ref           => 147;
use constant NET_ldind_u1            => 148;
use constant NET_ldind_u2            => 149;
use constant NET_ldind_u4            => 150;
use constant NET_ldlen               => 151;
use constant NET_ldloc               => 152;
use constant NET_ldloc_0             => 153;
use constant NET_ldloc_1             => 154;
use constant NET_ldloc_2             => 155;
use constant NET_ldloc_3             => 156;
use constant NET_ldloc_s             => 157;
use constant NET_ldloca              => 158;
use constant NET_ldloca_s            => 159;
use constant NET_ldnull              => 160;
use constant NET_ldobj               => 161;
use constant NET_ldsfld              => 162;
use constant NET_ldsflda             => 163;
use constant NET_ldstr               => 164;
use constant NET_ldtoken             => 165;
use constant NET_ldvirtftn           => 166;
use constant NET_leave               => 167;
use constant NET_leave_s             => 168;
use constant NET_localloc            => 169;
use constant NET_mkrefany            => 170;
use constant NET_mul                 => 171;
use constant NET_mul_ovf             => 172;
use constant NET_mul_ovf_un          => 173;
use constant NET_neg                 => 174;
use constant NET_newarr              => 175;
use constant NET_newobj              => 176;
use constant NET_nop                 => 177;
use constant NET_not                 => 178;
use constant NET_or                  => 179;
use constant NET_pop                 => 180;
use constant NET_refanytype          => 181;
use constant NET_refanyval           => 182;
use constant NET_rem                 => 183;
use constant NET_rem_un              => 184;
use constant NET_ret                 => 185;
use constant NET_rethrow             => 186;
use constant NET_shl                 => 187;
use constant NET_shr                 => 188;
use constant NET_shr_un              => 189;
use constant NET_sizeof              => 190;
use constant NET_starg               => 191;
use constant NET_starg_s             => 192;
use constant NET_stelem_i            => 193;
use constant NET_stelem_i1           => 194;
use constant NET_stelem_i2           => 195;
use constant NET_stelem_i4           => 196;
use constant NET_stelem_i8           => 197;
use constant NET_stelem_r4           => 198;
use constant NET_stelem_r8           => 199;
use constant NET_stelem_ref          => 200;
use constant NET_stfld               => 201;
use constant NET_stind_i             => 202;
use constant NET_stind_i1            => 203;
use constant NET_stind_i2            => 204;
use constant NET_stind_i4            => 205;
use constant NET_stind_i8            => 206;
use constant NET_stind_r4            => 207;
use constant NET_stind_r8            => 208;
use constant NET_stind_ref           => 209;
use constant NET_stloc               => 210;
use constant NET_stloc_0             => 211;
use constant NET_stloc_1             => 212;
use constant NET_stloc_2             => 213;
use constant NET_stloc_3             => 214;
use constant NET_stloc_s             => 215;
use constant NET_stobj               => 216;
use constant NET_stsfld              => 217;
use constant NET_sub                 => 218;
use constant NET_sub_ovf             => 219;
use constant NET_sub_ovf_un          => 220;
use constant NET_switch              => 221;
use constant NET_tail_               => 222;
use constant NET_throw               => 223;
use constant NET_unaligned_          => 224;
use constant NET_unbox               => 225;
use constant NET_volatile_           => 226;
use constant NET_xor                 => 227;
use constant NET_ldelem              => 228;
use constant NET_stelem              => 229;
use constant NET_unbox_any           => 230;
use constant NET_constrained_        => 231;
use constant NET_no_                 => 232;
use constant NET_readonly_           => 233;
use constant NET_last                => 234;
use constant MC12_null               => 0;
use constant MC12_aba                => 1;
use constant MC12_abx                => 2;
use constant MC12_aby                => 3;
use constant MC12_adca               => 4;
use constant MC12_adcb               => 5;
use constant MC12_adda               => 6;
use constant MC12_addb               => 7;
use constant MC12_addd               => 8;
use constant MC12_anda               => 9;
use constant MC12_andb               => 10;
use constant MC12_andcc              => 11;
use constant MC12_asl                => 12;
use constant MC12_asla               => 13;
use constant MC12_aslb               => 14;
use constant MC12_asld               => 15;
use constant MC12_asr                => 16;
use constant MC12_asra               => 17;
use constant MC12_asrb               => 18;
use constant MC12_bcc                => 19;
use constant MC12_bclr               => 20;
use constant MC12_bcs                => 21;
use constant MC12_beq                => 22;
use constant MC12_bge                => 23;
use constant MC12_bgnd               => 24;
use constant MC12_bgt                => 25;
use constant MC12_bhi                => 26;
use constant MC12_bhs                => 27;
use constant MC12_bita               => 28;
use constant MC12_bitb               => 29;
use constant MC12_ble                => 30;
use constant MC12_blo                => 31;
use constant MC12_bls                => 32;
use constant MC12_blt                => 33;
use constant MC12_bmi                => 34;
use constant MC12_bne                => 35;
use constant MC12_bpl                => 36;
use constant MC12_bra                => 37;
use constant MC12_brclr              => 38;
use constant MC12_brn                => 39;
use constant MC12_brset              => 40;
use constant MC12_bset               => 41;
use constant MC12_bsr                => 42;
use constant MC12_bvc                => 43;
use constant MC12_bvs                => 44;
use constant MC12_call               => 45;
use constant MC12_cba                => 46;
use constant MC12_clc                => 47;
use constant MC12_cli                => 48;
use constant MC12_clr                => 49;
use constant MC12_clra               => 50;
use constant MC12_clrb               => 51;
use constant MC12_clv                => 52;
use constant MC12_cmpa               => 53;
use constant MC12_cmpb               => 54;
use constant MC12_com                => 55;
use constant MC12_coma               => 56;
use constant MC12_comb               => 57;
use constant MC12_cpd                => 58;
use constant MC12_cps                => 59;
use constant MC12_cpx                => 60;
use constant MC12_cpy                => 61;
use constant MC12_daa                => 62;
use constant MC12_dbeq               => 63;
use constant MC12_dbne               => 64;
use constant MC12_dec                => 65;
use constant MC12_deca               => 66;
use constant MC12_decb               => 67;
use constant MC12_des                => 68;
use constant MC12_dex                => 69;
use constant MC12_dey                => 70;
use constant MC12_ediv               => 71;
use constant MC12_edivs              => 72;
use constant MC12_emacs              => 73;
use constant MC12_emaxd              => 74;
use constant MC12_emaxm              => 75;
use constant MC12_emind              => 76;
use constant MC12_eminm              => 77;
use constant MC12_emul               => 78;
use constant MC12_emuls              => 79;
use constant MC12_eora               => 80;
use constant MC12_eorb               => 81;
use constant MC12_etbl               => 82;
use constant MC12_exg                => 83;
use constant MC12_fdiv               => 84;
use constant MC12_ibeq               => 85;
use constant MC12_ibne               => 86;
use constant MC12_idiv               => 87;
use constant MC12_idivs              => 88;
use constant MC12_inc                => 89;
use constant MC12_inca               => 90;
use constant MC12_incb               => 91;
use constant MC12_ins                => 92;
use constant MC12_inx                => 93;
use constant MC12_iny                => 94;
use constant MC12_jmp                => 95;
use constant MC12_jsr                => 96;
use constant MC12_lbcc               => 97;
use constant MC12_lbcs               => 98;
use constant MC12_lbeq               => 99;
use constant MC12_lbge               => 100;
use constant MC12_lbgt               => 101;
use constant MC12_lbhi               => 102;
use constant MC12_lbhs               => 103;
use constant MC12_lble               => 104;
use constant MC12_lblo               => 105;
use constant MC12_lbls               => 106;
use constant MC12_lblt               => 107;
use constant MC12_lbmi               => 108;
use constant MC12_lbne               => 109;
use constant MC12_lbpl               => 110;
use constant MC12_lbra               => 111;
use constant MC12_lbrn               => 112;
use constant MC12_lbvc               => 113;
use constant MC12_lbvs               => 114;
use constant MC12_ldaa               => 115;
use constant MC12_ldab               => 116;
use constant MC12_ldd                => 117;
use constant MC12_lds                => 118;
use constant MC12_ldx                => 119;
use constant MC12_ldy                => 120;
use constant MC12_leas               => 121;
use constant MC12_leax               => 122;
use constant MC12_leay               => 123;
use constant MC12_lsl                => 124;
use constant MC12_lsla               => 125;
use constant MC12_lslb               => 126;
use constant MC12_lsld               => 127;
use constant MC12_lsr                => 128;
use constant MC12_lsra               => 129;
use constant MC12_lsrb               => 130;
use constant MC12_lsrd               => 131;
use constant MC12_maxa               => 132;
use constant MC12_maxm               => 133;
use constant MC12_mem                => 134;
use constant MC12_mina               => 135;
use constant MC12_minm               => 136;
use constant MC12_movb               => 137;
use constant MC12_movw               => 138;
use constant MC12_mul                => 139;
use constant MC12_neg                => 140;
use constant MC12_nega               => 141;
use constant MC12_negb               => 142;
use constant MC12_nop                => 143;
use constant MC12_oraa               => 144;
use constant MC12_orab               => 145;
use constant MC12_orcc               => 146;
use constant MC12_psha               => 147;
use constant MC12_pshb               => 148;
use constant MC12_pshc               => 149;
use constant MC12_pshd               => 150;
use constant MC12_pshx               => 151;
use constant MC12_pshy               => 152;
use constant MC12_pula               => 153;
use constant MC12_pulb               => 154;
use constant MC12_pulc               => 155;
use constant MC12_puld               => 156;
use constant MC12_pulx               => 157;
use constant MC12_puly               => 158;
use constant MC12_rev                => 159;
use constant MC12_revw               => 160;
use constant MC12_rol                => 161;
use constant MC12_rola               => 162;
use constant MC12_rolb               => 163;
use constant MC12_ror                => 164;
use constant MC12_rora               => 165;
use constant MC12_rorb               => 166;
use constant MC12_rtc                => 167;
use constant MC12_rti                => 168;
use constant MC12_rts                => 169;
use constant MC12_sba                => 170;
use constant MC12_sbca               => 171;
use constant MC12_sbcb               => 172;
use constant MC12_sec                => 173;
use constant MC12_sei                => 174;
use constant MC12_sev                => 175;
use constant MC12_sex                => 176;
use constant MC12_staa               => 177;
use constant MC12_stab               => 178;
use constant MC12_std                => 179;
use constant MC12_stop               => 180;
use constant MC12_sts                => 181;
use constant MC12_stx                => 182;
use constant MC12_sty                => 183;
use constant MC12_suba               => 184;
use constant MC12_subb               => 185;
use constant MC12_subd               => 186;
use constant MC12_swi                => 187;
use constant MC12_tab                => 188;
use constant MC12_tap                => 189;
use constant MC12_tba                => 190;
use constant MC12_tbeq               => 191;
use constant MC12_tbl                => 192;
use constant MC12_tbne               => 193;
use constant MC12_tfr                => 194;
use constant MC12_tpa                => 195;
use constant MC12_trap               => 196;
use constant MC12_tst                => 197;
use constant MC12_tsta               => 198;
use constant MC12_tstb               => 199;
use constant MC12_tsx                => 200;
use constant MC12_tsy                => 201;
use constant MC12_txs                => 202;
use constant MC12_tys                => 203;
use constant MC12_wai                => 204;
use constant MC12_wav                => 205;
use constant MC12_wavr               => 206;
use constant MC12_xgdx               => 207;
use constant MC12_xgdy               => 208;
use constant MC12_skip1              => 209;
use constant MC12_skip2              => 210;
use constant MC12X_addx              => 211;
use constant MC12X_addy              => 212;
use constant MC12X_aded              => 213;
use constant MC12X_adex              => 214;
use constant MC12X_adey              => 215;
use constant MC12X_andx              => 216;
use constant MC12X_andy              => 217;
use constant MC12X_aslw              => 218;
use constant MC12X_aslx              => 219;
use constant MC12X_asly              => 220;
use constant MC12X_asrw              => 221;
use constant MC12X_asrx              => 222;
use constant MC12X_asry              => 223;
use constant MC12X_bitx              => 224;
use constant MC12X_bity              => 225;
use constant MC12X_btas              => 226;
use constant MC12X_clrw              => 227;
use constant MC12X_clrx              => 228;
use constant MC12X_clry              => 229;
use constant MC12X_comw              => 230;
use constant MC12X_comx              => 231;
use constant MC12X_comy              => 232;
use constant MC12X_cped              => 233;
use constant MC12X_cpes              => 234;
use constant MC12X_cpex              => 235;
use constant MC12X_cpey              => 236;
use constant MC12X_decw              => 237;
use constant MC12X_decx              => 238;
use constant MC12X_decy              => 239;
use constant MC12X_eorx              => 240;
use constant MC12X_eory              => 241;
use constant MC12X_gldaa             => 242;
use constant MC12X_gldab             => 243;
use constant MC12X_gldd              => 244;
use constant MC12X_glds              => 245;
use constant MC12X_gldx              => 246;
use constant MC12X_gldy              => 247;
use constant MC12X_gstaa             => 248;
use constant MC12X_gstab             => 249;
use constant MC12X_gstd              => 250;
use constant MC12X_gsts              => 251;
use constant MC12X_gstx              => 252;
use constant MC12X_gsty              => 253;
use constant MC12X_incw              => 254;
use constant MC12X_incx              => 255;
use constant MC12X_incy              => 256;
use constant MC12X_lsrw              => 257;
use constant MC12X_lsrx              => 258;
use constant MC12X_lsry              => 259;
use constant MC12X_negw              => 260;
use constant MC12X_negx              => 261;
use constant MC12X_negy              => 262;
use constant MC12X_orx               => 263;
use constant MC12X_ory               => 264;
use constant MC12X_pshcw             => 265;
use constant MC12X_pulcw             => 266;
use constant MC12X_rolw              => 267;
use constant MC12X_rolx              => 268;
use constant MC12X_roly              => 269;
use constant MC12X_rorw              => 270;
use constant MC12X_rorx              => 271;
use constant MC12X_rory              => 272;
use constant MC12X_sbed              => 273;
use constant MC12X_sbex              => 274;
use constant MC12X_sbey              => 275;
use constant MC12X_subx              => 276;
use constant MC12X_suby              => 277;
use constant MC12X_tstw              => 278;
use constant MC12X_tstx              => 279;
use constant MC12X_tsty              => 280;
use constant MC12X_sys               => 281;
use constant MC12XGATE_adc           => 282;
use constant MC12XGATE_add           => 283;
use constant MC12XGATE_addh          => 284;
use constant MC12XGATE_addl          => 285;
use constant MC12XGATE_and           => 286;
use constant MC12XGATE_andh          => 287;
use constant MC12XGATE_andl          => 288;
use constant MC12XGATE_asr           => 289;
use constant MC12XGATE_bcc           => 290;
use constant MC12XGATE_bcs           => 291;
use constant MC12XGATE_beq           => 292;
use constant MC12XGATE_bfext         => 293;
use constant MC12XGATE_bffo          => 294;
use constant MC12XGATE_bfins         => 295;
use constant MC12XGATE_bfinsi        => 296;
use constant MC12XGATE_bfinsx        => 297;
use constant MC12XGATE_bge           => 298;
use constant MC12XGATE_bgt           => 299;
use constant MC12XGATE_bhi           => 300;
use constant MC12XGATE_bhs           => 301;
use constant MC12XGATE_bith          => 302;
use constant MC12XGATE_bitl          => 303;
use constant MC12XGATE_ble           => 304;
use constant MC12XGATE_blo           => 305;
use constant MC12XGATE_bls           => 306;
use constant MC12XGATE_blt           => 307;
use constant MC12XGATE_bmi           => 308;
use constant MC12XGATE_bne           => 309;
use constant MC12XGATE_bpl           => 310;
use constant MC12XGATE_bra           => 311;
use constant MC12XGATE_brk           => 312;
use constant MC12XGATE_bvc           => 313;
use constant MC12XGATE_bvs           => 314;
use constant MC12XGATE_cmp           => 315;
use constant MC12XGATE_cmpl          => 316;
use constant MC12XGATE_com           => 317;
use constant MC12XGATE_cpc           => 318;
use constant MC12XGATE_cpch          => 319;
use constant MC12XGATE_csem          => 320;
use constant MC12XGATE_csl           => 321;
use constant MC12XGATE_csr           => 322;
use constant MC12XGATE_jal           => 323;
use constant MC12XGATE_ldb           => 324;
use constant MC12XGATE_ldh           => 325;
use constant MC12XGATE_ldl           => 326;
use constant MC12XGATE_ldw           => 327;
use constant MC12XGATE_lsl           => 328;
use constant MC12XGATE_lsr           => 329;
use constant MC12XGATE_mov           => 330;
use constant MC12XGATE_neg           => 331;
use constant MC12XGATE_nop           => 332;
use constant MC12XGATE_or            => 333;
use constant MC12XGATE_orh           => 334;
use constant MC12XGATE_orl           => 335;
use constant MC12XGATE_par           => 336;
use constant MC12XGATE_rol           => 337;
use constant MC12XGATE_ror           => 338;
use constant MC12XGATE_rts           => 339;
use constant MC12XGATE_sbc           => 340;
use constant MC12XGATE_sex           => 341;
use constant MC12XGATE_sif           => 342;
use constant MC12XGATE_ssem          => 343;
use constant MC12XGATE_stb           => 344;
use constant MC12XGATE_stw           => 345;
use constant MC12XGATE_sub           => 346;
use constant MC12XGATE_subh          => 347;
use constant MC12XGATE_subl          => 348;
use constant MC12XGATE_tfr           => 349;
use constant MC12XGATE_tst           => 350;
use constant MC12XGATE_xnor          => 351;
use constant MC12XGATE_xnorh         => 352;
use constant MC12XGATE_xnorl         => 353;
use constant MC12XGATE_add16         => 354;
use constant MC12XGATE_and16         => 355;
use constant MC12XGATE_cmp16         => 356;
use constant MC12XGATE_ldw16         => 357;
use constant MC12XGATE_or16          => 358;
use constant MC12XGATE_sub16         => 359;
use constant MC12XGATE_xnor16        => 360;
use constant MC12_last               => 361;
use constant MC6816_null             => 0;
use constant MC6816_ldaa             => 1;
use constant MC6816_ldab             => 2;
use constant MC6816_ldd              => 3;
use constant MC6816_lde              => 4;
use constant MC6816_lded             => 5;
use constant MC6816_movb             => 6;
use constant MC6816_movw             => 7;
use constant MC6816_staa             => 8;
use constant MC6816_stab             => 9;
use constant MC6816_std              => 10;
use constant MC6816_ste              => 11;
use constant MC6816_sted             => 12;
use constant MC6816_tab              => 13;
use constant MC6816_tba              => 14;
use constant MC6816_tde              => 15;
use constant MC6816_ted              => 16;
use constant MC6816_xgab             => 17;
use constant MC6816_xgde             => 18;
use constant MC6816_aba              => 19;
use constant MC6816_adca             => 20;
use constant MC6816_adcb             => 21;
use constant MC6816_adcd             => 22;
use constant MC6816_adce             => 23;
use constant MC6816_adda             => 24;
use constant MC6816_addb             => 25;
use constant MC6816_addd             => 26;
use constant MC6816_adde             => 27;
use constant MC6816_ade              => 28;
use constant MC6816_sba              => 29;
use constant MC6816_sbca             => 30;
use constant MC6816_sbcb             => 31;
use constant MC6816_sbcd             => 32;
use constant MC6816_sbce             => 33;
use constant MC6816_sde              => 34;
use constant MC6816_suba             => 35;
use constant MC6816_subb             => 36;
use constant MC6816_subd             => 37;
use constant MC6816_sube             => 38;
use constant MC6816_daa              => 39;
use constant MC6816_sxt              => 40;
use constant MC6816_cba              => 41;
use constant MC6816_cmpa             => 42;
use constant MC6816_cmpb             => 43;
use constant MC6816_cpd              => 44;
use constant MC6816_cpe              => 45;
use constant MC6816_tst              => 46;
use constant MC6816_tsta             => 47;
use constant MC6816_tstb             => 48;
use constant MC6816_tstd             => 49;
use constant MC6816_tste             => 50;
use constant MC6816_tstw             => 51;
use constant MC6816_ediv             => 52;
use constant MC6816_edivs            => 53;
use constant MC6816_emul             => 54;
use constant MC6816_emuls            => 55;
use constant MC6816_fdiv             => 56;
use constant MC6816_fmuls            => 57;
use constant MC6816_idiv             => 58;
use constant MC6816_mul              => 59;
use constant MC6816_dec              => 60;
use constant MC6816_deca             => 61;
use constant MC6816_decb             => 62;
use constant MC6816_decw             => 63;
use constant MC6816_inc              => 64;
use constant MC6816_inca             => 65;
use constant MC6816_incb             => 66;
use constant MC6816_incw             => 67;
use constant MC6816_clr              => 68;
use constant MC6816_clra             => 69;
use constant MC6816_clrb             => 70;
use constant MC6816_clrd             => 71;
use constant MC6816_clre             => 72;
use constant MC6816_clrw             => 73;
use constant MC6816_com              => 74;
use constant MC6816_coma             => 75;
use constant MC6816_comb             => 76;
use constant MC6816_comd             => 77;
use constant MC6816_come             => 78;
use constant MC6816_comw             => 79;
use constant MC6816_neg              => 80;
use constant MC6816_nega             => 81;
use constant MC6816_negb             => 82;
use constant MC6816_negd             => 83;
use constant MC6816_nege             => 84;
use constant MC6816_negw             => 85;
use constant MC6816_anda             => 86;
use constant MC6816_andb             => 87;
use constant MC6816_andd             => 88;
use constant MC6816_ande             => 89;
use constant MC6816_eora             => 90;
use constant MC6816_eorb             => 91;
use constant MC6816_eord             => 92;
use constant MC6816_eore             => 93;
use constant MC6816_oraa             => 94;
use constant MC6816_orab             => 95;
use constant MC6816_ord              => 96;
use constant MC6816_ore              => 97;
use constant MC6816_bita             => 98;
use constant MC6816_bitb             => 99;
use constant MC6816_bclr             => 100;
use constant MC6816_bclrw            => 101;
use constant MC6816_bset             => 102;
use constant MC6816_bsetw            => 103;
use constant MC6816_lsr              => 104;
use constant MC6816_lsra             => 105;
use constant MC6816_lsrb             => 106;
use constant MC6816_lsrd             => 107;
use constant MC6816_lsre             => 108;
use constant MC6816_lsrw             => 109;
use constant MC6816_asl              => 110;
use constant MC6816_asla             => 111;
use constant MC6816_aslb             => 112;
use constant MC6816_asld             => 113;
use constant MC6816_asle             => 114;
use constant MC6816_aslw             => 115;
use constant MC6816_asr              => 116;
use constant MC6816_asra             => 117;
use constant MC6816_asrb             => 118;
use constant MC6816_asrd             => 119;
use constant MC6816_asre             => 120;
use constant MC6816_asrw             => 121;
use constant MC6816_rol              => 122;
use constant MC6816_rola             => 123;
use constant MC6816_rolb             => 124;
use constant MC6816_rold             => 125;
use constant MC6816_role             => 126;
use constant MC6816_rolw             => 127;
use constant MC6816_ror              => 128;
use constant MC6816_rora             => 129;
use constant MC6816_rorb             => 130;
use constant MC6816_rord             => 131;
use constant MC6816_rore             => 132;
use constant MC6816_rorw             => 133;
use constant MC6816_bra              => 134;
use constant MC6816_brn              => 135;
use constant MC6816_bcc              => 136;
use constant MC6816_bcs              => 137;
use constant MC6816_beq              => 138;
use constant MC6816_bmi              => 139;
use constant MC6816_bne              => 140;
use constant MC6816_bpl              => 141;
use constant MC6816_bvc              => 142;
use constant MC6816_bvs              => 143;
use constant MC6816_bhi              => 144;
use constant MC6816_bls              => 145;
use constant MC6816_bge              => 146;
use constant MC6816_bgt              => 147;
use constant MC6816_ble              => 148;
use constant MC6816_blt              => 149;
use constant MC6816_lbra             => 150;
use constant MC6816_lbrn             => 151;
use constant MC6816_lbcc             => 152;
use constant MC6816_lbcs             => 153;
use constant MC6816_lbeq             => 154;
use constant MC6816_lbev             => 155;
use constant MC6816_lbmi             => 156;
use constant MC6816_lbmv             => 157;
use constant MC6816_lbne             => 158;
use constant MC6816_lbpl             => 159;
use constant MC6816_lbvc             => 160;
use constant MC6816_lbvs             => 161;
use constant MC6816_lbhi             => 162;
use constant MC6816_lbls             => 163;
use constant MC6816_lbge             => 164;
use constant MC6816_lbgt             => 165;
use constant MC6816_lble             => 166;
use constant MC6816_lblt             => 167;
use constant MC6816_brclr            => 168;
use constant MC6816_brset            => 169;
use constant MC6816_jmp              => 170;
use constant MC6816_bsr              => 171;
use constant MC6816_jsr              => 172;
use constant MC6816_lbsr             => 173;
use constant MC6816_rts              => 174;
use constant MC6816_rti              => 175;
use constant MC6816_swi              => 176;
use constant MC6816_abx              => 177;
use constant MC6816_aby              => 178;
use constant MC6816_abz              => 179;
use constant MC6816_adx              => 180;
use constant MC6816_ady              => 181;
use constant MC6816_adz              => 182;
use constant MC6816_aex              => 183;
use constant MC6816_aey              => 184;
use constant MC6816_aez              => 185;
use constant MC6816_aix              => 186;
use constant MC6816_aiy              => 187;
use constant MC6816_aiz              => 188;
use constant MC6816_cpx              => 189;
use constant MC6816_cpy              => 190;
use constant MC6816_cpz              => 191;
use constant MC6816_ldx              => 192;
use constant MC6816_ldy              => 193;
use constant MC6816_ldz              => 194;
use constant MC6816_stx              => 195;
use constant MC6816_sty              => 196;
use constant MC6816_stz              => 197;
use constant MC6816_tsx              => 198;
use constant MC6816_tsy              => 199;
use constant MC6816_tsz              => 200;
use constant MC6816_txs              => 201;
use constant MC6816_txy              => 202;
use constant MC6816_txz              => 203;
use constant MC6816_tys              => 204;
use constant MC6816_tyx              => 205;
use constant MC6816_tyz              => 206;
use constant MC6816_tzs              => 207;
use constant MC6816_tzx              => 208;
use constant MC6816_tzy              => 209;
use constant MC6816_xgdx             => 210;
use constant MC6816_xgdy             => 211;
use constant MC6816_xgdz             => 212;
use constant MC6816_xgex             => 213;
use constant MC6816_xgey             => 214;
use constant MC6816_xgez             => 215;
use constant MC6816_tbek             => 216;
use constant MC6816_tbsk             => 217;
use constant MC6816_tbxk             => 218;
use constant MC6816_tbyk             => 219;
use constant MC6816_tbzk             => 220;
use constant MC6816_tekb             => 221;
use constant MC6816_tskb             => 222;
use constant MC6816_txkb             => 223;
use constant MC6816_tykb             => 224;
use constant MC6816_tzkb             => 225;
use constant MC6816_ais              => 226;
use constant MC6816_cps              => 227;
use constant MC6816_lds              => 228;
use constant MC6816_sts              => 229;
use constant MC6816_psha             => 230;
use constant MC6816_pshb             => 231;
use constant MC6816_pshm             => 232;
use constant MC6816_pula             => 233;
use constant MC6816_pulb             => 234;
use constant MC6816_pulm             => 235;
use constant MC6816_andp             => 236;
use constant MC6816_orp              => 237;
use constant MC6816_tap              => 238;
use constant MC6816_tdp              => 239;
use constant MC6816_tpa              => 240;
use constant MC6816_tpd              => 241;
use constant MC6816_ace              => 242;
use constant MC6816_aced             => 243;
use constant MC6816_aslm             => 244;
use constant MC6816_asrm             => 245;
use constant MC6816_clrm             => 246;
use constant MC6816_ldhi             => 247;
use constant MC6816_mac              => 248;
use constant MC6816_pshmac           => 249;
use constant MC6816_pulmac           => 250;
use constant MC6816_rmac             => 251;
use constant MC6816_tdmsk            => 252;
use constant MC6816_tedm             => 253;
use constant MC6816_tem              => 254;
use constant MC6816_tmer             => 255;
use constant MC6816_tmet             => 256;
use constant MC6816_tmxed            => 257;
use constant MC6816_lpstop           => 258;
use constant MC6816_wai              => 259;
use constant MC6816_bgnd             => 260;
use constant MC6816_nop              => 261;
use constant MC6816_last             => 262;
use constant I960_null               => 0;
use constant I960_addc               => 1;
use constant I960_addi               => 2;
use constant I960_addo               => 3;
use constant I960_alterbit           => 4;
use constant I960_and                => 5;
use constant I960_andnot             => 6;
use constant I960_atadd              => 7;
use constant I960_atmod              => 8;
use constant I960_b                  => 9;
use constant I960_bal                => 10;
use constant I960_balx               => 11;
use constant I960_bbc                => 12;
use constant I960_bbs                => 13;
use constant I960_bno                => 14;
use constant I960_bg                 => 15;
use constant I960_be                 => 16;
use constant I960_bge                => 17;
use constant I960_bl                 => 18;
use constant I960_bne                => 19;
use constant I960_ble                => 20;
use constant I960_bo                 => 21;
use constant I960_bx                 => 22;
use constant I960_call               => 23;
use constant I960_calls              => 24;
use constant I960_callx              => 25;
use constant I960_chkbit             => 26;
use constant I960_clrbit             => 27;
use constant I960_cmpdeci            => 28;
use constant I960_cmpdeco            => 29;
use constant I960_cmpi               => 30;
use constant I960_cmpibno            => 31;
use constant I960_cmpibg             => 32;
use constant I960_cmpibe             => 33;
use constant I960_cmpibge            => 34;
use constant I960_cmpibl             => 35;
use constant I960_cmpibne            => 36;
use constant I960_cmpible            => 37;
use constant I960_cmpibo             => 38;
use constant I960_cmpinci            => 39;
use constant I960_cmpinco            => 40;
use constant I960_cmpo               => 41;
use constant I960_cmpobg             => 42;
use constant I960_cmpobe             => 43;
use constant I960_cmpobge            => 44;
use constant I960_cmpobl             => 45;
use constant I960_cmpobne            => 46;
use constant I960_cmpoble            => 47;
use constant I960_concmpi            => 48;
use constant I960_concmpo            => 49;
use constant I960_divi               => 50;
use constant I960_divo               => 51;
use constant I960_ediv               => 52;
use constant I960_emul               => 53;
use constant I960_eshro              => 54;
use constant I960_extract            => 55;
use constant I960_faultno            => 56;
use constant I960_faultg             => 57;
use constant I960_faulte             => 58;
use constant I960_faultge            => 59;
use constant I960_faultl             => 60;
use constant I960_faultne            => 61;
use constant I960_faultle            => 62;
use constant I960_faulto             => 63;
use constant I960_flushreg           => 64;
use constant I960_fmark              => 65;
use constant I960_ld                 => 66;
use constant I960_lda                => 67;
use constant I960_ldib               => 68;
use constant I960_ldis               => 69;
use constant I960_ldl                => 70;
use constant I960_ldob               => 71;
use constant I960_ldos               => 72;
use constant I960_ldq                => 73;
use constant I960_ldt                => 74;
use constant I960_mark               => 75;
use constant I960_modac              => 76;
use constant I960_modi               => 77;
use constant I960_modify             => 78;
use constant I960_modpc              => 79;
use constant I960_modtc              => 80;
use constant I960_mov                => 81;
use constant I960_movl               => 82;
use constant I960_movq               => 83;
use constant I960_movt               => 84;
use constant I960_muli               => 85;
use constant I960_mulo               => 86;
use constant I960_nand               => 87;
use constant I960_nor                => 88;
use constant I960_not                => 89;
use constant I960_notand             => 90;
use constant I960_notbit             => 91;
use constant I960_notor              => 92;
use constant I960_or                 => 93;
use constant I960_ornot              => 94;
use constant I960_remi               => 95;
use constant I960_remo               => 96;
use constant I960_ret                => 97;
use constant I960_rotate             => 98;
use constant I960_scanbit            => 99;
use constant I960_scanbyte           => 100;
use constant I960_setbit             => 101;
use constant I960_shli               => 102;
use constant I960_shlo               => 103;
use constant I960_shrdi              => 104;
use constant I960_shri               => 105;
use constant I960_shro               => 106;
use constant I960_spanbit            => 107;
use constant I960_st                 => 108;
use constant I960_stib               => 109;
use constant I960_stis               => 110;
use constant I960_stl                => 111;
use constant I960_stob               => 112;
use constant I960_stos               => 113;
use constant I960_stq                => 114;
use constant I960_stt                => 115;
use constant I960_subc               => 116;
use constant I960_subi               => 117;
use constant I960_subo               => 118;
use constant I960_syncf              => 119;
use constant I960_testno             => 120;
use constant I960_testg              => 121;
use constant I960_teste              => 122;
use constant I960_testge             => 123;
use constant I960_testl              => 124;
use constant I960_testne             => 125;
use constant I960_testle             => 126;
use constant I960_testo              => 127;
use constant I960_xnor               => 128;
use constant I960_xor                => 129;
use constant I960_sdma               => 130;
use constant I960_sysctl             => 131;
use constant I960_udma               => 132;
use constant I960_dcinva             => 133;
use constant I960_cmpob              => 134;
use constant I960_cmpib              => 135;
use constant I960_cmpos              => 136;
use constant I960_cmpis              => 137;
use constant I960_bswap              => 138;
use constant I960_intdis             => 139;
use constant I960_inten              => 140;
use constant I960_synmov             => 141;
use constant I960_synmovl            => 142;
use constant I960_synmovq            => 143;
use constant I960_cmpstr             => 144;
use constant I960_movqstr            => 145;
use constant I960_movstr             => 146;
use constant I960_inspacc            => 147;
use constant I960_ldphy              => 148;
use constant I960_synld              => 149;
use constant I960_fill               => 150;
use constant I960_daddc              => 151;
use constant I960_dsubc              => 152;
use constant I960_dmovt              => 153;
use constant I960_condrec            => 154;
use constant I960_receive            => 155;
use constant I960_intctl             => 156;
use constant I960_icctl              => 157;
use constant I960_dcctl              => 158;
use constant I960_halt               => 159;
use constant I960_send               => 160;
use constant I960_sendserv           => 161;
use constant I960_resumprcs          => 162;
use constant I960_schedprcs          => 163;
use constant I960_saveprcs           => 164;
use constant I960_condwait           => 165;
use constant I960_wait               => 166;
use constant I960_signal             => 167;
use constant I960_ldtime             => 168;
use constant I960_addono             => 169;
use constant I960_addino             => 170;
use constant I960_subono             => 171;
use constant I960_subino             => 172;
use constant I960_selno              => 173;
use constant I960_addog              => 174;
use constant I960_addig              => 175;
use constant I960_subog              => 176;
use constant I960_subig              => 177;
use constant I960_selg               => 178;
use constant I960_addoe              => 179;
use constant I960_addie              => 180;
use constant I960_suboe              => 181;
use constant I960_subie              => 182;
use constant I960_sele               => 183;
use constant I960_addoge             => 184;
use constant I960_addige             => 185;
use constant I960_suboge             => 186;
use constant I960_subige             => 187;
use constant I960_selge              => 188;
use constant I960_addol              => 189;
use constant I960_addil              => 190;
use constant I960_subol              => 191;
use constant I960_subil              => 192;
use constant I960_sell               => 193;
use constant I960_addone             => 194;
use constant I960_addine             => 195;
use constant I960_subone             => 196;
use constant I960_subine             => 197;
use constant I960_selne              => 198;
use constant I960_addole             => 199;
use constant I960_addile             => 200;
use constant I960_subole             => 201;
use constant I960_subile             => 202;
use constant I960_selle              => 203;
use constant I960_addoo              => 204;
use constant I960_addio              => 205;
use constant I960_suboo              => 206;
use constant I960_subio              => 207;
use constant I960_selo               => 208;
use constant I960_faddr              => 209;
use constant I960_fp_first           => 209;
use constant I960_faddrl             => 210;
use constant I960_fatanr             => 211;
use constant I960_fatanrl            => 212;
use constant I960_fclassr            => 213;
use constant I960_fclassrl           => 214;
use constant I960_fcmpor             => 215;
use constant I960_fcmporl            => 216;
use constant I960_fcmpr              => 217;
use constant I960_fcmprl             => 218;
use constant I960_fcosr              => 219;
use constant I960_fcosrl             => 220;
use constant I960_fcpyrsre           => 221;
use constant I960_fcpysre            => 222;
use constant I960_fcvtilr            => 223;
use constant I960_fcvtir             => 224;
use constant I960_fcvtri             => 225;
use constant I960_fcvtril            => 226;
use constant I960_fcvtzri            => 227;
use constant I960_fcvtzril           => 228;
use constant I960_fdivr              => 229;
use constant I960_fdivrl             => 230;
use constant I960_fexpr              => 231;
use constant I960_fexprl             => 232;
use constant I960_flogbnr            => 233;
use constant I960_flogbnrl           => 234;
use constant I960_flogepr            => 235;
use constant I960_flogeprl           => 236;
use constant I960_flogr              => 237;
use constant I960_flogrl             => 238;
use constant I960_fmovr              => 239;
use constant I960_fmovre             => 240;
use constant I960_fmovrl             => 241;
use constant I960_fmulr              => 242;
use constant I960_fmulrl             => 243;
use constant I960_fremr              => 244;
use constant I960_fremrl             => 245;
use constant I960_froundr            => 246;
use constant I960_froundrl           => 247;
use constant I960_fscaler            => 248;
use constant I960_fscalerl           => 249;
use constant I960_fsinr              => 250;
use constant I960_fsinrl             => 251;
use constant I960_fsqrtr             => 252;
use constant I960_fsqrtrl            => 253;
use constant I960_fsubr              => 254;
use constant I960_fsubrl             => 255;
use constant I960_ftanr              => 256;
use constant I960_ftanrl             => 257;
use constant I960_fp_last            => 257;
use constant I960_last               => 258;
use constant F2MC_null               => 0;
use constant F2MC_mov                => 1;
use constant F2MC_movn               => 2;
use constant F2MC_movx               => 3;
use constant F2MC_xch                => 4;
use constant F2MC_movw               => 5;
use constant F2MC_xchw               => 6;
use constant F2MC_movl               => 7;
use constant F2MC_add                => 8;
use constant F2MC_addc1              => 9;
use constant F2MC_addc2              => 10;
use constant F2MC_adddc              => 11;
use constant F2MC_sub                => 12;
use constant F2MC_subc1              => 13;
use constant F2MC_subc2              => 14;
use constant F2MC_subdc              => 15;
use constant F2MC_addw1              => 16;
use constant F2MC_addw2              => 17;
use constant F2MC_addcw              => 18;
use constant F2MC_subw1              => 19;
use constant F2MC_subw2              => 20;
use constant F2MC_subcw              => 21;
use constant F2MC_addl               => 22;
use constant F2MC_subl               => 23;
use constant F2MC_inc                => 24;
use constant F2MC_dec                => 25;
use constant F2MC_incw               => 26;
use constant F2MC_decw               => 27;
use constant F2MC_incl               => 28;
use constant F2MC_decl               => 29;
use constant F2MC_cmp1               => 30;
use constant F2MC_cmp2               => 31;
use constant F2MC_cmpw1              => 32;
use constant F2MC_cmpw2              => 33;
use constant F2MC_cmpl               => 34;
use constant F2MC_divu1              => 35;
use constant F2MC_divu2              => 36;
use constant F2MC_divuw              => 37;
use constant F2MC_mulu1              => 38;
use constant F2MC_mulu2              => 39;
use constant F2MC_muluw1             => 40;
use constant F2MC_muluw2             => 41;
use constant F2MC_div1               => 42;
use constant F2MC_div2               => 43;
use constant F2MC_divw               => 44;
use constant F2MC_mul1               => 45;
use constant F2MC_mul2               => 46;
use constant F2MC_mulw1              => 47;
use constant F2MC_mulw2              => 48;
use constant F2MC_and                => 49;
use constant F2MC_or                 => 50;
use constant F2MC_xor                => 51;
use constant F2MC_not                => 52;
use constant F2MC_andw1              => 53;
use constant F2MC_andw2              => 54;
use constant F2MC_orw1               => 55;
use constant F2MC_orw2               => 56;
use constant F2MC_xorw1              => 57;
use constant F2MC_xorw2              => 58;
use constant F2MC_notw               => 59;
use constant F2MC_andl               => 60;
use constant F2MC_orl                => 61;
use constant F2MC_xorl               => 62;
use constant F2MC_neg                => 63;
use constant F2MC_negw               => 64;
use constant F2MC_nrml               => 65;
use constant F2MC_rorc               => 66;
use constant F2MC_rolc               => 67;
use constant F2MC_asr                => 68;
use constant F2MC_lsr                => 69;
use constant F2MC_lsl                => 70;
use constant F2MC_asrw1              => 71;
use constant F2MC_asrw2              => 72;
use constant F2MC_lsrw1              => 73;
use constant F2MC_lsrw2              => 74;
use constant F2MC_lslw1              => 75;
use constant F2MC_lslw2              => 76;
use constant F2MC_asrl               => 77;
use constant F2MC_lsrl               => 78;
use constant F2MC_lsll               => 79;
use constant F2MC_bz                 => 80;
use constant F2MC_bnz                => 81;
use constant F2MC_bc                 => 82;
use constant F2MC_bnc                => 83;
use constant F2MC_bn                 => 84;
use constant F2MC_bp                 => 85;
use constant F2MC_bv                 => 86;
use constant F2MC_bnv                => 87;
use constant F2MC_bt                 => 88;
use constant F2MC_bnt                => 89;
use constant F2MC_blt                => 90;
use constant F2MC_bge                => 91;
use constant F2MC_ble                => 92;
use constant F2MC_bgt                => 93;
use constant F2MC_bls                => 94;
use constant F2MC_bhi                => 95;
use constant F2MC_bra                => 96;
use constant F2MC_jmp                => 97;
use constant F2MC_jmpp               => 98;
use constant F2MC_call               => 99;
use constant F2MC_callv              => 100;
use constant F2MC_callp              => 101;
use constant F2MC_cbne               => 102;
use constant F2MC_cwbne              => 103;
use constant F2MC_dbnz               => 104;
use constant F2MC_dwbnz              => 105;
use constant F2MC_int                => 106;
use constant F2MC_intp               => 107;
use constant F2MC_int9               => 108;
use constant F2MC_reti               => 109;
use constant F2MC_link               => 110;
use constant F2MC_unlink             => 111;
use constant F2MC_ret                => 112;
use constant F2MC_retp               => 113;
use constant F2MC_pushw              => 114;
use constant F2MC_popw               => 115;
use constant F2MC_jctx               => 116;
use constant F2MC_movea              => 117;
use constant F2MC_addsp              => 118;
use constant F2MC_nop                => 119;
use constant F2MC_adb                => 120;
use constant F2MC_dtb                => 121;
use constant F2MC_pcb                => 122;
use constant F2MC_spb                => 123;
use constant F2MC_ncc                => 124;
use constant F2MC_cmr                => 125;
use constant F2MC_movb               => 126;
use constant F2MC_setb               => 127;
use constant F2MC_clrb               => 128;
use constant F2MC_bbc                => 129;
use constant F2MC_bbs                => 130;
use constant F2MC_sbbs               => 131;
use constant F2MC_wbts               => 132;
use constant F2MC_wbtc               => 133;
use constant F2MC_swap               => 134;
use constant F2MC_swapw              => 135;
use constant F2MC_ext                => 136;
use constant F2MC_extw               => 137;
use constant F2MC_zext               => 138;
use constant F2MC_zextw              => 139;
use constant F2MC_movsi              => 140;
use constant F2MC_movsd              => 141;
use constant F2MC_sceqi              => 142;
use constant F2MC_sceqd              => 143;
use constant F2MC_filsi              => 144;
use constant F2MC_movswi             => 145;
use constant F2MC_movswd             => 146;
use constant F2MC_scweqi             => 147;
use constant F2MC_scweqd             => 148;
use constant F2MC_filswi             => 149;
use constant F2MC_bz16               => 150;
use constant F2MC_bnz16              => 151;
use constant F2MC_bc16               => 152;
use constant F2MC_bnc16              => 153;
use constant F2MC_bn16               => 154;
use constant F2MC_bp16               => 155;
use constant F2MC_bv16               => 156;
use constant F2MC_bnv16              => 157;
use constant F2MC_bt16               => 158;
use constant F2MC_bnt16              => 159;
use constant F2MC_blt16              => 160;
use constant F2MC_bge16              => 161;
use constant F2MC_ble16              => 162;
use constant F2MC_bgt16              => 163;
use constant F2MC_bls16              => 164;
use constant F2MC_bhi16              => 165;
use constant F2MC_cbne16             => 166;
use constant F2MC_cwbne16            => 167;
use constant F2MC_dbnz16             => 168;
use constant F2MC_dwbnz16            => 169;
use constant F2MC_bbc16              => 170;
use constant F2MC_bbs16              => 171;
use constant F2MC_sbbs16             => 172;
use constant F2MC_last               => 173;
use constant TMS320C3X_null          => 0;
use constant TMS320C3X_ABSF          => 1;
use constant TMS320C3X_ABSI          => 2;
use constant TMS320C3X_ADDC          => 3;
use constant TMS320C3X_ADDF          => 4;
use constant TMS320C3X_ADDI          => 5;
use constant TMS320C3X_AND           => 6;
use constant TMS320C3X_ANDN          => 7;
use constant TMS320C3X_ASH           => 8;
use constant TMS320C3X_CMPF          => 9;
use constant TMS320C3X_CMPI          => 10;
use constant TMS320C3X_FIX           => 11;
use constant TMS320C3X_FLOAT         => 12;
use constant TMS320C3X_IDLE          => 13;
use constant TMS320C3X_IDLE2         => 14;
use constant TMS320C3X_LDE           => 15;
use constant TMS320C3X_LDF           => 16;
use constant TMS320C3X_LDFI          => 17;
use constant TMS320C3X_LDI           => 18;
use constant TMS320C3X_LDII          => 19;
use constant TMS320C3X_LDM           => 20;
use constant TMS320C3X_LSH           => 21;
use constant TMS320C3X_MPYF          => 22;
use constant TMS320C3X_MPYI          => 23;
use constant TMS320C3X_NEGB          => 24;
use constant TMS320C3X_NEGF          => 25;
use constant TMS320C3X_NEGI          => 26;
use constant TMS320C3X_NOP           => 27;
use constant TMS320C3X_NORM          => 28;
use constant TMS320C3X_NOT           => 29;
use constant TMS320C3X_POP           => 30;
use constant TMS320C3X_POPF          => 31;
use constant TMS320C3X_PUSH          => 32;
use constant TMS320C3X_PUSHF         => 33;
use constant TMS320C3X_OR            => 34;
use constant TMS320C3X_LOPOWER       => 35;
use constant TMS320C3X_MAXSPEED      => 36;
use constant TMS320C3X_RND           => 37;
use constant TMS320C3X_ROL           => 38;
use constant TMS320C3X_ROLC          => 39;
use constant TMS320C3X_ROR           => 40;
use constant TMS320C3X_RORC          => 41;
use constant TMS320C3X_RPTS          => 42;
use constant TMS320C3X_STF           => 43;
use constant TMS320C3X_STFI          => 44;
use constant TMS320C3X_STI           => 45;
use constant TMS320C3X_STII          => 46;
use constant TMS320C3X_SIGI          => 47;
use constant TMS320C3X_SUBB          => 48;
use constant TMS320C3X_SUBC          => 49;
use constant TMS320C3X_SUBF          => 50;
use constant TMS320C3X_SUBI          => 51;
use constant TMS320C3X_SUBRB         => 52;
use constant TMS320C3X_SUBRF         => 53;
use constant TMS320C3X_SUBRI         => 54;
use constant TMS320C3X_TSTB          => 55;
use constant TMS320C3X_XOR           => 56;
use constant TMS320C3X_IACK          => 57;
use constant TMS320C3X_ADDC3         => 58;
use constant TMS320C3X_ADDF3         => 59;
use constant TMS320C3X_ADDI3         => 60;
use constant TMS320C3X_AND3          => 61;
use constant TMS320C3X_ANDN3         => 62;
use constant TMS320C3X_ASH3          => 63;
use constant TMS320C3X_CMPF3         => 64;
use constant TMS320C3X_CMPI3         => 65;
use constant TMS320C3X_LSH3          => 66;
use constant TMS320C3X_MPYF3         => 67;
use constant TMS320C3X_MPYI3         => 68;
use constant TMS320C3X_OR3           => 69;
use constant TMS320C3X_SUBB3         => 70;
use constant TMS320C3X_SUBF3         => 71;
use constant TMS320C3X_SUBI3         => 72;
use constant TMS320C3X_TSTB3         => 73;
use constant TMS320C3X_XOR3          => 74;
use constant TMS320C3X_LDFcond       => 75;
use constant TMS320C3X_LDIcond       => 76;
use constant TMS320C3X_BR            => 77;
use constant TMS320C3X_BRD           => 78;
use constant TMS320C3X_CALL          => 79;
use constant TMS320C3X_RPTB          => 80;
use constant TMS320C3X_SWI           => 81;
use constant TMS320C3X_Bcond         => 82;
use constant TMS320C3X_DBcond        => 83;
use constant TMS320C3X_CALLcond      => 84;
use constant TMS320C3X_TRAPcond      => 85;
use constant TMS320C3X_RETIcond      => 86;
use constant TMS320C3X_RETScond      => 87;
use constant TMS320C3X_RETIU         => 88;
use constant TMS320C3X_RETSU         => 89;
use constant TMS320C3X_NONE          => 90;
use constant TMS320C3X_MV_IDX        => 91;
use constant TMS320C3X_last          => 92;
use constant TMS320C54_null          => 0;
use constant TMS320C54_add1          => 1;
use constant TMS320C54_add2          => 2;
use constant TMS320C54_add3          => 3;
use constant TMS320C54_addc          => 4;
use constant TMS320C54_addm          => 5;
use constant TMS320C54_adds          => 6;
use constant TMS320C54_sub1          => 7;
use constant TMS320C54_sub2          => 8;
use constant TMS320C54_sub3          => 9;
use constant TMS320C54_subb          => 10;
use constant TMS320C54_subc          => 11;
use constant TMS320C54_subs          => 12;
use constant TMS320C54_mpy2          => 13;
use constant TMS320C54_mpy3          => 14;
use constant TMS320C54_mpyr2         => 15;
use constant TMS320C54_mpya          => 16;
use constant TMS320C54_mpyu          => 17;
use constant TMS320C54_squr          => 18;
use constant TMS320C54_mac2          => 19;
use constant TMS320C54_mac3          => 20;
use constant TMS320C54_macr2         => 21;
use constant TMS320C54_macr3         => 22;
use constant TMS320C54_maca1         => 23;
use constant TMS320C54_maca2         => 24;
use constant TMS320C54_maca3         => 25;
use constant TMS320C54_macar1        => 26;
use constant TMS320C54_macar2        => 27;
use constant TMS320C54_macar3        => 28;
use constant TMS320C54_macd          => 29;
use constant TMS320C54_macp          => 30;
use constant TMS320C54_macsu         => 31;
use constant TMS320C54_mas2          => 32;
use constant TMS320C54_mas3          => 33;
use constant TMS320C54_masr2         => 34;
use constant TMS320C54_masr3         => 35;
use constant TMS320C54_masa1         => 36;
use constant TMS320C54_masa2         => 37;
use constant TMS320C54_masa3         => 38;
use constant TMS320C54_masar1        => 39;
use constant TMS320C54_masar2        => 40;
use constant TMS320C54_masar3        => 41;
use constant TMS320C54_squra         => 42;
use constant TMS320C54_squrs         => 43;
use constant TMS320C54_dadd2         => 44;
use constant TMS320C54_dadd3         => 45;
use constant TMS320C54_dadst         => 46;
use constant TMS320C54_drsub         => 47;
use constant TMS320C54_dsadt         => 48;
use constant TMS320C54_dsub          => 49;
use constant TMS320C54_dsubt         => 50;
use constant TMS320C54_abdst         => 51;
use constant TMS320C54_abs1          => 52;
use constant TMS320C54_abs2          => 53;
use constant TMS320C54_cmpl1         => 54;
use constant TMS320C54_cmpl2         => 55;
use constant TMS320C54_delay         => 56;
use constant TMS320C54_exp           => 57;
use constant TMS320C54_firs          => 58;
use constant TMS320C54_lms           => 59;
use constant TMS320C54_max           => 60;
use constant TMS320C54_min           => 61;
use constant TMS320C54_neg1          => 62;
use constant TMS320C54_neg2          => 63;
use constant TMS320C54_norm1         => 64;
use constant TMS320C54_norm2         => 65;
use constant TMS320C54_poly          => 66;
use constant TMS320C54_rnd1          => 67;
use constant TMS320C54_rnd2          => 68;
use constant TMS320C54_sat           => 69;
use constant TMS320C54_sqdst         => 70;
use constant TMS320C54_and1          => 71;
use constant TMS320C54_and2          => 72;
use constant TMS320C54_and3          => 73;
use constant TMS320C54_andm          => 74;
use constant TMS320C54_or1           => 75;
use constant TMS320C54_or2           => 76;
use constant TMS320C54_or3           => 77;
use constant TMS320C54_orm           => 78;
use constant TMS320C54_xor1          => 79;
use constant TMS320C54_xor2          => 80;
use constant TMS320C54_xor3          => 81;
use constant TMS320C54_xorm          => 82;
use constant TMS320C54_rol           => 83;
use constant TMS320C54_roltc         => 84;
use constant TMS320C54_ror           => 85;
use constant TMS320C54_sfta2         => 86;
use constant TMS320C54_sfta3         => 87;
use constant TMS320C54_sftc          => 88;
use constant TMS320C54_sftl2         => 89;
use constant TMS320C54_sftl3         => 90;
use constant TMS320C54_bit           => 91;
use constant TMS320C54_bitf          => 92;
use constant TMS320C54_bitt          => 93;
use constant TMS320C54_cmpm          => 94;
use constant TMS320C54_cmpr          => 95;
use constant TMS320C54_b             => 96;
use constant TMS320C54_bd            => 97;
use constant TMS320C54_bacc          => 98;
use constant TMS320C54_baccd         => 99;
use constant TMS320C54_banz          => 100;
use constant TMS320C54_banzd         => 101;
use constant TMS320C54_bc2           => 102;
use constant TMS320C54_bc3           => 103;
use constant TMS320C54_bcd2          => 104;
use constant TMS320C54_bcd3          => 105;
use constant TMS320C54_fb            => 106;
use constant TMS320C54_fbd           => 107;
use constant TMS320C54_fbacc         => 108;
use constant TMS320C54_fbaccd        => 109;
use constant TMS320C54_cala          => 110;
use constant TMS320C54_calad         => 111;
use constant TMS320C54_call          => 112;
use constant TMS320C54_calld         => 113;
use constant TMS320C54_cc2           => 114;
use constant TMS320C54_cc3           => 115;
use constant TMS320C54_ccd2          => 116;
use constant TMS320C54_ccd3          => 117;
use constant TMS320C54_fcala         => 118;
use constant TMS320C54_fcalad        => 119;
use constant TMS320C54_fcall         => 120;
use constant TMS320C54_fcalld        => 121;
use constant TMS320C54_intr          => 122;
use constant TMS320C54_trap          => 123;
use constant TMS320C54_fret          => 124;
use constant TMS320C54_fretd         => 125;
use constant TMS320C54_frete         => 126;
use constant TMS320C54_freted        => 127;
use constant TMS320C54_rc1           => 128;
use constant TMS320C54_rc2           => 129;
use constant TMS320C54_rc3           => 130;
use constant TMS320C54_rcd1          => 131;
use constant TMS320C54_rcd2          => 132;
use constant TMS320C54_rcd3          => 133;
use constant TMS320C54_ret           => 134;
use constant TMS320C54_retd          => 135;
use constant TMS320C54_rete          => 136;
use constant TMS320C54_reted         => 137;
use constant TMS320C54_retf          => 138;
use constant TMS320C54_retfd         => 139;
use constant TMS320C54_rpt           => 140;
use constant TMS320C54_rptb          => 141;
use constant TMS320C54_rptbd         => 142;
use constant TMS320C54_rptz          => 143;
use constant TMS320C54_frame         => 144;
use constant TMS320C54_popd          => 145;
use constant TMS320C54_popm          => 146;
use constant TMS320C54_pshd          => 147;
use constant TMS320C54_pshm          => 148;
use constant TMS320C54_idle          => 149;
use constant TMS320C54_mar           => 150;
use constant TMS320C54_nop           => 151;
use constant TMS320C54_reset         => 152;
use constant TMS320C54_rsbx1         => 153;
use constant TMS320C54_rsbx2         => 154;
use constant TMS320C54_ssbx1         => 155;
use constant TMS320C54_ssbx2         => 156;
use constant TMS320C54_xc2           => 157;
use constant TMS320C54_xc3           => 158;
use constant TMS320C54_dld           => 159;
use constant TMS320C54_ld1           => 160;
use constant TMS320C54_ld2           => 161;
use constant TMS320C54_ld3           => 162;
use constant TMS320C54_ldm           => 163;
use constant TMS320C54_ldr           => 164;
use constant TMS320C54_ldu           => 165;
use constant TMS320C54_ltd           => 166;
use constant TMS320C54_dst           => 167;
use constant TMS320C54_st            => 168;
use constant TMS320C54_sth2          => 169;
use constant TMS320C54_sth3          => 170;
use constant TMS320C54_stl2          => 171;
use constant TMS320C54_stl3          => 172;
use constant TMS320C54_stlm          => 173;
use constant TMS320C54_stm           => 174;
use constant TMS320C54_cmps          => 175;
use constant TMS320C54_saccd         => 176;
use constant TMS320C54_srccd         => 177;
use constant TMS320C54_strcd         => 178;
use constant TMS320C54_st_ld         => 179;
use constant TMS320C54_ld_mac        => 180;
use constant TMS320C54_ld_macr       => 181;
use constant TMS320C54_ld_mas        => 182;
use constant TMS320C54_ld_masr       => 183;
use constant TMS320C54_st_add        => 184;
use constant TMS320C54_st_sub        => 185;
use constant TMS320C54_st_mac        => 186;
use constant TMS320C54_st_macr       => 187;
use constant TMS320C54_st_mas        => 188;
use constant TMS320C54_st_masr       => 189;
use constant TMS320C54_st_mpy        => 190;
use constant TMS320C54_mvdd          => 191;
use constant TMS320C54_mvdk          => 192;
use constant TMS320C54_mvdm          => 193;
use constant TMS320C54_mvdp          => 194;
use constant TMS320C54_mvkd          => 195;
use constant TMS320C54_mvmd          => 196;
use constant TMS320C54_mvmm          => 197;
use constant TMS320C54_mvpd          => 198;
use constant TMS320C54_portr         => 199;
use constant TMS320C54_portw         => 200;
use constant TMS320C54_reada         => 201;
use constant TMS320C54_writa         => 202;
use constant TMS320C54_last          => 203;
use constant TMS320C55_null          => 0;
use constant TMS320C55_abdst         => 1;
use constant TMS320C55_abs1          => 2;
use constant TMS320C55_abs2          => 3;
use constant TMS320C55_add1          => 4;
use constant TMS320C55_add2          => 5;
use constant TMS320C55_add3          => 6;
use constant TMS320C55_add4          => 7;
use constant TMS320C55_addv1         => 8;
use constant TMS320C55_addv2         => 9;
use constant TMS320C55_addrv1        => 10;
use constant TMS320C55_addrv2        => 11;
use constant TMS320C55_maxdiff       => 12;
use constant TMS320C55_dmaxdiff      => 13;
use constant TMS320C55_mindiff       => 14;
use constant TMS320C55_dmindiff      => 15;
use constant TMS320C55_addsubcc4     => 16;
use constant TMS320C55_addsubcc5     => 17;
use constant TMS320C55_addsub2cc     => 18;
use constant TMS320C55_sftcc         => 19;
use constant TMS320C55_subc2         => 20;
use constant TMS320C55_subc3         => 21;
use constant TMS320C55_addsub        => 22;
use constant TMS320C55_subadd        => 23;
use constant TMS320C55_mpy_mpy       => 24;
use constant TMS320C55_mpy_mpyr      => 25;
use constant TMS320C55_mpy_mpy40     => 26;
use constant TMS320C55_mpy_mpyr40    => 27;
use constant TMS320C55_mac_mpy       => 28;
use constant TMS320C55_macr_mpyr     => 29;
use constant TMS320C55_mac40_mpy40   => 30;
use constant TMS320C55_macr40_mpyr40 => 31;
use constant TMS320C55_mas_mpy       => 32;
use constant TMS320C55_masr_mpyr     => 33;
use constant TMS320C55_mas40_mpy40   => 34;
use constant TMS320C55_masr40_mpyr40 => 35;
use constant TMS320C55_amar_mpy      => 36;
use constant TMS320C55_amar_mpyr     => 37;
use constant TMS320C55_amar_mpy40    => 38;
use constant TMS320C55_amar_mpyr40   => 39;
use constant TMS320C55_mac_mac       => 40;
use constant TMS320C55_macr_macr     => 41;
use constant TMS320C55_mac40_mac40   => 42;
use constant TMS320C55_macr40_macr40 => 43;
use constant TMS320C55_mas_mac       => 44;
use constant TMS320C55_masr_macr     => 45;
use constant TMS320C55_mas40_mac40   => 46;
use constant TMS320C55_masr40_macr40 => 47;
use constant TMS320C55_amar_mac      => 48;
use constant TMS320C55_amar_macr     => 49;
use constant TMS320C55_amar_mac40    => 50;
use constant TMS320C55_amar_macr40   => 51;
use constant TMS320C55_mas_mas       => 52;
use constant TMS320C55_masr_masr     => 53;
use constant TMS320C55_mas40_mas40   => 54;
use constant TMS320C55_masr40_masr40 => 55;
use constant TMS320C55_amar_mas      => 56;
use constant TMS320C55_amar_masr     => 57;
use constant TMS320C55_amar_mas40    => 58;
use constant TMS320C55_amar_masr40   => 59;
use constant TMS320C55_mpy_mac       => 60;
use constant TMS320C55_mpyr_macr     => 61;
use constant TMS320C55_mpy40_mac40   => 62;
use constant TMS320C55_mpyr40_macr40 => 63;
use constant TMS320C55_amar3         => 64;
use constant TMS320C55_firsadd       => 65;
use constant TMS320C55_firssub       => 66;
use constant TMS320C55_mpym_mov      => 67;
use constant TMS320C55_mpymr_mov     => 68;
use constant TMS320C55_macm_mov      => 69;
use constant TMS320C55_macmr_mov     => 70;
use constant TMS320C55_masm_mov      => 71;
use constant TMS320C55_masmr_mov     => 72;
use constant TMS320C55_add_mov       => 73;
use constant TMS320C55_sub_mov       => 74;
use constant TMS320C55_mov_mov       => 75;
use constant TMS320C55_mov_aadd      => 76;
use constant TMS320C55_mov_add       => 77;
use constant TMS320C55_amar_amar     => 78;
use constant TMS320C55_add_asub      => 79;
use constant TMS320C55_btst_mov      => 80;
use constant TMS320C55_mov_asub      => 81;
use constant TMS320C55_lms           => 82;
use constant TMS320C55_max1          => 83;
use constant TMS320C55_max2          => 84;
use constant TMS320C55_min1          => 85;
use constant TMS320C55_min2          => 86;
use constant TMS320C55_cmp           => 87;
use constant TMS320C55_cmpu          => 88;
use constant TMS320C55_aadd          => 89;
use constant TMS320C55_asub          => 90;
use constant TMS320C55_amov          => 91;
use constant TMS320C55_amar1         => 92;
use constant TMS320C55_sqr1          => 93;
use constant TMS320C55_sqr2          => 94;
use constant TMS320C55_sqrr1         => 95;
use constant TMS320C55_sqrr2         => 96;
use constant TMS320C55_mpy1          => 97;
use constant TMS320C55_mpy2          => 98;
use constant TMS320C55_mpy3          => 99;
use constant TMS320C55_mpyr1         => 100;
use constant TMS320C55_mpyr2         => 101;
use constant TMS320C55_mpyr3         => 102;
use constant TMS320C55_mpyk2         => 103;
use constant TMS320C55_mpyk3         => 104;
use constant TMS320C55_mpykr2        => 105;
use constant TMS320C55_mpykr3        => 106;
use constant TMS320C55_mpym2         => 107;
use constant TMS320C55_mpym3         => 108;
use constant TMS320C55_mpymr2        => 109;
use constant TMS320C55_mpymr3        => 110;
use constant TMS320C55_mpym403       => 111;
use constant TMS320C55_mpymr403      => 112;
use constant TMS320C55_mpymu3        => 113;
use constant TMS320C55_mpymru3       => 114;
use constant TMS320C55_sqrm          => 115;
use constant TMS320C55_sqrmr         => 116;
use constant TMS320C55_mpymk         => 117;
use constant TMS320C55_mpymkr        => 118;
use constant TMS320C55_sqa1          => 119;
use constant TMS320C55_sqa2          => 120;
use constant TMS320C55_sqar1         => 121;
use constant TMS320C55_sqar2         => 122;
use constant TMS320C55_mac3          => 123;
use constant TMS320C55_mac4          => 124;
use constant TMS320C55_macr3         => 125;
use constant TMS320C55_macr4         => 126;
use constant TMS320C55_mack3         => 127;
use constant TMS320C55_mack4         => 128;
use constant TMS320C55_mackr3        => 129;
use constant TMS320C55_mackr4        => 130;
use constant TMS320C55_macm2         => 131;
use constant TMS320C55_macm3         => 132;
use constant TMS320C55_macm4         => 133;
use constant TMS320C55_macmr2        => 134;
use constant TMS320C55_macmr3        => 135;
use constant TMS320C55_macmr4        => 136;
use constant TMS320C55_macm403       => 137;
use constant TMS320C55_macm404       => 138;
use constant TMS320C55_macmr403      => 139;
use constant TMS320C55_macmr404      => 140;
use constant TMS320C55_macmz         => 141;
use constant TMS320C55_macmrz        => 142;
use constant TMS320C55_sqam2         => 143;
use constant TMS320C55_sqam3         => 144;
use constant TMS320C55_sqamr2        => 145;
use constant TMS320C55_sqamr3        => 146;
use constant TMS320C55_macmk3        => 147;
use constant TMS320C55_macmk4        => 148;
use constant TMS320C55_macmkr3       => 149;
use constant TMS320C55_macmkr4       => 150;
use constant TMS320C55_sqs1          => 151;
use constant TMS320C55_sqs2          => 152;
use constant TMS320C55_sqsr1         => 153;
use constant TMS320C55_sqsr2         => 154;
use constant TMS320C55_mas2          => 155;
use constant TMS320C55_mas3          => 156;
use constant TMS320C55_masr2         => 157;
use constant TMS320C55_masr3         => 158;
use constant TMS320C55_masm2         => 159;
use constant TMS320C55_masm3         => 160;
use constant TMS320C55_masm4         => 161;
use constant TMS320C55_masmr2        => 162;
use constant TMS320C55_masmr3        => 163;
use constant TMS320C55_masmr4        => 164;
use constant TMS320C55_masm403       => 165;
use constant TMS320C55_masm404       => 166;
use constant TMS320C55_masmr403      => 167;
use constant TMS320C55_masmr404      => 168;
use constant TMS320C55_sqsm2         => 169;
use constant TMS320C55_sqsm3         => 170;
use constant TMS320C55_sqsmr2        => 171;
use constant TMS320C55_sqsmr3        => 172;
use constant TMS320C55_neg1          => 173;
use constant TMS320C55_neg2          => 174;
use constant TMS320C55_mant_nexp     => 175;
use constant TMS320C55_exp           => 176;
use constant TMS320C55_cmpand        => 177;
use constant TMS320C55_cmpandu       => 178;
use constant TMS320C55_cmpor         => 179;
use constant TMS320C55_cmporu        => 180;
use constant TMS320C55_round1        => 181;
use constant TMS320C55_round2        => 182;
use constant TMS320C55_sat1          => 183;
use constant TMS320C55_sat2          => 184;
use constant TMS320C55_satr1         => 185;
use constant TMS320C55_satr2         => 186;
use constant TMS320C55_sfts2         => 187;
use constant TMS320C55_sfts3         => 188;
use constant TMS320C55_sftsc2        => 189;
use constant TMS320C55_sftsc3        => 190;
use constant TMS320C55_sqdst         => 191;
use constant TMS320C55_sub1          => 192;
use constant TMS320C55_sub2          => 193;
use constant TMS320C55_sub3          => 194;
use constant TMS320C55_sub4          => 195;
use constant TMS320C55_band          => 196;
use constant TMS320C55_bfxpa         => 197;
use constant TMS320C55_bfxtr         => 198;
use constant TMS320C55_btst          => 199;
use constant TMS320C55_bnot          => 200;
use constant TMS320C55_bclr2         => 201;
use constant TMS320C55_bset2         => 202;
use constant TMS320C55_btstset       => 203;
use constant TMS320C55_btstclr       => 204;
use constant TMS320C55_btstnot       => 205;
use constant TMS320C55_btstp         => 206;
use constant TMS320C55_bclr1         => 207;
use constant TMS320C55_bset1         => 208;
use constant TMS320C55_amar2         => 209;
use constant TMS320C55_popboth       => 210;
use constant TMS320C55_pshboth       => 211;
use constant TMS320C55_bcnt          => 212;
use constant TMS320C55_not1          => 213;
use constant TMS320C55_not2          => 214;
use constant TMS320C55_and1          => 215;
use constant TMS320C55_and2          => 216;
use constant TMS320C55_and3          => 217;
use constant TMS320C55_or1           => 218;
use constant TMS320C55_or2           => 219;
use constant TMS320C55_or3           => 220;
use constant TMS320C55_xor1          => 221;
use constant TMS320C55_xor2          => 222;
use constant TMS320C55_xor3          => 223;
use constant TMS320C55_sftl2         => 224;
use constant TMS320C55_sftl3         => 225;
use constant TMS320C55_rol           => 226;
use constant TMS320C55_ror           => 227;
use constant TMS320C55_swap          => 228;
use constant TMS320C55_swapp         => 229;
use constant TMS320C55_swap4         => 230;
use constant TMS320C55_mov2          => 231;
use constant TMS320C55_mov3          => 232;
use constant TMS320C55_mov402        => 233;
use constant TMS320C55_delay         => 234;
use constant TMS320C55_pop1          => 235;
use constant TMS320C55_pop2          => 236;
use constant TMS320C55_psh1          => 237;
use constant TMS320C55_psh2          => 238;
use constant TMS320C55_bcc           => 239;
use constant TMS320C55_bccu          => 240;
use constant TMS320C55_b             => 241;
use constant TMS320C55_callcc        => 242;
use constant TMS320C55_call          => 243;
use constant TMS320C55_xcc           => 244;
use constant TMS320C55_xccpart       => 245;
use constant TMS320C55_idle          => 246;
use constant TMS320C55_nop           => 247;
use constant TMS320C55_nop_16        => 248;
use constant TMS320C55_rptblocal     => 249;
use constant TMS320C55_rptb          => 250;
use constant TMS320C55_rptcc         => 251;
use constant TMS320C55_rpt           => 252;
use constant TMS320C55_rptadd        => 253;
use constant TMS320C55_rptsub        => 254;
use constant TMS320C55_retcc         => 255;
use constant TMS320C55_ret           => 256;
use constant TMS320C55_reti          => 257;
use constant TMS320C55_intr          => 258;
use constant TMS320C55_reset         => 259;
use constant TMS320C55_trap          => 260;
use constant TMS320C55_last          => 261;
use constant TRIMEDIA_null           => 1;
use constant TRIMEDIA_igtri          => 2;
use constant TRIMEDIA_igeqi          => 3;
use constant TRIMEDIA_ilesi          => 4;
use constant TRIMEDIA_ineqi          => 5;
use constant TRIMEDIA_ieqli          => 6;
use constant TRIMEDIA_iaddi          => 7;
use constant TRIMEDIA_ild16d         => 8;
use constant TRIMEDIA_ld32d          => 9;
use constant TRIMEDIA_uld8d          => 10;
use constant TRIMEDIA_lsri           => 11;
use constant TRIMEDIA_asri           => 12;
use constant TRIMEDIA_asli           => 13;
use constant TRIMEDIA_iadd           => 14;
use constant TRIMEDIA_isub           => 15;
use constant TRIMEDIA_igeq           => 16;
use constant TRIMEDIA_igtr           => 17;
use constant TRIMEDIA_bitand         => 18;
use constant TRIMEDIA_bitor          => 19;
use constant TRIMEDIA_asr            => 20;
use constant TRIMEDIA_asl            => 21;
use constant TRIMEDIA_ifloat         => 22;
use constant TRIMEDIA_ifixrz         => 23;
use constant TRIMEDIA_fadd           => 24;
use constant TRIMEDIA_imin           => 25;
use constant TRIMEDIA_imax           => 26;
use constant TRIMEDIA_iavgonep       => 27;
use constant TRIMEDIA_ume8uu         => 28;
use constant TRIMEDIA_imul           => 29;
use constant TRIMEDIA_fmul           => 30;
use constant TRIMEDIA_h_st8d         => 31;
use constant TRIMEDIA_h_st16d        => 32;
use constant TRIMEDIA_h_st32d        => 33;
use constant TRIMEDIA_isubi          => 34;
use constant TRIMEDIA_ugtr           => 35;
use constant TRIMEDIA_ugtri          => 36;
use constant TRIMEDIA_ugeq           => 37;
use constant TRIMEDIA_ugeqi          => 38;
use constant TRIMEDIA_ieql           => 39;
use constant TRIMEDIA_ueqli          => 40;
use constant TRIMEDIA_ineq           => 41;
use constant TRIMEDIA_uneqi          => 42;
use constant TRIMEDIA_ulesi          => 43;
use constant TRIMEDIA_ileqi          => 44;
use constant TRIMEDIA_uleqi          => 45;
use constant TRIMEDIA_h_iabs         => 46;
use constant TRIMEDIA_carry          => 47;
use constant TRIMEDIA_izero          => 48;
use constant TRIMEDIA_inonzero       => 49;
use constant TRIMEDIA_bitxor         => 50;
use constant TRIMEDIA_bitandinv      => 51;
use constant TRIMEDIA_bitinv         => 52;
use constant TRIMEDIA_sex16          => 53;
use constant TRIMEDIA_packbytes      => 54;
use constant TRIMEDIA_pack16lsb      => 55;
use constant TRIMEDIA_pack16msb      => 56;
use constant TRIMEDIA_ubytesel       => 57;
use constant TRIMEDIA_ibytesel       => 58;
use constant TRIMEDIA_mergelsb       => 59;
use constant TRIMEDIA_mergemsb       => 60;
use constant TRIMEDIA_ume8ii         => 61;
use constant TRIMEDIA_h_dspiabs      => 62;
use constant TRIMEDIA_dspiadd        => 63;
use constant TRIMEDIA_dspuadd        => 64;
use constant TRIMEDIA_dspisub        => 65;
use constant TRIMEDIA_dspusub        => 66;
use constant TRIMEDIA_dspidualadd    => 67;
use constant TRIMEDIA_dspidualsub    => 68;
use constant TRIMEDIA_h_dspidualabs  => 69;
use constant TRIMEDIA_quadavg        => 70;
use constant TRIMEDIA_iclipi         => 71;
use constant TRIMEDIA_uclipi         => 72;
use constant TRIMEDIA_uclipu         => 73;
use constant TRIMEDIA_iflip          => 74;
use constant TRIMEDIA_dspuquadaddui  => 75;
use constant TRIMEDIA_quadumin       => 76;
use constant TRIMEDIA_quadumax       => 77;
use constant TRIMEDIA_dualiclipi     => 78;
use constant TRIMEDIA_dualuclipi     => 79;
use constant TRIMEDIA_quadumulmsb    => 80;
use constant TRIMEDIA_ufir8uu        => 81;
use constant TRIMEDIA_ifir8ui        => 82;
use constant TRIMEDIA_ifir8ii        => 83;
use constant TRIMEDIA_ifir16         => 84;
use constant TRIMEDIA_ufir16         => 85;
use constant TRIMEDIA_dspidualmul    => 86;
use constant TRIMEDIA_lsr            => 87;
use constant TRIMEDIA_rol            => 88;
use constant TRIMEDIA_roli           => 89;
use constant TRIMEDIA_funshift1      => 90;
use constant TRIMEDIA_funshift2      => 91;
use constant TRIMEDIA_funshift3      => 92;
use constant TRIMEDIA_dualasr        => 93;
use constant TRIMEDIA_mergedual16lsb => 94;
use constant TRIMEDIA_fdiv           => 95;
use constant TRIMEDIA_fdivflags      => 96;
use constant TRIMEDIA_fsqrt          => 97;
use constant TRIMEDIA_fsqrtflags     => 98;
use constant TRIMEDIA_faddflags      => 99;
use constant TRIMEDIA_fsub           => 100;
use constant TRIMEDIA_fsubflags      => 101;
use constant TRIMEDIA_fabsval        => 102;
use constant TRIMEDIA_fabsvalflags   => 103;
use constant TRIMEDIA_ifloatrz       => 104;
use constant TRIMEDIA_ifloatrzflags  => 105;
use constant TRIMEDIA_ufloatrz       => 106;
use constant TRIMEDIA_ufloatrzflags  => 107;
use constant TRIMEDIA_ifixieee       => 108;
use constant TRIMEDIA_ifixieeeflags  => 109;
use constant TRIMEDIA_ufixieee       => 110;
use constant TRIMEDIA_ufixieeeflags  => 111;
use constant TRIMEDIA_ufixrz         => 112;
use constant TRIMEDIA_ufixrzflags    => 113;
use constant TRIMEDIA_ufloat         => 114;
use constant TRIMEDIA_ufloatflags    => 115;
use constant TRIMEDIA_ifixrzflags    => 116;
use constant TRIMEDIA_ifloatflags    => 117;
use constant TRIMEDIA_umul           => 118;
use constant TRIMEDIA_imulm          => 119;
use constant TRIMEDIA_umulm          => 120;
use constant TRIMEDIA_dspimul        => 121;
use constant TRIMEDIA_dspumul        => 122;
use constant TRIMEDIA_fmulflags      => 123;
use constant TRIMEDIA_fgtr           => 124;
use constant TRIMEDIA_fgtrflags      => 125;
use constant TRIMEDIA_fgeq           => 126;
use constant TRIMEDIA_fgeqflags      => 127;
use constant TRIMEDIA_feql           => 128;
use constant TRIMEDIA_feqlflags      => 129;
use constant TRIMEDIA_fneq           => 130;
use constant TRIMEDIA_fneqflags      => 131;
use constant TRIMEDIA_fsign          => 132;
use constant TRIMEDIA_fsignflags     => 133;
use constant TRIMEDIA_cycles         => 134;
use constant TRIMEDIA_hicycles       => 135;
use constant TRIMEDIA_readdpc        => 136;
use constant TRIMEDIA_readspc        => 137;
use constant TRIMEDIA_readpcsw       => 138;
use constant TRIMEDIA_writespc       => 139;
use constant TRIMEDIA_writedpc       => 140;
use constant TRIMEDIA_writepcsw      => 141;
use constant TRIMEDIA_curcycles      => 142;
use constant TRIMEDIA_jmpt           => 143;
use constant TRIMEDIA_ijmpt          => 144;
use constant TRIMEDIA_jmpi           => 145;
use constant TRIMEDIA_ijmpi          => 146;
use constant TRIMEDIA_jmpf           => 147;
use constant TRIMEDIA_ijmpf          => 148;
use constant TRIMEDIA_iclr           => 149;
use constant TRIMEDIA_uimm           => 150;
use constant TRIMEDIA_ild8d          => 151;
use constant TRIMEDIA_ild8r          => 152;
use constant TRIMEDIA_uld8r          => 153;
use constant TRIMEDIA_ild16r         => 154;
use constant TRIMEDIA_ild16x         => 155;
use constant TRIMEDIA_uld16d         => 156;
use constant TRIMEDIA_uld16r         => 157;
use constant TRIMEDIA_uld16x         => 158;
use constant TRIMEDIA_ld32r          => 159;
use constant TRIMEDIA_ld32x          => 160;
use constant TRIMEDIA_rdtag          => 161;
use constant TRIMEDIA_rdstatus       => 162;
use constant TRIMEDIA_dcb            => 163;
use constant TRIMEDIA_dinvalid       => 164;
use constant TRIMEDIA_prefd          => 165;
use constant TRIMEDIA_prefr          => 166;
use constant TRIMEDIA_pref16x        => 167;
use constant TRIMEDIA_pref32x        => 168;
use constant TRIMEDIA_allocd         => 169;
use constant TRIMEDIA_allocr         => 170;
use constant TRIMEDIA_allocx         => 171;
use constant TRIMEDIA_nop            => 172;
use constant TRIMEDIA_alloc          => 173;
use constant TRIMEDIA_dspiabs        => 174;
use constant TRIMEDIA_dspidualabs    => 175;
use constant TRIMEDIA_iabs           => 176;
use constant TRIMEDIA_ild16          => 177;
use constant TRIMEDIA_ild8           => 178;
use constant TRIMEDIA_ineg           => 179;
use constant TRIMEDIA_ld32           => 180;
use constant TRIMEDIA_pref           => 181;
use constant TRIMEDIA_sex8           => 182;
use constant TRIMEDIA_st16           => 183;
use constant TRIMEDIA_st16d          => 184;
use constant TRIMEDIA_st32           => 185;
use constant TRIMEDIA_st32d          => 186;
use constant TRIMEDIA_st8            => 187;
use constant TRIMEDIA_st8d           => 188;
use constant TRIMEDIA_uld16          => 189;
use constant TRIMEDIA_uld8           => 190;
use constant TRIMEDIA_zex16          => 191;
use constant TRIMEDIA_zex8           => 192;
use constant TRIMEDIA_ident          => 193;
use constant TRIMEDIA_iles           => 194;
use constant TRIMEDIA_ileq           => 195;
use constant TRIMEDIA_ules           => 196;
use constant TRIMEDIA_uleq           => 197;
use constant TRIMEDIA_fles           => 198;
use constant TRIMEDIA_fleq           => 199;
use constant TRIMEDIA_ueql           => 200;
use constant TRIMEDIA_uneq           => 201;
use constant TRIMEDIA_flesflags      => 202;
use constant TRIMEDIA_fleqflags      => 203;
use constant TRIMEDIA_borrow         => 204;
use constant TRIMEDIA_umin           => 205;
use constant TRIMEDIA_lsl            => 206;
use constant TRIMEDIA_lsli           => 207;
use constant TRIMEDIA_last           => 208;
use constant NEC_78K_0_null          => 0;
use constant NEC_78K_0_mov           => 1;
use constant NEC_78K_0_xch           => 2;
use constant NEC_78K_0_movw          => 3;
use constant NEC_78K_0_xchw          => 4;
use constant NEC_78K_0_add           => 5;
use constant NEC_78K_0_addc          => 6;
use constant NEC_78K_0_sub           => 7;
use constant NEC_78K_0_subc          => 8;
use constant NEC_78K_0_and           => 9;
use constant NEC_78K_0_or            => 10;
use constant NEC_78K_0_xor           => 11;
use constant NEC_78K_0_cmp           => 12;
use constant NEC_78K_0_addw          => 13;
use constant NEC_78K_0_subw          => 14;
use constant NEC_78K_0_cmpw          => 15;
use constant NEC_78K_0_mulu          => 16;
use constant NEC_78K_0_divuw         => 17;
use constant NEC_78K_0_inc           => 18;
use constant NEC_78K_0_dec           => 19;
use constant NEC_78K_0_incw          => 20;
use constant NEC_78K_0_decw          => 21;
use constant NEC_78K_0_ror           => 22;
use constant NEC_78K_0_rol           => 23;
use constant NEC_78K_0_rorc          => 24;
use constant NEC_78K_0_rolc          => 25;
use constant NEC_78K_0_ror4          => 26;
use constant NEC_78K_0_rol4          => 27;
use constant NEC_78K_0_adjba         => 28;
use constant NEC_78K_0_adjbs         => 29;
use constant NEC_78K_0_mov1          => 30;
use constant NEC_78K_0_and1          => 31;
use constant NEC_78K_0_or1           => 32;
use constant NEC_78K_0_xor1          => 33;
use constant NEC_78K_0_set1          => 34;
use constant NEC_78K_0_clr1          => 35;
use constant NEC_78K_0_not1          => 36;
use constant NEC_78K_0_call          => 37;
use constant NEC_78K_0_callf         => 38;
use constant NEC_78K_0_callt         => 39;
use constant NEC_78K_0_brk           => 40;
use constant NEC_78K_0_ret           => 41;
use constant NEC_78K_0_retb          => 42;
use constant NEC_78K_0_reti          => 43;
use constant NEC_78K_0_push          => 44;
use constant NEC_78K_0_pop           => 45;
use constant NEC_78K_0_br            => 46;
use constant NEC_78K_0_bc            => 47;
use constant NEC_78K_0_bnc           => 48;
use constant NEC_78K_0_bz            => 49;
use constant NEC_78K_0_bnz           => 50;
use constant NEC_78K_0_bt            => 51;
use constant NEC_78K_0_bf            => 52;
use constant NEC_78K_0_btclr         => 53;
use constant NEC_78K_0_dbnz          => 54;
use constant NEC_78K_0_sel           => 55;
use constant NEC_78K_0_nop           => 56;
use constant NEC_78K_0_EI            => 57;
use constant NEC_78K_0_DI            => 58;
use constant NEC_78K_0_HALT          => 59;
use constant NEC_78K_0_STOP          => 60;
use constant NEC_78K_0_last          => 61;
use constant NEC_78K_0S_null         => 0;
use constant NEC_78K_0S_cmp          => 1;
use constant NEC_78K_0S_xor          => 2;
use constant NEC_78K_0S_and          => 3;
use constant NEC_78K_0S_or           => 4;
use constant NEC_78K_0S_add          => 5;
use constant NEC_78K_0S_sub          => 6;
use constant NEC_78K_0S_addc         => 7;
use constant NEC_78K_0S_subc         => 8;
use constant NEC_78K_0S_subw         => 9;
use constant NEC_78K_0S_addw         => 10;
use constant NEC_78K_0S_cmpw         => 11;
use constant NEC_78K_0S_inc          => 12;
use constant NEC_78K_0S_dec          => 13;
use constant NEC_78K_0S_incw         => 14;
use constant NEC_78K_0S_decw         => 15;
use constant NEC_78K_0S_ror          => 16;
use constant NEC_78K_0S_rol          => 17;
use constant NEC_78K_0S_rorc         => 18;
use constant NEC_78K_0S_rolc         => 19;
use constant NEC_78K_0S_call         => 20;
use constant NEC_78K_0S_callt        => 21;
use constant NEC_78K_0S_ret          => 22;
use constant NEC_78K_0S_reti         => 23;
use constant NEC_78K_0S_mov          => 24;
use constant NEC_78K_0S_xch          => 25;
use constant NEC_78K_0S_xchw         => 26;
use constant NEC_78K_0S_set1         => 27;
use constant NEC_78K_0S_clr1         => 28;
use constant NEC_78K_0S_not1         => 29;
use constant NEC_78K_0S_push         => 30;
use constant NEC_78K_0S_pop          => 31;
use constant NEC_78K_0S_movw         => 32;
use constant NEC_78K_0S_br           => 33;
use constant NEC_78K_0S_bc           => 34;
use constant NEC_78K_0S_bnc          => 35;
use constant NEC_78K_0S_bz           => 36;
use constant NEC_78K_0S_bnz          => 37;
use constant NEC_78K_0S_bt           => 38;
use constant NEC_78K_0S_bf           => 39;
use constant NEC_78K_0S_dbnz         => 40;
use constant NEC_78K_0S_nop          => 41;
use constant NEC_78K_0S_EI           => 42;
use constant NEC_78K_0S_DI           => 43;
use constant NEC_78K_0S_HALT         => 44;
use constant NEC_78K_0S_STOP         => 45;
use constant NEC_78K_0S_last         => 46;
use constant M16C_null               => 0;
use constant M16C_abs                => 1;
use constant M16C_adc                => 2;
use constant M16C_adcf               => 3;
use constant M16C_add                => 4;
use constant M16C_adjnz              => 5;
use constant M16C_and                => 6;
use constant M16C_band               => 7;
use constant M16C_bclr               => 8;
use constant M16C_bmcnd              => 9;
use constant M16C_bmgeu              => 10;
use constant M16C_bmgtu              => 11;
use constant M16C_bmeq               => 12;
use constant M16C_bmn                => 13;
use constant M16C_bmle               => 14;
use constant M16C_bmo                => 15;
use constant M16C_bmge               => 16;
use constant M16C_bmltu              => 17;
use constant M16C_bmleu              => 18;
use constant M16C_bmne               => 19;
use constant M16C_bmpz               => 20;
use constant M16C_bmgt               => 21;
use constant M16C_bmno               => 22;
use constant M16C_bmlt               => 23;
use constant M16C_bnand              => 24;
use constant M16C_bnor               => 25;
use constant M16C_bnot               => 26;
use constant M16C_bntst              => 27;
use constant M16C_bnxor              => 28;
use constant M16C_bor                => 29;
use constant M16C_brk                => 30;
use constant M16C_bset               => 31;
use constant M16C_btst               => 32;
use constant M16C_btstc              => 33;
use constant M16C_btsts              => 34;
use constant M16C_bxor               => 35;
use constant M16C_cmp                => 36;
use constant M16C_dadc               => 37;
use constant M16C_dadd               => 38;
use constant M16C_dec                => 39;
use constant M16C_div                => 40;
use constant M16C_divu               => 41;
use constant M16C_divx               => 42;
use constant M16C_dsbb               => 43;
use constant M16C_dsub               => 44;
use constant M16C_enter              => 45;
use constant M16C_exitd              => 46;
use constant M16C_exts               => 47;
use constant M16C_fclr               => 48;
use constant M16C_fset               => 49;
use constant M16C_inc                => 50;
use constant M16C_int                => 51;
use constant M16C_into               => 52;
use constant M16C_jcnd               => 53;
use constant M16C_jgeu               => 54;
use constant M16C_jgtu               => 55;
use constant M16C_jeq                => 56;
use constant M16C_jn                 => 57;
use constant M16C_jle                => 58;
use constant M16C_jo                 => 59;
use constant M16C_jge                => 60;
use constant M16C_jltu               => 61;
use constant M16C_jleu               => 62;
use constant M16C_jne                => 63;
use constant M16C_jpz                => 64;
use constant M16C_jgt                => 65;
use constant M16C_jno                => 66;
use constant M16C_jlt                => 67;
use constant M16C_jmp                => 68;
use constant M16C_jmpi               => 69;
use constant M16C_jmps               => 70;
use constant M16C_jsr                => 71;
use constant M16C_jsri               => 72;
use constant M16C_jsrs               => 73;
use constant M16C_ldc                => 74;
use constant M16C_ldctx              => 75;
use constant M16C_lde                => 76;
use constant M16C_ldintb             => 77;
use constant M16C_ldipl              => 78;
use constant M16C_mov                => 79;
use constant M16C_mova               => 80;
use constant M16C_movhh              => 81;
use constant M16C_movhl              => 82;
use constant M16C_movlh              => 83;
use constant M16C_movll              => 84;
use constant M16C_mul                => 85;
use constant M16C_mulu               => 86;
use constant M16C_neg                => 87;
use constant M16C_nop                => 88;
use constant M16C_not                => 89;
use constant M16C_or                 => 90;
use constant M16C_pop                => 91;
use constant M16C_popc               => 92;
use constant M16C_popm               => 93;
use constant M16C_push               => 94;
use constant M16C_pusha              => 95;
use constant M16C_pushc              => 96;
use constant M16C_pushm              => 97;
use constant M16C_reit               => 98;
use constant M16C_rmpa               => 99;
use constant M16C_rolc               => 100;
use constant M16C_rorc               => 101;
use constant M16C_rot                => 102;
use constant M16C_rts                => 103;
use constant M16C_sbb                => 104;
use constant M16C_sbjnz              => 105;
use constant M16C_sha                => 106;
use constant M16C_shl                => 107;
use constant M16C_smovb              => 108;
use constant M16C_smovf              => 109;
use constant M16C_sstr               => 110;
use constant M16C_stc                => 111;
use constant M16C_stctx              => 112;
use constant M16C_ste                => 113;
use constant M16C_stnz               => 114;
use constant M16C_stz                => 115;
use constant M16C_stzx               => 116;
use constant M16C_sub                => 117;
use constant M16C_tst                => 118;
use constant M16C_und                => 119;
use constant M16C_wait               => 120;
use constant M16C_xchg               => 121;
use constant M16C_xor                => 122;
use constant M16C_last               => 123;
use constant m32r_null               => 0;
use constant m32r_add                => 1;
use constant m32r_add3               => 2;
use constant m32r_addi               => 3;
use constant m32r_addv               => 4;
use constant m32r_addv3              => 5;
use constant m32r_addx               => 6;
use constant m32r_and                => 7;
use constant m32r_and3               => 8;
use constant m32r_bc                 => 9;
use constant m32r_beq                => 10;
use constant m32r_beqz               => 11;
use constant m32r_bgez               => 12;
use constant m32r_bgtz               => 13;
use constant m32r_bl                 => 14;
use constant m32r_blez               => 15;
use constant m32r_bltz               => 16;
use constant m32r_bnc                => 17;
use constant m32r_bne                => 18;
use constant m32r_bnez               => 19;
use constant m32r_bra                => 20;
use constant m32r_cmp                => 21;
use constant m32r_cmpi               => 22;
use constant m32r_cmpu               => 23;
use constant m32r_cmpui              => 24;
use constant m32r_div                => 25;
use constant m32r_divu               => 26;
use constant m32r_jl                 => 27;
use constant m32r_jmp                => 28;
use constant m32r_ld                 => 29;
use constant m32r_ld24               => 30;
use constant m32r_ldb                => 31;
use constant m32r_ldh                => 32;
use constant m32r_ldi                => 33;
use constant m32r_ldub               => 34;
use constant m32r_lduh               => 35;
use constant m32r_lock               => 36;
use constant m32r_machi              => 37;
use constant m32r_maclo              => 38;
use constant m32r_macwhi             => 39;
use constant m32r_macwlo             => 40;
use constant m32r_mul                => 41;
use constant m32r_mulhi              => 42;
use constant m32r_mullo              => 43;
use constant m32r_mulwhi             => 44;
use constant m32r_mulwlo             => 45;
use constant m32r_mv                 => 46;
use constant m32r_mvfachi            => 47;
use constant m32r_mvfaclo            => 48;
use constant m32r_mvfacmi            => 49;
use constant m32r_mvfc               => 50;
use constant m32r_mvtachi            => 51;
use constant m32r_mvtaclo            => 52;
use constant m32r_mvtc               => 53;
use constant m32r_neg                => 54;
use constant m32r_nop                => 55;
use constant m32r_not                => 56;
use constant m32r_or                 => 57;
use constant m32r_or3                => 58;
use constant m32r_push               => 59;
use constant m32r_pop                => 60;
use constant m32r_rac                => 61;
use constant m32r_rach               => 62;
use constant m32r_rem                => 63;
use constant m32r_remu               => 64;
use constant m32r_rte                => 65;
use constant m32r_seth               => 66;
use constant m32r_sll                => 67;
use constant m32r_sll3               => 68;
use constant m32r_slli               => 69;
use constant m32r_sra                => 70;
use constant m32r_sra3               => 71;
use constant m32r_srai               => 72;
use constant m32r_srl                => 73;
use constant m32r_srl3               => 74;
use constant m32r_srli               => 75;
use constant m32r_st                 => 76;
use constant m32r_stb                => 77;
use constant m32r_sth                => 78;
use constant m32r_sub                => 79;
use constant m32r_subv               => 80;
use constant m32r_subx               => 81;
use constant m32r_trap               => 82;
use constant m32r_unlock             => 83;
use constant m32r_xor                => 84;
use constant m32r_xor3               => 85;
use constant m32rx_bcl               => 86;
use constant m32rx_bncl              => 87;
use constant m32rx_cmpeq             => 88;
use constant m32rx_cmpz              => 89;
use constant m32rx_divh              => 90;
use constant m32rx_jc                => 91;
use constant m32rx_jnc               => 92;
use constant m32rx_machi             => 93;
use constant m32rx_maclo             => 94;
use constant m32rx_macwhi            => 95;
use constant m32rx_macwlo            => 96;
use constant m32rx_mulhi             => 97;
use constant m32rx_mullo             => 98;
use constant m32rx_mulwhi            => 99;
use constant m32rx_mulwlo            => 100;
use constant m32rx_mvfachi           => 101;
use constant m32rx_mvfaclo           => 102;
use constant m32rx_mvfacmi           => 103;
use constant m32rx_mvtachi           => 104;
use constant m32rx_mvtaclo           => 105;
use constant m32rx_rac               => 106;
use constant m32rx_rach              => 107;
use constant m32rx_satb              => 108;
use constant m32rx_sath              => 109;
use constant m32rx_sat               => 110;
use constant m32rx_pcmpbz            => 111;
use constant m32rx_sadd              => 112;
use constant m32rx_macwu1            => 113;
use constant m32rx_msblo             => 114;
use constant m32rx_mulwu1            => 115;
use constant m32rx_maclh1            => 116;
use constant m32rx_sc                => 117;
use constant m32rx_snc               => 118;
use constant m32r_fadd               => 119;
use constant m32r_fsub               => 120;
use constant m32r_fmul               => 121;
use constant m32r_fdiv               => 122;
use constant m32r_fmadd              => 123;
use constant m32r_fmsub              => 124;
use constant m32r_itof               => 125;
use constant m32r_utof               => 126;
use constant m32r_ftoi               => 127;
use constant m32r_ftos               => 128;
use constant m32r_fcmp               => 129;
use constant m32r_fcmpe              => 130;
use constant m32r_bset               => 131;
use constant m32r_bclr               => 132;
use constant m32r_btst               => 133;
use constant m32r_setpsw             => 134;
use constant m32r_clrpsw             => 135;
use constant m32r_last               => 136;
use constant m740_null               => 0;
use constant m740_adc                => 1;
use constant m740_and                => 2;
use constant m740_asl                => 3;
use constant m740_bbc                => 4;
use constant m740_bbs                => 5;
use constant m740_bcc                => 6;
use constant m740_bcs                => 7;
use constant m740_beq                => 8;
use constant m740_bit                => 9;
use constant m740_bmi                => 10;
use constant m740_bne                => 11;
use constant m740_bpl                => 12;
use constant m740_bra                => 13;
use constant m740_brk                => 14;
use constant m740_bvc                => 15;
use constant m740_bvs                => 16;
use constant m740_clb                => 17;
use constant m740_clc                => 18;
use constant m740_cld                => 19;
use constant m740_cli                => 20;
use constant m740_clt                => 21;
use constant m740_clv                => 22;
use constant m740_cmp                => 23;
use constant m740_com                => 24;
use constant m740_cpx                => 25;
use constant m740_cpy                => 26;
use constant m740_dec                => 27;
use constant m740_dex                => 28;
use constant m740_dey                => 29;
use constant m740_div                => 30;
use constant m740_eor                => 31;
use constant m740_inc                => 32;
use constant m740_inx                => 33;
use constant m740_iny                => 34;
use constant m740_jmp                => 35;
use constant m740_jsr                => 36;
use constant m740_lda                => 37;
use constant m740_ldm                => 38;
use constant m740_ldx                => 39;
use constant m740_ldy                => 40;
use constant m740_lsr                => 41;
use constant m740_mul                => 42;
use constant m740_nop                => 43;
use constant m740_ora                => 44;
use constant m740_pha                => 45;
use constant m740_php                => 46;
use constant m740_pla                => 47;
use constant m740_plp                => 48;
use constant m740_rol                => 49;
use constant m740_ror                => 50;
use constant m740_rrf                => 51;
use constant m740_rti                => 52;
use constant m740_rts                => 53;
use constant m740_sbc                => 54;
use constant m740_seb                => 55;
use constant m740_sec                => 56;
use constant m740_sed                => 57;
use constant m740_sei                => 58;
use constant m740_set                => 59;
use constant m740_sta                => 60;
use constant m740_stp                => 61;
use constant m740_stx                => 62;
use constant m740_sty                => 63;
use constant m740_tax                => 64;
use constant m740_tay                => 65;
use constant m740_tst                => 66;
use constant m740_tsx                => 67;
use constant m740_txa                => 68;
use constant m740_txs                => 69;
use constant m740_tya                => 70;
use constant m740_wit                => 71;
use constant m740_last               => 72;
use constant m7700_null              => 0;
use constant m7700_adc               => 1;
use constant m7700_and               => 2;
use constant m7700_asl               => 3;
use constant m7700_bbc               => 4;
use constant m7700_bbs               => 5;
use constant m7700_bcc               => 6;
use constant m7700_bcs               => 7;
use constant m7700_beq               => 8;
use constant m7700_bmi               => 9;
use constant m7700_bne               => 10;
use constant m7700_bpl               => 11;
use constant m7700_bra               => 12;
use constant m7700_brk               => 13;
use constant m7700_bvc               => 14;
use constant m7700_bvs               => 15;
use constant m7700_clb               => 16;
use constant m7700_clc               => 17;
use constant m7700_cli               => 18;
use constant m7700_clm               => 19;
use constant m7700_clp               => 20;
use constant m7700_clv               => 21;
use constant m7700_cmp               => 22;
use constant m7700_cpx               => 23;
use constant m7700_cpy               => 24;
use constant m7700_dec               => 25;
use constant m7700_dex               => 26;
use constant m7700_dey               => 27;
use constant m7700_div               => 28;
use constant m7700_eor               => 29;
use constant m7700_inc               => 30;
use constant m7700_inx               => 31;
use constant m7700_iny               => 32;
use constant m7700_jmp               => 33;
use constant m7700_jsr               => 34;
use constant m7700_lda               => 35;
use constant m7700_ldm               => 36;
use constant m7700_ldt               => 37;
use constant m7700_ldx               => 38;
use constant m7700_ldy               => 39;
use constant m7700_lsr               => 40;
use constant m7700_mpy               => 41;
use constant m7700_mvn               => 42;
use constant m7700_mvp               => 43;
use constant m7700_nop               => 44;
use constant m7700_ora               => 45;
use constant m7700_pea               => 46;
use constant m7700_pei               => 47;
use constant m7700_per               => 48;
use constant m7700_pha               => 49;
use constant m7700_phb               => 50;
use constant m7700_phd               => 51;
use constant m7700_phg               => 52;
use constant m7700_php               => 53;
use constant m7700_pht               => 54;
use constant m7700_phx               => 55;
use constant m7700_phy               => 56;
use constant m7700_pla               => 57;
use constant m7700_plb               => 58;
use constant m7700_pld               => 59;
use constant m7700_plp               => 60;
use constant m7700_plt               => 61;
use constant m7700_plx               => 62;
use constant m7700_ply               => 63;
use constant m7700_psh               => 64;
use constant m7700_pul               => 65;
use constant m7700_rla               => 66;
use constant m7700_rol               => 67;
use constant m7700_ror               => 68;
use constant m7700_rti               => 69;
use constant m7700_rtl               => 70;
use constant m7700_rts               => 71;
use constant m7700_sbc               => 72;
use constant m7700_seb               => 73;
use constant m7700_sec               => 74;
use constant m7700_sei               => 75;
use constant m7700_sem               => 76;
use constant m7700_sep               => 77;
use constant m7700_sta               => 78;
use constant m7700_stp               => 79;
use constant m7700_stx               => 80;
use constant m7700_sty               => 81;
use constant m7700_tad               => 82;
use constant m7700_tas               => 83;
use constant m7700_tax               => 84;
use constant m7700_tay               => 85;
use constant m7700_tbd               => 86;
use constant m7700_tbs               => 87;
use constant m7700_tbx               => 88;
use constant m7700_tby               => 89;
use constant m7700_tda               => 90;
use constant m7700_tdb               => 91;
use constant m7700_tsa               => 92;
use constant m7700_tsb               => 93;
use constant m7700_tsx               => 94;
use constant m7700_txa               => 95;
use constant m7700_txb               => 96;
use constant m7700_txs               => 97;
use constant m7700_txy               => 98;
use constant m7700_tya               => 99;
use constant m7700_tyb               => 100;
use constant m7700_tyx               => 101;
use constant m7700_wit               => 102;
use constant m7700_xab               => 103;
use constant m7750_asr               => 104;
use constant m7750_divs              => 105;
use constant m7750_exts              => 106;
use constant m7750_extz              => 107;
use constant m7750_mpys              => 108;
use constant m7700_last              => 109;
use constant m7900_null              => 0;
use constant m7900_abs               => 1;
use constant m7900_absd              => 2;
use constant m7900_adc               => 3;
use constant m7900_adcb              => 4;
use constant m7900_adcd              => 5;
use constant m7900_add               => 6;
use constant m7900_addb              => 7;
use constant m7900_addd              => 8;
use constant m7900_addm              => 9;
use constant m7900_addmb             => 10;
use constant m7900_addmd             => 11;
use constant m7900_adds              => 12;
use constant m7900_addx              => 13;
use constant m7900_addy              => 14;
use constant m7900_and               => 15;
use constant m7900_andb              => 16;
use constant m7900_andm              => 17;
use constant m7900_andmb             => 18;
use constant m7900_andmd             => 19;
use constant m7900_asl               => 20;
use constant m7900_asln              => 21;
use constant m7900_asldn             => 22;
use constant m7900_asr               => 23;
use constant m7900_asrn              => 24;
use constant m7900_asrdn             => 25;
use constant m7900_bbc               => 26;
use constant m7900_bbcb              => 27;
use constant m7900_bbs               => 28;
use constant m7900_bbsb              => 29;
use constant m7900_bcc               => 30;
use constant m7900_bcs               => 31;
use constant m7900_beq               => 32;
use constant m7900_bge               => 33;
use constant m7900_bgt               => 34;
use constant m7900_bgtu              => 35;
use constant m7900_ble               => 36;
use constant m7900_bleu              => 37;
use constant m7900_blt               => 38;
use constant m7900_bmi               => 39;
use constant m7900_bne               => 40;
use constant m7900_bpl               => 41;
use constant m7900_bra               => 42;
use constant m7900_bral              => 43;
use constant m7900_brk               => 44;
use constant m7900_bsc               => 45;
use constant m7900_bsr               => 46;
use constant m7900_bss               => 47;
use constant m7900_bvc               => 48;
use constant m7900_bvs               => 49;
use constant m7900_cbeq              => 50;
use constant m7900_cbeqb             => 51;
use constant m7900_cbne              => 52;
use constant m7900_cbneb             => 53;
use constant m7900_clc               => 54;
use constant m7900_cli               => 55;
use constant m7900_clm               => 56;
use constant m7900_clp               => 57;
use constant m7900_clr               => 58;
use constant m7900_clrb              => 59;
use constant m7900_clrm              => 60;
use constant m7900_clrmb             => 61;
use constant m7900_clrx              => 62;
use constant m7900_clry              => 63;
use constant m7900_clv               => 64;
use constant m7900_cmp               => 65;
use constant m7900_cmpb              => 66;
use constant m7900_cmpd              => 67;
use constant m7900_cmpm              => 68;
use constant m7900_cmpmb             => 69;
use constant m7900_cmpmd             => 70;
use constant m7900_cpx               => 71;
use constant m7900_cpy               => 72;
use constant m7900_debne             => 73;
use constant m7900_dec               => 74;
use constant m7900_dex               => 75;
use constant m7900_dey               => 76;
use constant m7900_div               => 77;
use constant m7900_divs              => 78;
use constant m7900_dxbne             => 79;
use constant m7900_dybne             => 80;
use constant m7900_eor               => 81;
use constant m7900_eorb              => 82;
use constant m7900_eorm              => 83;
use constant m7900_eormb             => 84;
use constant m7900_eormd             => 85;
use constant m7900_exts              => 86;
use constant m7900_extsd             => 87;
use constant m7900_extz              => 88;
use constant m7900_extzd             => 89;
use constant m7900_inc               => 90;
use constant m7900_inx               => 91;
use constant m7900_iny               => 92;
use constant m7900_jmp               => 93;
use constant m7900_jmpl              => 94;
use constant m7900_jsr               => 95;
use constant m7900_jsrl              => 96;
use constant m7900_lda               => 97;
use constant m7900_ldab              => 98;
use constant m7900_ldad              => 99;
use constant m7900_lddn              => 100;
use constant m7900_ldt               => 101;
use constant m7900_ldx               => 102;
use constant m7900_ldxb              => 103;
use constant m7900_ldy               => 104;
use constant m7900_ldyb              => 105;
use constant m7900_lsr               => 106;
use constant m7900_lsrn              => 107;
use constant m7900_lsrdn             => 108;
use constant m7900_movm              => 109;
use constant m7900_movmb             => 110;
use constant m7900_movr              => 111;
use constant m7900_movrb             => 112;
use constant m7900_mpy               => 113;
use constant m7900_mpys              => 114;
use constant m7900_mvn               => 115;
use constant m7900_mvp               => 116;
use constant m7900_neg               => 117;
use constant m7900_negd              => 118;
use constant m7900_nop               => 119;
use constant m7900_ora               => 120;
use constant m7900_orab              => 121;
use constant m7900_oram              => 122;
use constant m7900_oramb             => 123;
use constant m7900_oramd             => 124;
use constant m7900_pea               => 125;
use constant m7900_pei               => 126;
use constant m7900_per               => 127;
use constant m7900_pha               => 128;
use constant m7900_phb               => 129;
use constant m7900_phd               => 130;
use constant m7900_phdn              => 131;
use constant m7900_phg               => 132;
use constant m7900_phldn             => 133;
use constant m7900_php               => 134;
use constant m7900_pht               => 135;
use constant m7900_phx               => 136;
use constant m7900_phy               => 137;
use constant m7900_pla               => 138;
use constant m7900_plb               => 139;
use constant m7900_pld               => 140;
use constant m7900_pldn              => 141;
use constant m7900_plp               => 142;
use constant m7900_plt               => 143;
use constant m7900_plx               => 144;
use constant m7900_ply               => 145;
use constant m7900_psh               => 146;
use constant m7900_pul               => 147;
use constant m7900_rla               => 148;
use constant m7900_rmpa              => 149;
use constant m7900_rol               => 150;
use constant m7900_roln              => 151;
use constant m7900_roldn             => 152;
use constant m7900_ror               => 153;
use constant m7900_rorn              => 154;
use constant m7900_rordn             => 155;
use constant m7900_rti               => 156;
use constant m7900_rtl               => 157;
use constant m7900_rtld              => 158;
use constant m7900_rts               => 159;
use constant m7900_rtsdn             => 160;
use constant m7900_sbc               => 161;
use constant m7900_sbcb              => 162;
use constant m7900_sbcd              => 163;
use constant m7900_sec               => 164;
use constant m7900_sei               => 165;
use constant m7900_sem               => 166;
use constant m7900_sep               => 167;
use constant m7900_sta               => 168;
use constant m7900_stab              => 169;
use constant m7900_stad              => 170;
use constant m7900_stp               => 171;
use constant m7900_stx               => 172;
use constant m7900_sty               => 173;
use constant m7900_sub               => 174;
use constant m7900_subb              => 175;
use constant m7900_subd              => 176;
use constant m7900_subm              => 177;
use constant m7900_submb             => 178;
use constant m7900_submd             => 179;
use constant m7900_subs              => 180;
use constant m7900_subx              => 181;
use constant m7900_suby              => 182;
use constant m7900_tadn              => 183;
use constant m7900_tas               => 184;
use constant m7900_tax               => 185;
use constant m7900_tay               => 186;
use constant m7900_tbdn              => 187;
use constant m7900_tbs               => 188;
use constant m7900_tbx               => 189;
use constant m7900_tby               => 190;
use constant m7900_tdan              => 191;
use constant m7900_tdbn              => 192;
use constant m7900_tds               => 193;
use constant m7900_tsa               => 194;
use constant m7900_tsb               => 195;
use constant m7900_tsd               => 196;
use constant m7900_tsx               => 197;
use constant m7900_txa               => 198;
use constant m7900_txb               => 199;
use constant m7900_txs               => 200;
use constant m7900_txy               => 201;
use constant m7900_tya               => 202;
use constant m7900_tyb               => 203;
use constant m7900_tyx               => 204;
use constant m7900_wit               => 205;
use constant m7900_xab               => 206;
use constant m7900_last              => 207;
use constant st9_null                => 0;
use constant st9_ld                  => 1;
use constant st9_ldw                 => 2;
use constant st9_ldpp                => 3;
use constant st9_ldpd                => 4;
use constant st9_lddp                => 5;
use constant st9_lddd                => 6;
use constant st9_add                 => 7;
use constant st9_addw                => 8;
use constant st9_adc                 => 9;
use constant st9_adcw                => 10;
use constant st9_sub                 => 11;
use constant st9_subw                => 12;
use constant st9_sbc                 => 13;
use constant st9_sbcw                => 14;
use constant st9_and                 => 15;
use constant st9_andw                => 16;
use constant st9_or                  => 17;
use constant st9_orw                 => 18;
use constant st9_xor                 => 19;
use constant st9_xorw                => 20;
use constant st9_cp                  => 21;
use constant st9_cpw                 => 22;
use constant st9_tm                  => 23;
use constant st9_tmw                 => 24;
use constant st9_tcm                 => 25;
use constant st9_tcmw                => 26;
use constant st9_inc                 => 27;
use constant st9_incw                => 28;
use constant st9_dec                 => 29;
use constant st9_decw                => 30;
use constant st9_sla                 => 31;
use constant st9_slaw                => 32;
use constant st9_sra                 => 33;
use constant st9_sraw                => 34;
use constant st9_rrc                 => 35;
use constant st9_rrcw                => 36;
use constant st9_rlc                 => 37;
use constant st9_rlcw                => 38;
use constant st9_ror                 => 39;
use constant st9_rol                 => 40;
use constant st9_clr                 => 41;
use constant st9_cpl                 => 42;
use constant st9_swap                => 43;
use constant st9_da                  => 44;
use constant st9_push                => 45;
use constant st9_pushw               => 46;
use constant st9_pea                 => 47;
use constant st9_pop                 => 48;
use constant st9_popw                => 49;
use constant st9_pushu               => 50;
use constant st9_pushuw              => 51;
use constant st9_peau                => 52;
use constant st9_popu                => 53;
use constant st9_popuw               => 54;
use constant st9_link                => 55;
use constant st9_unlink              => 56;
use constant st9_linku               => 57;
use constant st9_unlinku             => 58;
use constant st9_mul                 => 59;
use constant st9_div                 => 60;
use constant st9_divws               => 61;
use constant st9_bset                => 62;
use constant st9_bres                => 63;
use constant st9_bcpl                => 64;
use constant st9_btset               => 65;
use constant st9_bld                 => 66;
use constant st9_band                => 67;
use constant st9_bor                 => 68;
use constant st9_bxor                => 69;
use constant st9_ret                 => 70;
use constant st9_rets                => 71;
use constant st9_iret                => 72;
use constant st9_jrcc                => 73;
use constant st9_jpcc                => 74;
use constant st9_jp                  => 75;
use constant st9_jps                 => 76;
use constant st9_call                => 77;
use constant st9_calls               => 78;
use constant st9_btjf                => 79;
use constant st9_btjt                => 80;
use constant st9_djnz                => 81;
use constant st9_dwjnz               => 82;
use constant st9_cpjfi               => 83;
use constant st9_cpjti               => 84;
use constant st9_xch                 => 85;
use constant st9_srp                 => 86;
use constant st9_srp0                => 87;
use constant st9_srp1                => 88;
use constant st9_spp                 => 89;
use constant st9_ext                 => 90;
use constant st9_ei                  => 91;
use constant st9_di                  => 92;
use constant st9_scf                 => 93;
use constant st9_rcf                 => 94;
use constant st9_ccf                 => 95;
use constant st9_spm                 => 96;
use constant st9_sdm                 => 97;
use constant st9_nop                 => 98;
use constant st9_wfi                 => 99;
use constant st9_halt                => 100;
use constant st9_etrap               => 101;
use constant st9_eret                => 102;
use constant st9_ald                 => 103;
use constant st9_aldw                => 104;
use constant st9_last                => 105;
use constant fr_null                 => 0;
use constant fr_add                  => 1;
use constant fr_add2                 => 2;
use constant fr_addc                 => 3;
use constant fr_addn                 => 4;
use constant fr_addn2                => 5;
use constant fr_sub                  => 6;
use constant fr_subc                 => 7;
use constant fr_subn                 => 8;
use constant fr_cmp                  => 9;
use constant fr_cmp2                 => 10;
use constant fr_and                  => 11;
use constant fr_andh                 => 12;
use constant fr_andb                 => 13;
use constant fr_or                   => 14;
use constant fr_orh                  => 15;
use constant fr_orb                  => 16;
use constant fr_eor                  => 17;
use constant fr_eorh                 => 18;
use constant fr_eorb                 => 19;
use constant fr_bandl                => 20;
use constant fr_bandh                => 21;
use constant fr_borl                 => 22;
use constant fr_borh                 => 23;
use constant fr_beorl                => 24;
use constant fr_beorh                => 25;
use constant fr_btstl                => 26;
use constant fr_btsth                => 27;
use constant fr_mul                  => 28;
use constant fr_mulu                 => 29;
use constant fr_mulh                 => 30;
use constant fr_muluh                => 31;
use constant fr_div0s                => 32;
use constant fr_div0u                => 33;
use constant fr_div1                 => 34;
use constant fr_div2                 => 35;
use constant fr_div3                 => 36;
use constant fr_div4s                => 37;
use constant fr_lsl                  => 38;
use constant fr_lsl2                 => 39;
use constant fr_lsr                  => 40;
use constant fr_lsr2                 => 41;
use constant fr_asr                  => 42;
use constant fr_asr2                 => 43;
use constant fr_ldi_32               => 44;
use constant fr_ldi_20               => 45;
use constant fr_ldi_8                => 46;
use constant fr_ld                   => 47;
use constant fr_lduh                 => 48;
use constant fr_ldub                 => 49;
use constant fr_st                   => 50;
use constant fr_sth                  => 51;
use constant fr_stb                  => 52;
use constant fr_mov                  => 53;
use constant fr_jmp                  => 54;
use constant fr_call                 => 55;
use constant fr_ret                  => 56;
use constant fr_int                  => 57;
use constant fr_inte                 => 58;
use constant fr_reti                 => 59;
use constant fr_bra                  => 60;
use constant fr_bno                  => 61;
use constant fr_beq                  => 62;
use constant fr_bne                  => 63;
use constant fr_bc                   => 64;
use constant fr_bnc                  => 65;
use constant fr_bn                   => 66;
use constant fr_bp                   => 67;
use constant fr_bv                   => 68;
use constant fr_bnv                  => 69;
use constant fr_blt                  => 70;
use constant fr_bge                  => 71;
use constant fr_ble                  => 72;
use constant fr_bgt                  => 73;
use constant fr_bls                  => 74;
use constant fr_bhi                  => 75;
use constant fr_dmov                 => 76;
use constant fr_dmovh                => 77;
use constant fr_dmovb                => 78;
use constant fr_ldres                => 79;
use constant fr_stres                => 80;
use constant fr_copop                => 81;
use constant fr_copld                => 82;
use constant fr_copst                => 83;
use constant fr_copsv                => 84;
use constant fr_nop                  => 85;
use constant fr_andccr               => 86;
use constant fr_orccr                => 87;
use constant fr_stilm                => 88;
use constant fr_addsp                => 89;
use constant fr_extsb                => 90;
use constant fr_extub                => 91;
use constant fr_extsh                => 92;
use constant fr_extuh                => 93;
use constant fr_ldm0                 => 94;
use constant fr_ldm1                 => 95;
use constant fr_stm0                 => 96;
use constant fr_stm1                 => 97;
use constant fr_enter                => 98;
use constant fr_leave                => 99;
use constant fr_xchb                 => 100;
use constant fr_last                 => 101;
use constant ALPHA_null              => 0;
use constant ALPHA_addf              => 1;
use constant ALPHA_addg              => 2;
use constant ALPHA_addl              => 3;
use constant ALPHA_addl_v            => 4;
use constant ALPHA_addq              => 5;
use constant ALPHA_addq_v            => 6;
use constant ALPHA_adds              => 7;
use constant ALPHA_addt              => 8;
use constant ALPHA_amask             => 9;
use constant ALPHA_and               => 10;
use constant ALPHA_beq               => 11;
use constant ALPHA_bge               => 12;
use constant ALPHA_bgt               => 13;
use constant ALPHA_bic               => 14;
use constant ALPHA_bis               => 15;
use constant ALPHA_blbc              => 16;
use constant ALPHA_blbs              => 17;
use constant ALPHA_ble               => 18;
use constant ALPHA_blt               => 19;
use constant ALPHA_bne               => 20;
use constant ALPHA_br                => 21;
use constant ALPHA_bsr               => 22;
use constant ALPHA_call_pal          => 23;
use constant ALPHA_cmoveq            => 24;
use constant ALPHA_cmovge            => 25;
use constant ALPHA_cmovgt            => 26;
use constant ALPHA_cmovlbc           => 27;
use constant ALPHA_cmovlbs           => 28;
use constant ALPHA_cmovle            => 29;
use constant ALPHA_cmovlt            => 30;
use constant ALPHA_cmovne            => 31;
use constant ALPHA_cmpbge            => 32;
use constant ALPHA_cmpeq             => 33;
use constant ALPHA_cmpgeq            => 34;
use constant ALPHA_cmpgle            => 35;
use constant ALPHA_cmpglt            => 36;
use constant ALPHA_cmple             => 37;
use constant ALPHA_cmplt             => 38;
use constant ALPHA_cmpteq            => 39;
use constant ALPHA_cmptle            => 40;
use constant ALPHA_cmptlt            => 41;
use constant ALPHA_cmptun            => 42;
use constant ALPHA_cmpule            => 43;
use constant ALPHA_cmpult            => 44;
use constant ALPHA_cpys              => 45;
use constant ALPHA_cpyse             => 46;
use constant ALPHA_cpysn             => 47;
use constant ALPHA_ctlz              => 48;
use constant ALPHA_ctpop             => 49;
use constant ALPHA_cttz              => 50;
use constant ALPHA_cvtdg             => 51;
use constant ALPHA_cvtgd             => 52;
use constant ALPHA_cvtgf             => 53;
use constant ALPHA_cvtgq             => 54;
use constant ALPHA_cvtlq             => 55;
use constant ALPHA_cvtqf             => 56;
use constant ALPHA_cvtqg             => 57;
use constant ALPHA_cvtql             => 58;
use constant ALPHA_cvtqs             => 59;
use constant ALPHA_cvtqt             => 60;
use constant ALPHA_cvtst             => 61;
use constant ALPHA_cvttq             => 62;
use constant ALPHA_cvtts             => 63;
use constant ALPHA_divf              => 64;
use constant ALPHA_divg              => 65;
use constant ALPHA_divs              => 66;
use constant ALPHA_divt              => 67;
use constant ALPHA_ecb               => 68;
use constant ALPHA_eqv               => 69;
use constant ALPHA_excb              => 70;
use constant ALPHA_extbl             => 71;
use constant ALPHA_extlh             => 72;
use constant ALPHA_extll             => 73;
use constant ALPHA_extqh             => 74;
use constant ALPHA_extql             => 75;
use constant ALPHA_extwh             => 76;
use constant ALPHA_extwl             => 77;
use constant ALPHA_fbeq              => 78;
use constant ALPHA_fbge              => 79;
use constant ALPHA_fbgt              => 80;
use constant ALPHA_fble              => 81;
use constant ALPHA_fblt              => 82;
use constant ALPHA_fbne              => 83;
use constant ALPHA_fcmoveq           => 84;
use constant ALPHA_fcmovge           => 85;
use constant ALPHA_fcmovgt           => 86;
use constant ALPHA_fcmovle           => 87;
use constant ALPHA_fcmovlt           => 88;
use constant ALPHA_fcmovne           => 89;
use constant ALPHA_fetch             => 90;
use constant ALPHA_fetch_m           => 91;
use constant ALPHA_ftois             => 92;
use constant ALPHA_ftoit             => 93;
use constant ALPHA_implver           => 94;
use constant ALPHA_insbl             => 95;
use constant ALPHA_inslh             => 96;
use constant ALPHA_insll             => 97;
use constant ALPHA_insqh             => 98;
use constant ALPHA_insql             => 99;
use constant ALPHA_inswh             => 100;
use constant ALPHA_inswl             => 101;
use constant ALPHA_itoff             => 102;
use constant ALPHA_itofs             => 103;
use constant ALPHA_itoft             => 104;
use constant ALPHA_jmp               => 105;
use constant ALPHA_jsr               => 106;
use constant ALPHA_jsr_coroutine     => 107;
use constant ALPHA_lda               => 108;
use constant ALPHA_ldah              => 109;
use constant ALPHA_ldbu              => 110;
use constant ALPHA_ldwu              => 111;
use constant ALPHA_ldf               => 112;
use constant ALPHA_ldg               => 113;
use constant ALPHA_ldl               => 114;
use constant ALPHA_ldl_l             => 115;
use constant ALPHA_ldq               => 116;
use constant ALPHA_ldq_l             => 117;
use constant ALPHA_ldq_u             => 118;
use constant ALPHA_lds               => 119;
use constant ALPHA_ldt               => 120;
use constant ALPHA_maxsb8            => 121;
use constant ALPHA_maxsw4            => 122;
use constant ALPHA_maxub8            => 123;
use constant ALPHA_maxuw4            => 124;
use constant ALPHA_mb                => 125;
use constant ALPHA_mf_fpcr           => 126;
use constant ALPHA_minsb8            => 127;
use constant ALPHA_minsw4            => 128;
use constant ALPHA_minub8            => 129;
use constant ALPHA_minuw4            => 130;
use constant ALPHA_mskbl             => 131;
use constant ALPHA_msklh             => 132;
use constant ALPHA_mskll             => 133;
use constant ALPHA_mskqh             => 134;
use constant ALPHA_mskql             => 135;
use constant ALPHA_mskwh             => 136;
use constant ALPHA_mskwl             => 137;
use constant ALPHA_mt_fpcr           => 138;
use constant ALPHA_mulf              => 139;
use constant ALPHA_mulg              => 140;
use constant ALPHA_mull              => 141;
use constant ALPHA_mull_v            => 142;
use constant ALPHA_mulq              => 143;
use constant ALPHA_mulq_v            => 144;
use constant ALPHA_muls              => 145;
use constant ALPHA_mult              => 146;
use constant ALPHA_ornot             => 147;
use constant ALPHA_perr              => 148;
use constant ALPHA_pklb              => 149;
use constant ALPHA_pkwb              => 150;
use constant ALPHA_rc                => 151;
use constant ALPHA_ret               => 152;
use constant ALPHA_rpcc              => 153;
use constant ALPHA_rs                => 154;
use constant ALPHA_s4addl            => 155;
use constant ALPHA_s4addq            => 156;
use constant ALPHA_s4subl            => 157;
use constant ALPHA_s4subq            => 158;
use constant ALPHA_s8addl            => 159;
use constant ALPHA_s8addq            => 160;
use constant ALPHA_s8subl            => 161;
use constant ALPHA_s8subq            => 162;
use constant ALPHA_sextb             => 163;
use constant ALPHA_sextw             => 164;
use constant ALPHA_sll               => 165;
use constant ALPHA_sqrtf             => 166;
use constant ALPHA_sqrtg             => 167;
use constant ALPHA_sqrts             => 168;
use constant ALPHA_sqrtt             => 169;
use constant ALPHA_sra               => 170;
use constant ALPHA_srl               => 171;
use constant ALPHA_stb               => 172;
use constant ALPHA_stf               => 173;
use constant ALPHA_stg               => 174;
use constant ALPHA_sts               => 175;
use constant ALPHA_stl               => 176;
use constant ALPHA_stl_c             => 177;
use constant ALPHA_stq               => 178;
use constant ALPHA_stq_c             => 179;
use constant ALPHA_stq_u             => 180;
use constant ALPHA_stt               => 181;
use constant ALPHA_stw               => 182;
use constant ALPHA_subf              => 183;
use constant ALPHA_subg              => 184;
use constant ALPHA_subl              => 185;
use constant ALPHA_subl_v            => 186;
use constant ALPHA_subq              => 187;
use constant ALPHA_subq_v            => 188;
use constant ALPHA_subs              => 189;
use constant ALPHA_subt              => 190;
use constant ALPHA_trapb             => 191;
use constant ALPHA_umulh             => 192;
use constant ALPHA_unpkbl            => 193;
use constant ALPHA_unpkbw            => 194;
use constant ALPHA_wh64              => 195;
use constant ALPHA_wmb               => 196;
use constant ALPHA_xor               => 197;
use constant ALPHA_zap               => 198;
use constant ALPHA_zapnot            => 199;
use constant ALPHA_unop              => 200;
use constant ALPHA_nop               => 201;
use constant ALPHA_fnop              => 202;
use constant ALPHA_clr               => 203;
use constant ALPHA_fabs              => 204;
use constant ALPHA_fclr              => 205;
use constant ALPHA_fmov              => 206;
use constant ALPHA_fneg              => 207;
use constant ALPHA_mov               => 208;
use constant ALPHA_negl              => 209;
use constant ALPHA_negl_v            => 210;
use constant ALPHA_negq              => 211;
use constant ALPHA_negq_v            => 212;
use constant ALPHA_negf              => 213;
use constant ALPHA_negg              => 214;
use constant ALPHA_negs              => 215;
use constant ALPHA_negt              => 216;
use constant ALPHA_not               => 217;
use constant ALPHA_sextl             => 218;
use constant ALPHA_or                => 219;
use constant ALPHA_andnot            => 220;
use constant ALPHA_xornot            => 221;
use constant ALPHA_br0               => 222;
use constant ALPHA_last              => 223;
use constant KR1878_null             => 0;
use constant KR1878_mov              => 1;
use constant KR1878_cmp              => 2;
use constant KR1878_add              => 3;
use constant KR1878_sub              => 4;
use constant KR1878_and              => 5;
use constant KR1878_or               => 6;
use constant KR1878_xor              => 7;
use constant KR1878_movl             => 8;
use constant KR1878_cmpl             => 9;
use constant KR1878_addl             => 10;
use constant KR1878_subl             => 11;
use constant KR1878_bic              => 12;
use constant KR1878_bis              => 13;
use constant KR1878_btg              => 14;
use constant KR1878_btt              => 15;
use constant KR1878_swap             => 16;
use constant KR1878_neg              => 17;
use constant KR1878_not              => 18;
use constant KR1878_shl              => 19;
use constant KR1878_shr              => 20;
use constant KR1878_shra             => 21;
use constant KR1878_rlc              => 22;
use constant KR1878_rrc              => 23;
use constant KR1878_adc              => 24;
use constant KR1878_sbc              => 25;
use constant KR1878_ldr              => 26;
use constant KR1878_mtpr             => 27;
use constant KR1878_mfpr             => 28;
use constant KR1878_push             => 29;
use constant KR1878_pop              => 30;
use constant KR1878_sst              => 31;
use constant KR1878_cst              => 32;
use constant KR1878_tof              => 33;
use constant KR1878_tdc              => 34;
use constant KR1878_jmp              => 35;
use constant KR1878_jsr              => 36;
use constant KR1878_jnz              => 37;
use constant KR1878_jz               => 38;
use constant KR1878_jns              => 39;
use constant KR1878_js               => 40;
use constant KR1878_jnc              => 41;
use constant KR1878_jc               => 42;
use constant KR1878_ijmp             => 43;
use constant KR1878_ijsr             => 44;
use constant KR1878_rts              => 45;
use constant KR1878_rtsc             => 46;
use constant KR1878_rti              => 47;
use constant KR1878_nop              => 48;
use constant KR1878_wait             => 49;
use constant KR1878_stop             => 50;
use constant KR1878_reset            => 51;
use constant KR1878_sksp             => 52;
use constant KR1878_last             => 53;
use constant AD218X_null             => 0;
use constant AD218X_amf_01           => 1;
use constant AD218X_amf_03           => 2;
use constant AD218X_amf_02           => 3;
use constant AD218X_amf_04           => 4;
use constant AD218X_amf_05           => 5;
use constant AD218X_amf_06           => 6;
use constant AD218X_amf_07           => 7;
use constant AD218X_amf_08           => 8;
use constant AD218X_amf_09           => 9;
use constant AD218X_amf_0a           => 10;
use constant AD218X_amf_0b           => 11;
use constant AD218X_amf_0c           => 12;
use constant AD218X_amf_0d           => 13;
use constant AD218X_amf_0e           => 14;
use constant AD218X_amf_0f           => 15;
use constant AD218X_amf_10           => 16;
use constant AD218X_amf_11           => 17;
use constant AD218X_amf_12           => 18;
use constant AD218X_amf_13           => 19;
use constant AD218X_amf_14           => 20;
use constant AD218X_amf_15           => 21;
use constant AD218X_amf_16           => 22;
use constant AD218X_amf_17           => 23;
use constant AD218X_amf_18           => 24;
use constant AD218X_amf_19           => 25;
use constant AD218X_amf_1a           => 26;
use constant AD218X_amf_1b           => 27;
use constant AD218X_amf_1c           => 28;
use constant AD218X_amf_1d           => 29;
use constant AD218X_amf_1e           => 30;
use constant AD218X_amf_1f           => 31;
use constant AD218X_shft_0           => 32;
use constant AD218X_shft_1           => 33;
use constant AD218X_shft_2           => 34;
use constant AD218X_shft_3           => 35;
use constant AD218X_shft_4           => 36;
use constant AD218X_shft_5           => 37;
use constant AD218X_shft_6           => 38;
use constant AD218X_shft_7           => 39;
use constant AD218X_shft_8           => 40;
use constant AD218X_shft_9           => 41;
use constant AD218X_shft_a           => 42;
use constant AD218X_shft_b           => 43;
use constant AD218X_shft_c           => 44;
use constant AD218X_shft_d           => 45;
use constant AD218X_shft_e           => 46;
use constant AD218X_shft_f           => 47;
use constant AD218X_alu_00           => 48;
use constant AD218X_alu_01           => 49;
use constant AD218X_alu_02           => 50;
use constant AD218X_alu_03           => 51;
use constant AD218X_alu_04           => 52;
use constant AD218X_alu_05           => 53;
use constant AD218X_alu_06           => 54;
use constant AD218X_alu_07           => 55;
use constant AD218X_alu_08           => 56;
use constant AD218X_alu_09           => 57;
use constant AD218X_alu_0a           => 58;
use constant AD218X_alu_0b           => 59;
use constant AD218X_alu_0c           => 60;
use constant AD218X_alu_0d           => 61;
use constant AD218X_alu_0e           => 62;
use constant AD218X_alu_0f           => 63;
use constant AD218X_alu_10           => 64;
use constant AD218X_alu_11           => 65;
use constant AD218X_alu_12           => 66;
use constant AD218X_alu_13           => 67;
use constant AD218X_alu_14           => 68;
use constant AD218X_alu_15           => 69;
use constant AD218X_alu_16           => 70;
use constant AD218X_alu_17           => 71;
use constant AD218X_alu_18           => 72;
use constant AD218X_alu_19           => 73;
use constant AD218X_alu_1a           => 74;
use constant AD218X_alu_1b           => 75;
use constant AD218X_alu_1c           => 76;
use constant AD218X_alu_1d           => 77;
use constant AD218X_mac_0            => 78;
use constant AD218X_mac_1            => 79;
use constant AD218X_mac_2            => 80;
use constant AD218X_mac_3            => 81;
use constant AD218X_mac_4            => 82;
use constant AD218X_mac_5            => 83;
use constant AD218X_mac_6            => 84;
use constant AD218X_mac_7            => 85;
use constant AD218X_mac_8            => 86;
use constant AD218X_mac_9            => 87;
use constant AD218X_mac_a            => 88;
use constant AD218X_mac_b            => 89;
use constant AD218X_amf              => 90;
use constant AD218X_shft             => 91;
use constant AD218X_shifter_0        => 92;
use constant AD218X_shifter_1        => 93;
use constant AD218X_shifter_2        => 94;
use constant AD218X_shifter_3        => 95;
use constant AD218X_shifter_4        => 96;
use constant AD218X_shifter_5        => 97;
use constant AD218X_shifter_6        => 98;
use constant AD218X_shifter_7        => 99;
use constant AD218X_move_0           => 100;
use constant AD218X_move_1           => 101;
use constant AD218X_move_2           => 102;
use constant AD218X_move_3           => 103;
use constant AD218X_move_4           => 104;
use constant AD218X_move_5           => 105;
use constant AD218X_move_6           => 106;
use constant AD218X_move_7           => 107;
use constant AD218X_move_8           => 108;
use constant AD218X_move_9           => 109;
use constant AD218X_move_a           => 110;
use constant AD218X_move_b           => 111;
use constant AD218X_jump             => 112;
use constant AD218X_jump_1           => 113;
use constant AD218X_jump_2           => 114;
use constant AD218X_jump_3           => 115;
use constant AD218X_jump_4           => 116;
use constant AD218X_call             => 117;
use constant AD218X_call_1           => 118;
use constant AD218X_call_2           => 119;
use constant AD218X_rts              => 120;
use constant AD218X_rts_cond         => 121;
use constant AD218X_rti              => 122;
use constant AD218X_rti_cond         => 123;
use constant AD218X_nop              => 124;
use constant AD218X_do               => 125;
use constant AD218X_idle             => 126;
use constant AD218X_idle_1           => 127;
use constant AD218X_flag_out         => 128;
use constant AD218X_stack_ctl        => 129;
use constant AD218X_mode_ctl         => 130;
use constant AD218X_tops_w           => 131;
use constant AD218X_tops_r           => 132;
use constant AD218X_ints_dis         => 133;
use constant AD218X_ints_ena         => 134;
use constant AD218X_modify           => 135;
use constant AD218X_double_move      => 136;
use constant AD218X_amf_move_0       => 137;
use constant AD218X_amf_move_1       => 138;
use constant AD218X_amf_move_2       => 139;
use constant AD218X_amf_move_3       => 140;
use constant AD218X_amf_move_4       => 141;
use constant AD218X_amf_move_5       => 142;
use constant AD218X_amf_move_6       => 143;
use constant AD218X_amf_move_7       => 144;
use constant AD218X_amf_move_8       => 145;
use constant AD218X_amf_move_9       => 146;
use constant AD218X_amf_move_a       => 147;
use constant AD218X_last             => 148;
use constant OAK_Dsp_null            => 0;
use constant OAK_Dsp_proc            => 1;
use constant OAK_Dsp_or              => 2;
use constant OAK_Dsp_and             => 3;
use constant OAK_Dsp_xor             => 4;
use constant OAK_Dsp_add             => 5;
use constant OAK_Dsp_alm_tst0        => 6;
use constant OAK_Dsp_alm_tst1        => 7;
use constant OAK_Dsp_cmp             => 8;
use constant OAK_Dsp_sub             => 9;
use constant OAK_Dsp_alm_msu         => 10;
use constant OAK_Dsp_addh            => 11;
use constant OAK_Dsp_addl            => 12;
use constant OAK_Dsp_subh            => 13;
use constant OAK_Dsp_subl            => 14;
use constant OAK_Dsp_sqr             => 15;
use constant OAK_Dsp_sqra            => 16;
use constant OAK_Dsp_cmpu            => 17;
use constant OAK_Dsp_shr             => 18;
use constant OAK_Dsp_shr4            => 19;
use constant OAK_Dsp_shl             => 20;
use constant OAK_Dsp_shl4            => 21;
use constant OAK_Dsp_ror             => 22;
use constant OAK_Dsp_rol             => 23;
use constant OAK_Dsp_clr             => 24;
use constant OAK_Dsp_mod_reserved    => 25;
use constant OAK_Dsp_not             => 26;
use constant OAK_Dsp_neg             => 27;
use constant OAK_Dsp_rnd             => 28;
use constant OAK_Dsp_pacr            => 29;
use constant OAK_Dsp_clrr            => 30;
use constant OAK_Dsp_inc             => 31;
use constant OAK_Dsp_dec             => 32;
use constant OAK_Dsp_copy            => 33;
use constant OAK_Dsp_norm            => 34;
use constant OAK_Dsp_divs            => 35;
use constant OAK_Dsp_set             => 36;
use constant OAK_Dsp_rst             => 37;
use constant OAK_Dsp_chng            => 38;
use constant OAK_Dsp_addv            => 39;
use constant OAK_Dsp_alb_tst0        => 40;
use constant OAK_Dsp_alb_tst1        => 41;
use constant OAK_Dsp_cmpv            => 42;
use constant OAK_Dsp_subv            => 43;
use constant OAK_Dsp_maxd            => 44;
use constant OAK_Dsp_max             => 45;
use constant OAK_Dsp_min             => 46;
use constant OAK_Dsp_lim             => 47;
use constant OAK_Dsp_mpy             => 48;
use constant OAK_Dsp_mpysu           => 49;
use constant OAK_Dsp_mac             => 50;
use constant OAK_Dsp_macus           => 51;
use constant OAK_Dsp_maa             => 52;
use constant OAK_Dsp_macuu           => 53;
use constant OAK_Dsp_macsu           => 54;
use constant OAK_Dsp_maasu           => 55;
use constant OAK_Dsp_mpyi            => 56;
use constant OAK_Dsp_msu             => 57;
use constant OAK_Dsp_tstb            => 58;
use constant OAK_Dsp_shfc            => 59;
use constant OAK_Dsp_shfi            => 60;
use constant OAK_Dsp_exp             => 61;
use constant OAK_Dsp_mov             => 62;
use constant OAK_Dsp_movp            => 63;
use constant OAK_Dsp_movs            => 64;
use constant OAK_Dsp_movsi           => 65;
use constant OAK_Dsp_movr            => 66;
use constant OAK_Dsp_movd            => 67;
use constant OAK_Dsp_push            => 68;
use constant OAK_Dsp_pop             => 69;
use constant OAK_Dsp_swap            => 70;
use constant OAK_Dsp_banke           => 71;
use constant OAK_Dsp_rep             => 72;
use constant OAK_Dsp_bkrep           => 73;
use constant OAK_Dsp_break           => 74;
use constant OAK_Dsp_br              => 75;
use constant OAK_Dsp_brr             => 76;
use constant OAK_Dsp_br_u            => 77;
use constant OAK_Dsp_brr_u           => 78;
use constant OAK_Dsp_call            => 79;
use constant OAK_Dsp_callr           => 80;
use constant OAK_Dsp_calla           => 81;
use constant OAK_Dsp_ret             => 82;
use constant OAK_Dsp_ret_u           => 83;
use constant OAK_Dsp_retd            => 84;
use constant OAK_Dsp_reti            => 85;
use constant OAK_Dsp_reti_u          => 86;
use constant OAK_Dsp_retid           => 87;
use constant OAK_Dsp_rets            => 88;
use constant OAK_Dsp_cntx            => 89;
use constant OAK_Dsp_nop             => 90;
use constant OAK_Dsp_modr            => 91;
use constant OAK_Dsp_dint            => 92;
use constant OAK_Dsp_eint            => 93;
use constant OAK_Dsp_trap            => 94;
use constant OAK_Dsp_lpg             => 95;
use constant OAK_Dsp_load            => 96;
use constant OAK_Dsp_mov_eu          => 97;
use constant OAK_Dsp_last            => 98;
use constant T900_null               => 0;
use constant T900_ld                 => 1;
use constant T900_ldw                => 2;
use constant T900_push               => 3;
use constant T900_pushw              => 4;
use constant T900_pop                => 5;
use constant T900_popw               => 6;
use constant T900_lda                => 7;
use constant T900_ldar               => 8;
use constant T900_ex                 => 9;
use constant T900_mirr               => 10;
use constant T900_ldi                => 11;
use constant T900_ldiw               => 12;
use constant T900_ldir               => 13;
use constant T900_ldirw              => 14;
use constant T900_ldd                => 15;
use constant T900_lddw               => 16;
use constant T900_lddr               => 17;
use constant T900_lddrw              => 18;
use constant T900_cpi                => 19;
use constant T900_cpir               => 20;
use constant T900_cpd                => 21;
use constant T900_cpdr               => 22;
use constant T900_add                => 23;
use constant T900_addw               => 24;
use constant T900_adc                => 25;
use constant T900_adcw               => 26;
use constant T900_sub                => 27;
use constant T900_subw               => 28;
use constant T900_sbc                => 29;
use constant T900_sbcw               => 30;
use constant T900_cp                 => 31;
use constant T900_cpw                => 32;
use constant T900_inc                => 33;
use constant T900_incw               => 34;
use constant T900_dec                => 35;
use constant T900_decw               => 36;
use constant T900_neg                => 37;
use constant T900_extz               => 38;
use constant T900_exts               => 39;
use constant T900_daa                => 40;
use constant T900_paa                => 41;
use constant T900_cpl                => 42;
use constant T900_mul                => 43;
use constant T900_muls               => 44;
use constant T900_div                => 45;
use constant T900_divs               => 46;
use constant T900_mula               => 47;
use constant T900_minc1              => 48;
use constant T900_minc2              => 49;
use constant T900_minc4              => 50;
use constant T900_mdec1              => 51;
use constant T900_mdec2              => 52;
use constant T900_mdec4              => 53;
use constant T900_and                => 54;
use constant T900_andw               => 55;
use constant T900_or                 => 56;
use constant T900_orw                => 57;
use constant T900_xor                => 58;
use constant T900_xorw               => 59;
use constant T900_ldcf               => 60;
use constant T900_stcf               => 61;
use constant T900_andcf              => 62;
use constant T900_orcf               => 63;
use constant T900_xorcf              => 64;
use constant T900_rcf                => 65;
use constant T900_scf                => 66;
use constant T900_ccf                => 67;
use constant T900_zcf                => 68;
use constant T900_bit                => 69;
use constant T900_res                => 70;
use constant T900_set                => 71;
use constant T900_chg                => 72;
use constant T900_tset               => 73;
use constant T900_bs1f               => 74;
use constant T900_bs1b               => 75;
use constant T900_nop                => 76;
use constant T900_ei                 => 77;
use constant T900_di                 => 78;
use constant T900_swi                => 79;
use constant T900_halt               => 80;
use constant T900_ldc                => 81;
use constant T900_ldx                => 82;
use constant T900_link               => 83;
use constant T900_unlk               => 84;
use constant T900_ldf                => 85;
use constant T900_incf               => 86;
use constant T900_decf               => 87;
use constant T900_scc                => 88;
use constant T900_rlc                => 89;
use constant T900_rlc_mem            => 90;
use constant T900_rlcw_mem           => 91;
use constant T900_rrc                => 92;
use constant T900_rrc_mem            => 93;
use constant T900_rrcw_mem           => 94;
use constant T900_rl                 => 95;
use constant T900_rl_mem             => 96;
use constant T900_rlw_mem            => 97;
use constant T900_rr                 => 98;
use constant T900_rr_mem             => 99;
use constant T900_rrw_mem            => 100;
use constant T900_sla                => 101;
use constant T900_sla_mem            => 102;
use constant T900_slaw_mem           => 103;
use constant T900_sra                => 104;
use constant T900_sra_mem            => 105;
use constant T900_sraw_mem           => 106;
use constant T900_sll                => 107;
use constant T900_sll_mem            => 108;
use constant T900_sllw_mem           => 109;
use constant T900_srl                => 110;
use constant T900_srl_mem            => 111;
use constant T900_srlw_mem           => 112;
use constant T900_rld                => 113;
use constant T900_rrd                => 114;
use constant T900_jp                 => 115;
use constant T900_jp_cond            => 116;
use constant T900_jr                 => 117;
use constant T900_jr_cond            => 118;
use constant T900_jrl                => 119;
use constant T900_jrl_cond           => 120;
use constant T900_call               => 121;
use constant T900_calr               => 122;
use constant T900_djnz               => 123;
use constant T900_ret                => 124;
use constant T900_ret_cond           => 125;
use constant T900_retd               => 126;
use constant T900_reti               => 127;
use constant T900_max                => 128;
use constant T900_normal             => 129;
use constant T900_last               => 130;
use constant C39_null                => 0;
use constant C39_adc                 => 1;
use constant C39_add                 => 2;
use constant C39_anc                 => 3;
use constant C39_and                 => 4;
use constant C39_ane                 => 5;
use constant C39_arr                 => 6;
use constant C39_asl                 => 7;
use constant C39_asr                 => 8;
use constant C39_bar                 => 9;
use constant C39_bas                 => 10;
use constant C39_bbr                 => 11;
use constant C39_bbs                 => 12;
use constant C39_bcc                 => 13;
use constant C39_bcs                 => 14;
use constant C39_beq                 => 15;
use constant C39_bit                 => 16;
use constant C39_bmi                 => 17;
use constant C39_bne                 => 18;
use constant C39_bpl                 => 19;
use constant C39_bra                 => 20;
use constant C39_brk                 => 21;
use constant C39_bvc                 => 22;
use constant C39_bvs                 => 23;
use constant C39_clc                 => 24;
use constant C39_cld                 => 25;
use constant C39_cli                 => 26;
use constant C39_clv                 => 27;
use constant C39_clw                 => 28;
use constant C39_cmp                 => 29;
use constant C39_cpx                 => 30;
use constant C39_cpy                 => 31;
use constant C39_dcp                 => 32;
use constant C39_dec                 => 33;
use constant C39_dex                 => 34;
use constant C39_dey                 => 35;
use constant C39_eor                 => 36;
use constant C39_exc                 => 37;
use constant C39_inc                 => 38;
use constant C39_ini                 => 39;
use constant C39_inx                 => 40;
use constant C39_iny                 => 41;
use constant C39_isb                 => 42;
use constant C39_jmp                 => 43;
use constant C39_jpi                 => 44;
use constant C39_jsb                 => 45;
use constant C39_jsr                 => 46;
use constant C39_lab                 => 47;
use constant C39_lae                 => 48;
use constant C39_lai                 => 49;
use constant C39_lan                 => 50;
use constant C39_lax                 => 51;
use constant C39_lda                 => 52;
use constant C39_ldx                 => 53;
use constant C39_ldy                 => 54;
use constant C39_lii                 => 55;
use constant C39_lsr                 => 56;
use constant C39_lxa                 => 57;
use constant C39_mpa                 => 58;
use constant C39_mpy                 => 59;
use constant C39_neg                 => 60;
use constant C39_nop                 => 61;
use constant C39_nxt                 => 62;
use constant C39_ora                 => 63;
use constant C39_pha                 => 64;
use constant C39_phi                 => 65;
use constant C39_php                 => 66;
use constant C39_phw                 => 67;
use constant C39_phx                 => 68;
use constant C39_phy                 => 69;
use constant C39_pia                 => 70;
use constant C39_pla                 => 71;
use constant C39_pli                 => 72;
use constant C39_plp                 => 73;
use constant C39_plw                 => 74;
use constant C39_plx                 => 75;
use constant C39_ply                 => 76;
use constant C39_psh                 => 77;
use constant C39_pul                 => 78;
use constant C39_rba                 => 79;
use constant C39_rla                 => 80;
use constant C39_rmb                 => 81;
use constant C39_rnd                 => 82;
use constant C39_rol                 => 83;
use constant C39_ror                 => 84;
use constant C39_rra                 => 85;
use constant C39_rti                 => 86;
use constant C39_rts                 => 87;
use constant C39_sax                 => 88;
use constant C39_sba                 => 89;
use constant C39_sbc                 => 90;
use constant C39_sbx                 => 91;
use constant C39_sec                 => 92;
use constant C39_sed                 => 93;
use constant C39_sei                 => 94;
use constant C39_sha                 => 95;
use constant C39_shs                 => 96;
use constant C39_shx                 => 97;
use constant C39_shy                 => 98;
use constant C39_slo                 => 99;
use constant C39_smb                 => 100;
use constant C39_sre                 => 101;
use constant C39_sta                 => 102;
use constant C39_sti                 => 103;
use constant C39_stx                 => 104;
use constant C39_sty                 => 105;
use constant C39_tax                 => 106;
use constant C39_tay                 => 107;
use constant C39_taw                 => 108;
use constant C39_tip                 => 109;
use constant C39_tsx                 => 110;
use constant C39_twa                 => 111;
use constant C39_txa                 => 112;
use constant C39_txs                 => 113;
use constant C39_tya                 => 114;
use constant C39_last                => 115;
use constant CR16_null               => 0;
use constant CR16_addb               => 1;
use constant CR16_addw               => 2;
use constant CR16_addub              => 3;
use constant CR16_adduw              => 4;
use constant CR16_addcb              => 5;
use constant CR16_addcw              => 6;
use constant CR16_andb               => 7;
use constant CR16_andw               => 8;
use constant CR16_ashub              => 9;
use constant CR16_ashuw              => 10;
use constant CR16_beq                => 11;
use constant CR16_bne                => 12;
use constant CR16_bcs                => 13;
use constant CR16_bcc                => 14;
use constant CR16_bhi                => 15;
use constant CR16_bls                => 16;
use constant CR16_bgt                => 17;
use constant CR16_ble                => 18;
use constant CR16_bfs                => 19;
use constant CR16_bfc                => 20;
use constant CR16_blo                => 21;
use constant CR16_bhs                => 22;
use constant CR16_blt                => 23;
use constant CR16_bge                => 24;
use constant CR16_br                 => 25;
use constant CR16_bal                => 26;
use constant CR16_cmpb               => 27;
use constant CR16_cmpw               => 28;
use constant CR16_beq1b              => 29;
use constant CR16_beq1w              => 30;
use constant CR16_beq0b              => 31;
use constant CR16_beq0w              => 32;
use constant CR16_bne1b              => 33;
use constant CR16_bne1w              => 34;
use constant CR16_bne0b              => 35;
use constant CR16_bne0w              => 36;
use constant CR16_di                 => 37;
use constant CR16_ei                 => 38;
use constant CR16_excp               => 39;
use constant CR16_jeq                => 40;
use constant CR16_jne                => 41;
use constant CR16_jcs                => 42;
use constant CR16_jcc                => 43;
use constant CR16_jhi                => 44;
use constant CR16_jls                => 45;
use constant CR16_jgt                => 46;
use constant CR16_jle                => 47;
use constant CR16_jfs                => 48;
use constant CR16_jfc                => 49;
use constant CR16_jlo                => 50;
use constant CR16_jhs                => 51;
use constant CR16_jlt                => 52;
use constant CR16_jge                => 53;
use constant CR16_jump               => 54;
use constant CR16_jal                => 55;
use constant CR16_loadb              => 56;
use constant CR16_loadw              => 57;
use constant CR16_loadm              => 58;
use constant CR16_lpr                => 59;
use constant CR16_lshb               => 60;
use constant CR16_lshw               => 61;
use constant CR16_movb               => 62;
use constant CR16_movw               => 63;
use constant CR16_movxb              => 64;
use constant CR16_movzb              => 65;
use constant CR16_movd               => 66;
use constant CR16_mulb               => 67;
use constant CR16_mulw               => 68;
use constant CR16_mulsb              => 69;
use constant CR16_mulsw              => 70;
use constant CR16_muluw              => 71;
use constant CR16_nop                => 72;
use constant CR16_orb                => 73;
use constant CR16_orw                => 74;
use constant CR16_push               => 75;
use constant CR16_pop                => 76;
use constant CR16_popret             => 77;
use constant CR16_retx               => 78;
use constant CR16_seq                => 79;
use constant CR16_sne                => 80;
use constant CR16_scs                => 81;
use constant CR16_scc                => 82;
use constant CR16_shi                => 83;
use constant CR16_sls                => 84;
use constant CR16_sgt                => 85;
use constant CR16_sle                => 86;
use constant CR16_sfs                => 87;
use constant CR16_sfc                => 88;
use constant CR16_slo                => 89;
use constant CR16_shs                => 90;
use constant CR16_slt                => 91;
use constant CR16_sge                => 92;
use constant CR16_spr                => 93;
use constant CR16_storb              => 94;
use constant CR16_storw              => 95;
use constant CR16_storm              => 96;
use constant CR16_subb               => 97;
use constant CR16_subw               => 98;
use constant CR16_subcb              => 99;
use constant CR16_subcw              => 100;
use constant CR16_tbit               => 101;
use constant CR16_tbitb              => 102;
use constant CR16_tbitw              => 103;
use constant CR16_sbitb              => 104;
use constant CR16_sbitw              => 105;
use constant CR16_cbitb              => 106;
use constant CR16_cbitw              => 107;
use constant CR16_wait               => 108;
use constant CR16_eiwait             => 109;
use constant CR16_xorb               => 110;
use constant CR16_xorw               => 111;
use constant CR16_last               => 112;
use constant mn102_null              => 0;
use constant mn102_add               => 1;
use constant mn102_addc              => 2;
use constant mn102_addnf             => 3;
use constant mn102_and               => 4;
use constant mn102_asr               => 5;
use constant mn102_bcc               => 6;
use constant mn102_bccx              => 7;
use constant mn102_bclr              => 8;
use constant mn102_bcs               => 9;
use constant mn102_bcsx              => 10;
use constant mn102_beq               => 11;
use constant mn102_beqx              => 12;
use constant mn102_bge               => 13;
use constant mn102_bgex              => 14;
use constant mn102_bgt               => 15;
use constant mn102_bgtx              => 16;
use constant mn102_bhi               => 17;
use constant mn102_bhix              => 18;
use constant mn102_ble               => 19;
use constant mn102_blex              => 20;
use constant mn102_bls               => 21;
use constant mn102_blsx              => 22;
use constant mn102_blt               => 23;
use constant mn102_bltx              => 24;
use constant mn102_bnc               => 25;
use constant mn102_bncx              => 26;
use constant mn102_bne               => 27;
use constant mn102_bnex              => 28;
use constant mn102_bns               => 29;
use constant mn102_bnsx              => 30;
use constant mn102_bra               => 31;
use constant mn102_bset              => 32;
use constant mn102_btst              => 33;
use constant mn102_bvc               => 34;
use constant mn102_bvcx              => 35;
use constant mn102_bvs               => 36;
use constant mn102_bvsx              => 37;
use constant mn102_cmp               => 38;
use constant mn102_divu              => 39;
use constant mn102_ext               => 40;
use constant mn102_extx              => 41;
use constant mn102_extxb             => 42;
use constant mn102_extxbu            => 43;
use constant mn102_extxu             => 44;
use constant mn102_jmp               => 45;
use constant mn102_jsr               => 46;
use constant mn102_lsr               => 47;
use constant mn102_mov               => 48;
use constant mn102_movb              => 49;
use constant mn102_movbu             => 50;
use constant mn102_movx              => 51;
use constant mn102_mul               => 52;
use constant mn102_mulq              => 53;
use constant mn102_mulqh             => 54;
use constant mn102_mulql             => 55;
use constant mn102_mulu              => 56;
use constant mn102_nop               => 57;
use constant mn102_not               => 58;
use constant mn102_or                => 59;
use constant mn102_pxst              => 60;
use constant mn102_rol               => 61;
use constant mn102_ror               => 62;
use constant mn102_rti               => 63;
use constant mn102_rts               => 64;
use constant mn102_sub               => 65;
use constant mn102_subc              => 66;
use constant mn102_tbnz              => 67;
use constant mn102_tbz               => 68;
use constant mn102_xor               => 69;
use constant mn102_last              => 70;
use constant PPC_null                => 0;
use constant PPC_add                 => 1;
use constant PPC_addc                => 2;
use constant PPC_adde                => 3;
use constant PPC_addi                => 4;
use constant PPC_addic               => 5;
use constant PPC_addis               => 6;
use constant PPC_addme               => 7;
use constant PPC_addze               => 8;
use constant PPC_and                 => 9;
use constant PPC_andc                => 10;
use constant PPC_andi                => 11;
use constant PPC_andis               => 12;
use constant PPC_b                   => 13;
use constant PPC_bc                  => 14;
use constant PPC_bcctr               => 15;
use constant PPC_bclr                => 16;
use constant PPC_cmp                 => 17;
use constant PPC_cmpi                => 18;
use constant PPC_cmpl                => 19;
use constant PPC_cmpli               => 20;
use constant PPC_cntlzd              => 21;
use constant PPC_cntlzw              => 22;
use constant PPC_crand               => 23;
use constant PPC_crandc              => 24;
use constant PPC_creqv               => 25;
use constant PPC_crnand              => 26;
use constant PPC_crnor               => 27;
use constant PPC_cror                => 28;
use constant PPC_crorc               => 29;
use constant PPC_crxor               => 30;
use constant PPC_dcba                => 31;
use constant PPC_dcbf                => 32;
use constant PPC_dcbi                => 33;
use constant PPC_dcbst               => 34;
use constant PPC_dcbt                => 35;
use constant PPC_dcbtst              => 36;
use constant PPC_dcbz                => 37;
use constant PPC_divd                => 38;
use constant PPC_divdu               => 39;
use constant PPC_divw                => 40;
use constant PPC_divwu               => 41;
use constant PPC_eciwx               => 42;
use constant PPC_ecowx               => 43;
use constant PPC_eieio               => 44;
use constant PPC_eqv                 => 45;
use constant PPC_extsb               => 46;
use constant PPC_extsh               => 47;
use constant PPC_extsw               => 48;
use constant PPC_fabs                => 49;
use constant PPC_fadd                => 50;
use constant PPC_fadds               => 51;
use constant PPC_fcfid               => 52;
use constant PPC_fcmpo               => 53;
use constant PPC_fcmpu               => 54;
use constant PPC_fctid               => 55;
use constant PPC_fctidz              => 56;
use constant PPC_fctiw               => 57;
use constant PPC_fctiwz              => 58;
use constant PPC_fdiv                => 59;
use constant PPC_fdivs               => 60;
use constant PPC_fmadd               => 61;
use constant PPC_fmadds              => 62;
use constant PPC_fmr                 => 63;
use constant PPC_fmsub               => 64;
use constant PPC_fmsubs              => 65;
use constant PPC_fmul                => 66;
use constant PPC_fmuls               => 67;
use constant PPC_fnabs               => 68;
use constant PPC_fneg                => 69;
use constant PPC_fnmadd              => 70;
use constant PPC_fnmadds             => 71;
use constant PPC_fnmsub              => 72;
use constant PPC_fnmsubs             => 73;
use constant PPC_fres                => 74;
use constant PPC_frsp                => 75;
use constant PPC_frsqrte             => 76;
use constant PPC_fsel                => 77;
use constant PPC_fsqrt               => 78;
use constant PPC_fsqrts              => 79;
use constant PPC_fsub                => 80;
use constant PPC_fsubs               => 81;
use constant PPC_icbi                => 82;
use constant PPC_isync               => 83;
use constant PPC_lbz                 => 84;
use constant PPC_lbzu                => 85;
use constant PPC_lbzux               => 86;
use constant PPC_lbzx                => 87;
use constant PPC_ld                  => 88;
use constant PPC_ldarx               => 89;
use constant PPC_ldu                 => 90;
use constant PPC_ldux                => 91;
use constant PPC_ldx                 => 92;
use constant PPC_lfd                 => 93;
use constant PPC_lfdu                => 94;
use constant PPC_lfdux               => 95;
use constant PPC_lfdx                => 96;
use constant PPC_lfs                 => 97;
use constant PPC_lfsu                => 98;
use constant PPC_lfsux               => 99;
use constant PPC_lfsx                => 100;
use constant PPC_lha                 => 101;
use constant PPC_lhau                => 102;
use constant PPC_lhaux               => 103;
use constant PPC_lhax                => 104;
use constant PPC_lhbrx               => 105;
use constant PPC_lhz                 => 106;
use constant PPC_lhzu                => 107;
use constant PPC_lhzux               => 108;
use constant PPC_lhzx                => 109;
use constant PPC_lmw                 => 110;
use constant PPC_lswi                => 111;
use constant PPC_lswx                => 112;
use constant PPC_lwa                 => 113;
use constant PPC_lwarx               => 114;
use constant PPC_lwaux               => 115;
use constant PPC_lwax                => 116;
use constant PPC_lwbrx               => 117;
use constant PPC_lwz                 => 118;
use constant PPC_lwzu                => 119;
use constant PPC_lwzux               => 120;
use constant PPC_lwzx                => 121;
use constant PPC_mcrf                => 122;
use constant PPC_mcrfs               => 123;
use constant PPC_mcrxr               => 124;
use constant PPC_mfcr                => 125;
use constant PPC_mffs                => 126;
use constant PPC_mfmsr               => 127;
use constant PPC_mfspr               => 128;
use constant PPC_mfsr                => 129;
use constant PPC_mfsrin              => 130;
use constant PPC_mftb                => 131;
use constant PPC_mtcrf               => 132;
use constant PPC_mtfsb0              => 133;
use constant PPC_mtfsb1              => 134;
use constant PPC_mtfsf               => 135;
use constant PPC_mtfsfi              => 136;
use constant PPC_mtmsr               => 137;
use constant PPC_mtmsrd              => 138;
use constant PPC_mtspr               => 139;
use constant PPC_mtsr                => 140;
use constant PPC_mtsrd               => 141;
use constant PPC_mtsrdin             => 142;
use constant PPC_mtsrin              => 143;
use constant PPC_mulhd               => 144;
use constant PPC_mulhdu              => 145;
use constant PPC_mulhw               => 146;
use constant PPC_mulhwu              => 147;
use constant PPC_mulld               => 148;
use constant PPC_mulli               => 149;
use constant PPC_mullw               => 150;
use constant PPC_nand                => 151;
use constant PPC_neg                 => 152;
use constant PPC_nor                 => 153;
use constant PPC_or                  => 154;
use constant PPC_orc                 => 155;
use constant PPC_ori                 => 156;
use constant PPC_oris                => 157;
use constant PPC_rfi                 => 158;
use constant PPC_rfid                => 159;
use constant PPC_rldcl               => 160;
use constant PPC_rldcr               => 161;
use constant PPC_rldic               => 162;
use constant PPC_rldicl              => 163;
use constant PPC_rldicr              => 164;
use constant PPC_rldimi              => 165;
use constant PPC_rlwimi              => 166;
use constant PPC_rlwinm              => 167;
use constant PPC_rlwnm               => 168;
use constant PPC_sc                  => 169;
use constant PPC_slbia               => 170;
use constant PPC_slbie               => 171;
use constant PPC_sld                 => 172;
use constant PPC_slw                 => 173;
use constant PPC_srad                => 174;
use constant PPC_sradi               => 175;
use constant PPC_sraw                => 176;
use constant PPC_srawi               => 177;
use constant PPC_srd                 => 178;
use constant PPC_srw                 => 179;
use constant PPC_stb                 => 180;
use constant PPC_stbu                => 181;
use constant PPC_stbux               => 182;
use constant PPC_stbx                => 183;
use constant PPC_std                 => 184;
use constant PPC_stdcx               => 185;
use constant PPC_stdu                => 186;
use constant PPC_stdux               => 187;
use constant PPC_stdx                => 188;
use constant PPC_stfd                => 189;
use constant PPC_stfdu               => 190;
use constant PPC_stfdux              => 191;
use constant PPC_stfdx               => 192;
use constant PPC_stfiwx              => 193;
use constant PPC_stfs                => 194;
use constant PPC_stfsu               => 195;
use constant PPC_stfsux              => 196;
use constant PPC_stfsx               => 197;
use constant PPC_sth                 => 198;
use constant PPC_sthbrx              => 199;
use constant PPC_sthu                => 200;
use constant PPC_sthux               => 201;
use constant PPC_sthx                => 202;
use constant PPC_stmw                => 203;
use constant PPC_stswi               => 204;
use constant PPC_stswx               => 205;
use constant PPC_stw                 => 206;
use constant PPC_stwbrx              => 207;
use constant PPC_stwcx               => 208;
use constant PPC_stwu                => 209;
use constant PPC_stwux               => 210;
use constant PPC_stwx                => 211;
use constant PPC_subf                => 212;
use constant PPC_subfc               => 213;
use constant PPC_subfe               => 214;
use constant PPC_subfic              => 215;
use constant PPC_subfme              => 216;
use constant PPC_subfze              => 217;
use constant PPC_sync                => 218;
use constant PPC_td                  => 219;
use constant PPC_tdi                 => 220;
use constant PPC_tlbia               => 221;
use constant PPC_tlbie               => 222;
use constant PPC_tlbsync             => 223;
use constant PPC_tw                  => 224;
use constant PPC_twi                 => 225;
use constant PPC_xor                 => 226;
use constant PPC_xori                => 227;
use constant PPC_xoris               => 228;
use constant PPC_last_basic          => 228;
use constant PPC_cmpwi               => 229;
use constant PPC_cmpw                => 230;
use constant PPC_cmplwi              => 231;
use constant PPC_cmplw               => 232;
use constant PPC_cmpdi               => 233;
use constant PPC_cmpd                => 234;
use constant PPC_cmpldi              => 235;
use constant PPC_cmpld               => 236;
use constant PPC_trap                => 237;
use constant PPC_trapd               => 238;
use constant PPC_twlgt               => 239;
use constant PPC_twllt               => 240;
use constant PPC_tweq                => 241;
use constant PPC_twlge               => 242;
use constant PPC_twlle               => 243;
use constant PPC_twgt                => 244;
use constant PPC_twge                => 245;
use constant PPC_twlt                => 246;
use constant PPC_twle                => 247;
use constant PPC_twne                => 248;
use constant PPC_twlgti              => 249;
use constant PPC_twllti              => 250;
use constant PPC_tweqi               => 251;
use constant PPC_twlgei              => 252;
use constant PPC_twllei              => 253;
use constant PPC_twgti               => 254;
use constant PPC_twgei               => 255;
use constant PPC_twlti               => 256;
use constant PPC_twlei               => 257;
use constant PPC_twnei               => 258;
use constant PPC_tdlgt               => 259;
use constant PPC_tdllt               => 260;
use constant PPC_tdeq                => 261;
use constant PPC_tdlge               => 262;
use constant PPC_tdlle               => 263;
use constant PPC_tdgt                => 264;
use constant PPC_tdge                => 265;
use constant PPC_tdlt                => 266;
use constant PPC_tdle                => 267;
use constant PPC_tdne                => 268;
use constant PPC_tdlgti              => 269;
use constant PPC_tdllti              => 270;
use constant PPC_tdeqi               => 271;
use constant PPC_tdlgei              => 272;
use constant PPC_tdllei              => 273;
use constant PPC_tdgti               => 274;
use constant PPC_tdgei               => 275;
use constant PPC_tdlti               => 276;
use constant PPC_tdlei               => 277;
use constant PPC_tdnei               => 278;
use constant PPC_nop                 => 279;
use constant PPC_not                 => 280;
use constant PPC_mr                  => 281;
use constant PPC_subi                => 282;
use constant PPC_subic               => 283;
use constant PPC_subis               => 284;
use constant PPC_li                  => 285;
use constant PPC_lis                 => 286;
use constant PPC_crset               => 287;
use constant PPC_crnot               => 288;
use constant PPC_crmove              => 289;
use constant PPC_crclr               => 290;
use constant PPC_mtxer               => 291;
use constant PPC_mtlr                => 292;
use constant PPC_mtctr               => 293;
use constant PPC_mtdsisr             => 294;
use constant PPC_mtdar               => 295;
use constant PPC_mtdec               => 296;
use constant PPC_mtsrr0              => 297;
use constant PPC_mtsrr1              => 298;
use constant PPC_mtsprg0             => 299;
use constant PPC_mtsprg1             => 300;
use constant PPC_mtsprg2             => 301;
use constant PPC_mtsprg3             => 302;
use constant PPC_mttbl               => 303;
use constant PPC_mttbu               => 304;
use constant PPC_mfxer               => 305;
use constant PPC_mflr                => 306;
use constant PPC_mfctr               => 307;
use constant PPC_mfdsisr             => 308;
use constant PPC_mfdar               => 309;
use constant PPC_mfdec               => 310;
use constant PPC_mfsrr0              => 311;
use constant PPC_mfsrr1              => 312;
use constant PPC_mfsprg0             => 313;
use constant PPC_mfsprg1             => 314;
use constant PPC_mfsprg2             => 315;
use constant PPC_mfsprg3             => 316;
use constant PPC_mftbl               => 317;
use constant PPC_mftbu               => 318;
use constant PPC_mfpvr               => 319;
use constant PPC_balways             => 320;
use constant PPC_bt                  => 321;
use constant PPC_bf                  => 322;
use constant PPC_bdnz                => 323;
use constant PPC_bdnzt               => 324;
use constant PPC_bdnzf               => 325;
use constant PPC_bdz                 => 326;
use constant PPC_bdzt                => 327;
use constant PPC_bdzf                => 328;
use constant PPC_blt                 => 329;
use constant PPC_ble                 => 330;
use constant PPC_beq                 => 331;
use constant PPC_bge                 => 332;
use constant PPC_bgt                 => 333;
use constant PPC_bne                 => 334;
use constant PPC_bso                 => 335;
use constant PPC_bns                 => 336;
use constant PPC_extlwi              => 337;
use constant PPC_extrwi              => 338;
use constant PPC_inslwi              => 339;
use constant PPC_insrwi              => 340;
use constant PPC_rotlwi              => 341;
use constant PPC_rotrwi              => 342;
use constant PPC_rotlw               => 343;
use constant PPC_slwi                => 344;
use constant PPC_srwi                => 345;
use constant PPC_clrlwi              => 346;
use constant PPC_clrrwi              => 347;
use constant PPC_clrlslwi            => 348;
use constant PPC_dccci               => 349;
use constant PPC_dcread              => 350;
use constant PPC_icbt                => 351;
use constant PPC_iccci               => 352;
use constant PPC_icread              => 353;
use constant PPC_mfdcr               => 354;
use constant PPC_mtdcr               => 355;
use constant PPC_rfci                => 356;
use constant PPC_tlbre               => 357;
use constant PPC_tlbsx               => 358;
use constant PPC_tlbwe               => 359;
use constant PPC_wrtee               => 360;
use constant PPC_wrteei              => 361;
use constant PPC_abs                 => 362;
use constant PPC_clcs                => 363;
use constant PPC_clf                 => 364;
use constant PPC_cli                 => 365;
use constant PPC_dclst               => 366;
use constant PPC_div                 => 367;
use constant PPC_divs                => 368;
use constant PPC_doz                 => 369;
use constant PPC_dozi                => 370;
use constant PPC_frsqrtes            => 371;
use constant PPC_hrfid               => 372;
use constant PPC_lscbx               => 373;
use constant PPC_maskg               => 374;
use constant PPC_maskir              => 375;
use constant PPC_mfsri               => 376;
use constant PPC_mul                 => 377;
use constant PPC_nabs                => 378;
use constant PPC_popcntb             => 379;
use constant PPC_rac                 => 380;
use constant PPC_rfsvc               => 381;
use constant PPC_rlmi                => 382;
use constant PPC_rrib                => 383;
use constant PPC_slbmfee             => 384;
use constant PPC_slbmfev             => 385;
use constant PPC_slbmte              => 386;
use constant PPC_sle                 => 387;
use constant PPC_sleq                => 388;
use constant PPC_sliq                => 389;
use constant PPC_slliq               => 390;
use constant PPC_sllq                => 391;
use constant PPC_slq                 => 392;
use constant PPC_sraiq               => 393;
use constant PPC_sraq                => 394;
use constant PPC_sre                 => 395;
use constant PPC_srea                => 396;
use constant PPC_sreq                => 397;
use constant PPC_sriq                => 398;
use constant PPC_srliq               => 399;
use constant PPC_srlq                => 400;
use constant PPC_srq                 => 401;
use constant PPC_mtocrf              => 402;
use constant PPC_mfocrf              => 403;
use constant PPC_isel                => 404;
use constant PPC_isellt              => 405;
use constant PPC_iselgt              => 406;
use constant PPC_iseleq              => 407;
use constant PPC_dcblc               => 408;
use constant PPC_dcbtls              => 409;
use constant PPC_dcbtstls            => 410;
use constant PPC_icblc               => 411;
use constant PPC_icbtls              => 412;
use constant PPC_tlbivax             => 413;
use constant PPC_rfdi                => 414;
use constant PPC_tlbld               => 415;
use constant PPC_tlbli               => 416;
use constant PPC_brinc               => 417;
use constant PPC_evabs               => 418;
use constant PPC_evaddiw             => 419;
use constant PPC_evaddsmiaaw         => 420;
use constant PPC_evaddssiaaw         => 421;
use constant PPC_evaddumiaaw         => 422;
use constant PPC_evaddusiaaw         => 423;
use constant PPC_evaddw              => 424;
use constant PPC_evand               => 425;
use constant PPC_evandc              => 426;
use constant PPC_evcmpeq             => 427;
use constant PPC_evcmpgts            => 428;
use constant PPC_evcmpgtu            => 429;
use constant PPC_evcmplts            => 430;
use constant PPC_evcmpltu            => 431;
use constant PPC_evcntlsw            => 432;
use constant PPC_evcntlzw            => 433;
use constant PPC_evdivws             => 434;
use constant PPC_evdivwu             => 435;
use constant PPC_eveqv               => 436;
use constant PPC_evextsb             => 437;
use constant PPC_evextsh             => 438;
use constant PPC_evldd               => 439;
use constant PPC_evlddx              => 440;
use constant PPC_evldh               => 441;
use constant PPC_evldhx              => 442;
use constant PPC_evldw               => 443;
use constant PPC_evldwx              => 444;
use constant PPC_evlhhesplat         => 445;
use constant PPC_evlhhesplatx        => 446;
use constant PPC_evlhhossplat        => 447;
use constant PPC_evlhhossplatx       => 448;
use constant PPC_evlhhousplat        => 449;
use constant PPC_evlhhousplatx       => 450;
use constant PPC_evlwhe              => 451;
use constant PPC_evlwhex             => 452;
use constant PPC_evlwhos             => 453;
use constant PPC_evlwhosx            => 454;
use constant PPC_evlwhou             => 455;
use constant PPC_evlwhoux            => 456;
use constant PPC_evlwhsplat          => 457;
use constant PPC_evlwhsplatx         => 458;
use constant PPC_evlwwsplat          => 459;
use constant PPC_evlwwsplatx         => 460;
use constant PPC_evmergehi           => 461;
use constant PPC_evmergehilo         => 462;
use constant PPC_evmergelo           => 463;
use constant PPC_evmergelohi         => 464;
use constant PPC_evmhegsmfaa         => 465;
use constant PPC_evmhegsmfan         => 466;
use constant PPC_evmhegsmiaa         => 467;
use constant PPC_evmhegsmian         => 468;
use constant PPC_evmhegumiaa         => 469;
use constant PPC_evmhegumian         => 470;
use constant PPC_evmhesmf            => 471;
use constant PPC_evmhesmfa           => 472;
use constant PPC_evmhesmfaaw         => 473;
use constant PPC_evmhesmfanw         => 474;
use constant PPC_evmhesmi            => 475;
use constant PPC_evmhesmia           => 476;
use constant PPC_evmhesmiaaw         => 477;
use constant PPC_evmhesmianw         => 478;
use constant PPC_evmhessf            => 479;
use constant PPC_evmhessfa           => 480;
use constant PPC_evmhessfaaw         => 481;
use constant PPC_evmhessfanw         => 482;
use constant PPC_evmhessiaaw         => 483;
use constant PPC_evmhessianw         => 484;
use constant PPC_evmheumi            => 485;
use constant PPC_evmheumia           => 486;
use constant PPC_evmheumiaaw         => 487;
use constant PPC_evmheumianw         => 488;
use constant PPC_evmheusiaaw         => 489;
use constant PPC_evmheusianw         => 490;
use constant PPC_evmhogsmfaa         => 491;
use constant PPC_evmhogsmfan         => 492;
use constant PPC_evmhogsmiaa         => 493;
use constant PPC_evmhogsmian         => 494;
use constant PPC_evmhogumiaa         => 495;
use constant PPC_evmhogumian         => 496;
use constant PPC_evmhosmf            => 497;
use constant PPC_evmhosmfa           => 498;
use constant PPC_evmhosmfaaw         => 499;
use constant PPC_evmhosmfanw         => 500;
use constant PPC_evmhosmi            => 501;
use constant PPC_evmhosmia           => 502;
use constant PPC_evmhosmiaaw         => 503;
use constant PPC_evmhosmianw         => 504;
use constant PPC_evmhossf            => 505;
use constant PPC_evmhossfa           => 506;
use constant PPC_evmhossfaaw         => 507;
use constant PPC_evmhossfanw         => 508;
use constant PPC_evmhossiaaw         => 509;
use constant PPC_evmhossianw         => 510;
use constant PPC_evmhoumi            => 511;
use constant PPC_evmhoumia           => 512;
use constant PPC_evmhoumiaaw         => 513;
use constant PPC_evmhoumianw         => 514;
use constant PPC_evmhousiaaw         => 515;
use constant PPC_evmhousianw         => 516;
use constant PPC_evmra               => 517;
use constant PPC_evmwhsmf            => 518;
use constant PPC_evmwhsmfa           => 519;
use constant PPC_evmwhsmi            => 520;
use constant PPC_evmwhsmia           => 521;
use constant PPC_evmwhssf            => 522;
use constant PPC_evmwhssfa           => 523;
use constant PPC_evmwhumi            => 524;
use constant PPC_evmwhumia           => 525;
use constant PPC_evmwlsmiaaw         => 526;
use constant PPC_evmwlsmianw         => 527;
use constant PPC_evmwlssiaaw         => 528;
use constant PPC_evmwlssianw         => 529;
use constant PPC_evmwlumi            => 530;
use constant PPC_evmwlumia           => 531;
use constant PPC_evmwlumiaaw         => 532;
use constant PPC_evmwlumianw         => 533;
use constant PPC_evmwlusiaaw         => 534;
use constant PPC_evmwlusianw         => 535;
use constant PPC_evmwsmf             => 536;
use constant PPC_evmwsmfa            => 537;
use constant PPC_evmwsmfaa           => 538;
use constant PPC_evmwsmfan           => 539;
use constant PPC_evmwsmi             => 540;
use constant PPC_evmwsmia            => 541;
use constant PPC_evmwsmiaa           => 542;
use constant PPC_evmwsmian           => 543;
use constant PPC_evmwssf             => 544;
use constant PPC_evmwssfa            => 545;
use constant PPC_evmwssfaa           => 546;
use constant PPC_evmwssfan           => 547;
use constant PPC_evmwumi             => 548;
use constant PPC_evmwumia            => 549;
use constant PPC_evmwumiaa           => 550;
use constant PPC_evmwumian           => 551;
use constant PPC_evnand              => 552;
use constant PPC_evneg               => 553;
use constant PPC_evnor               => 554;
use constant PPC_evor                => 555;
use constant PPC_evorc               => 556;
use constant PPC_evrlw               => 557;
use constant PPC_evrlwi              => 558;
use constant PPC_evrndw              => 559;
use constant PPC_evsel               => 560;
use constant PPC_evslw               => 561;
use constant PPC_evslwi              => 562;
use constant PPC_evsplatfi           => 563;
use constant PPC_evsplati            => 564;
use constant PPC_evsrwis             => 565;
use constant PPC_evsrwiu             => 566;
use constant PPC_evsrws              => 567;
use constant PPC_evsrwu              => 568;
use constant PPC_evstdd              => 569;
use constant PPC_evstddx             => 570;
use constant PPC_evstdh              => 571;
use constant PPC_evstdhx             => 572;
use constant PPC_evstdw              => 573;
use constant PPC_evstdwx             => 574;
use constant PPC_evstwhe             => 575;
use constant PPC_evstwhex            => 576;
use constant PPC_evstwho             => 577;
use constant PPC_evstwhox            => 578;
use constant PPC_evstwwe             => 579;
use constant PPC_evstwwex            => 580;
use constant PPC_evstwwo             => 581;
use constant PPC_evstwwox            => 582;
use constant PPC_evsubfsmiaaw        => 583;
use constant PPC_evsubfssiaaw        => 584;
use constant PPC_evsubfumiaaw        => 585;
use constant PPC_evsubfusiaaw        => 586;
use constant PPC_evsubfw             => 587;
use constant PPC_evsubifw            => 588;
use constant PPC_evxor               => 589;
use constant PPC_efdabs              => 590;
use constant PPC_efdadd              => 591;
use constant PPC_efdcfs              => 592;
use constant PPC_efdcfsf             => 593;
use constant PPC_efdcfsi             => 594;
use constant PPC_efdcfsid            => 595;
use constant PPC_efdcfuf             => 596;
use constant PPC_efdcfui             => 597;
use constant PPC_efdcfuid            => 598;
use constant PPC_efdcmpeq            => 599;
use constant PPC_efdcmpgt            => 600;
use constant PPC_efdcmplt            => 601;
use constant PPC_efdctsf             => 602;
use constant PPC_efdctsi             => 603;
use constant PPC_efdctsidz           => 604;
use constant PPC_efdctsiz            => 605;
use constant PPC_efdctuf             => 606;
use constant PPC_efdctui             => 607;
use constant PPC_efdctuidz           => 608;
use constant PPC_efdctuiz            => 609;
use constant PPC_efddiv              => 610;
use constant PPC_efdmul              => 611;
use constant PPC_efdnabs             => 612;
use constant PPC_efdneg              => 613;
use constant PPC_efdsub              => 614;
use constant PPC_efdtsteq            => 615;
use constant PPC_efdtstgt            => 616;
use constant PPC_efdtstlt            => 617;
use constant PPC_efscfd              => 618;
use constant PPC_efsabs              => 619;
use constant PPC_efsadd              => 620;
use constant PPC_efscfsf             => 621;
use constant PPC_efscfsi             => 622;
use constant PPC_efscfuf             => 623;
use constant PPC_efscfui             => 624;
use constant PPC_efscmpeq            => 625;
use constant PPC_efscmpgt            => 626;
use constant PPC_efscmplt            => 627;
use constant PPC_efsctsf             => 628;
use constant PPC_efsctsi             => 629;
use constant PPC_efsctsiz            => 630;
use constant PPC_efsctuf             => 631;
use constant PPC_efsctui             => 632;
use constant PPC_efsctuiz            => 633;
use constant PPC_efsdiv              => 634;
use constant PPC_efsmul              => 635;
use constant PPC_efsnabs             => 636;
use constant PPC_efsneg              => 637;
use constant PPC_efssub              => 638;
use constant PPC_efststeq            => 639;
use constant PPC_efststgt            => 640;
use constant PPC_efststlt            => 641;
use constant PPC_evfsabs             => 642;
use constant PPC_evfsadd             => 643;
use constant PPC_evfscfsf            => 644;
use constant PPC_evfscfsi            => 645;
use constant PPC_evfscfuf            => 646;
use constant PPC_evfscfui            => 647;
use constant PPC_evfscmpeq           => 648;
use constant PPC_evfscmpgt           => 649;
use constant PPC_evfscmplt           => 650;
use constant PPC_evfsctsf            => 651;
use constant PPC_evfsctsi            => 652;
use constant PPC_evfsctsiz           => 653;
use constant PPC_evfsctuf            => 654;
use constant PPC_evfsctui            => 655;
use constant PPC_evfsctuiz           => 656;
use constant PPC_evfsdiv             => 657;
use constant PPC_evfsmul             => 658;
use constant PPC_evfsnabs            => 659;
use constant PPC_evfsneg             => 660;
use constant PPC_evfssub             => 661;
use constant PPC_evfststeq           => 662;
use constant PPC_evfststgt           => 663;
use constant PPC_evfststlt           => 664;
use constant PPC_bpermd              => 665;
use constant PPC_divde               => 666;
use constant PPC_divdeu              => 667;
use constant PPC_ldbrx               => 668;
use constant PPC_prtyd               => 669;
use constant PPC_stdbrx              => 670;
use constant PPC_cmpb                => 671;
use constant PPC_divwe               => 672;
use constant PPC_divweu              => 673;
use constant PPC_lbarx               => 674;
use constant PPC_lharx               => 675;
use constant PPC_popcntd             => 676;
use constant PPC_popcntw             => 677;
use constant PPC_prtyw               => 678;
use constant PPC_stbcx               => 679;
use constant PPC_sthcx               => 680;
use constant PPC_addg6s              => 681;
use constant PPC_cbcdtd              => 682;
use constant PPC_cdtbcd              => 683;
use constant PPC_dadd                => 684;
use constant PPC_daddq               => 685;
use constant PPC_dcffix              => 686;
use constant PPC_dcffixq             => 687;
use constant PPC_dcmpo               => 688;
use constant PPC_dcmpoq              => 689;
use constant PPC_dcmpu               => 690;
use constant PPC_dcmpuq              => 691;
use constant PPC_dctdp               => 692;
use constant PPC_dctfix              => 693;
use constant PPC_dctfixq             => 694;
use constant PPC_dctqpq              => 695;
use constant PPC_ddedpd              => 696;
use constant PPC_ddedpdq             => 697;
use constant PPC_ddiv                => 698;
use constant PPC_ddivq               => 699;
use constant PPC_denbcd              => 700;
use constant PPC_denbcdq             => 701;
use constant PPC_diex                => 702;
use constant PPC_diexq               => 703;
use constant PPC_dmul                => 704;
use constant PPC_dmulq               => 705;
use constant PPC_dqua                => 706;
use constant PPC_dquai               => 707;
use constant PPC_dquaiq              => 708;
use constant PPC_dquaq               => 709;
use constant PPC_drdpq               => 710;
use constant PPC_drintn              => 711;
use constant PPC_drintnq             => 712;
use constant PPC_drintx              => 713;
use constant PPC_drintxq             => 714;
use constant PPC_drrnd               => 715;
use constant PPC_drrndq              => 716;
use constant PPC_drsp                => 717;
use constant PPC_dscli               => 718;
use constant PPC_dscliq              => 719;
use constant PPC_dscri               => 720;
use constant PPC_dscriq              => 721;
use constant PPC_dsub                => 722;
use constant PPC_dsubq               => 723;
use constant PPC_dtstdc              => 724;
use constant PPC_dtstdcq             => 725;
use constant PPC_dtstdg              => 726;
use constant PPC_dtstdgq             => 727;
use constant PPC_dtstex              => 728;
use constant PPC_dtstexq             => 729;
use constant PPC_dtstsf              => 730;
use constant PPC_dtstsfq             => 731;
use constant PPC_dxex                => 732;
use constant PPC_dxexq               => 733;
use constant PPC_dsn                 => 734;
use constant PPC_lbdx                => 735;
use constant PPC_lddx                => 736;
use constant PPC_lfddx               => 737;
use constant PPC_lhdx                => 738;
use constant PPC_lwdx                => 739;
use constant PPC_stbdx               => 740;
use constant PPC_stddx               => 741;
use constant PPC_stfddx              => 742;
use constant PPC_sthdx               => 743;
use constant PPC_stwdx               => 744;
use constant PPC_mbar                => 745;
use constant PPC_rfmci               => 746;
use constant PPC_tlbilx              => 747;
use constant PPC_dci                 => 748;
use constant PPC_ici                 => 749;
use constant PPC_mfdcrux             => 750;
use constant PPC_mfdcrx              => 751;
use constant PPC_mtdcrux             => 752;
use constant PPC_mtdcrx              => 753;
use constant PPC_dnh                 => 754;
use constant PPC_ehpriv              => 755;
use constant PPC_rfgi                => 756;
use constant PPC_msgclr              => 757;
use constant PPC_msgsnd              => 758;
use constant PPC_dcbfep              => 759;
use constant PPC_dcbstep             => 760;
use constant PPC_dcbtep              => 761;
use constant PPC_dcbtstep            => 762;
use constant PPC_dcbzep              => 763;
use constant PPC_evlddepx            => 764;
use constant PPC_evstddepx           => 765;
use constant PPC_icbiep              => 766;
use constant PPC_lbepx               => 767;
use constant PPC_lfdepx              => 768;
use constant PPC_lhepx               => 769;
use constant PPC_lvepx               => 770;
use constant PPC_lvepxl              => 771;
use constant PPC_lwepx               => 772;
use constant PPC_stbepx              => 773;
use constant PPC_stfdepx             => 774;
use constant PPC_sthepx              => 775;
use constant PPC_stvepx              => 776;
use constant PPC_stvepxl             => 777;
use constant PPC_stwepx              => 778;
use constant PPC_ldepx               => 779;
use constant PPC_stdepx              => 780;
use constant PPC_mfpmr               => 781;
use constant PPC_mtpmr               => 782;
use constant PPC_mftmr               => 783;
use constant PPC_mttmr               => 784;
use constant PPC_tlbsrx              => 785;
use constant PPC_fcfids              => 786;
use constant PPC_fcfidu              => 787;
use constant PPC_fcfidus             => 788;
use constant PPC_fctidu              => 789;
use constant PPC_fctiduz             => 790;
use constant PPC_fctiwu              => 791;
use constant PPC_fctiwuz             => 792;
use constant PPC_ftdiv               => 793;
use constant PPC_ftsqrt              => 794;
use constant PPC_lfiwax              => 795;
use constant PPC_lfiwzx              => 796;
use constant PPC_lfdp                => 797;
use constant PPC_lfdpx               => 798;
use constant PPC_stfdp               => 799;
use constant PPC_stfdpx              => 800;
use constant PPC_fcpsgn              => 801;
use constant PPC_fre                 => 802;
use constant PPC_frim                => 803;
use constant PPC_frin                => 804;
use constant PPC_frip                => 805;
use constant PPC_friz                => 806;
use constant PPC_macchw              => 807;
use constant PPC_macchws             => 808;
use constant PPC_macchwsu            => 809;
use constant PPC_macchwu             => 810;
use constant PPC_machhw              => 811;
use constant PPC_machhws             => 812;
use constant PPC_machhwsu            => 813;
use constant PPC_machhwu             => 814;
use constant PPC_maclhw              => 815;
use constant PPC_maclhws             => 816;
use constant PPC_maclhwsu            => 817;
use constant PPC_maclhwu             => 818;
use constant PPC_mulchw              => 819;
use constant PPC_mulchwu             => 820;
use constant PPC_mulhhw              => 821;
use constant PPC_mulhhwu             => 822;
use constant PPC_mullhw              => 823;
use constant PPC_mullhwu             => 824;
use constant PPC_nmacchw             => 825;
use constant PPC_nmacchws            => 826;
use constant PPC_nmachhw             => 827;
use constant PPC_nmachhws            => 828;
use constant PPC_nmaclhw             => 829;
use constant PPC_nmaclhws            => 830;
use constant PPC_dlmzb               => 831;
use constant PPC_lq                  => 832;
use constant PPC_stq                 => 833;
use constant PPC_doze                => 834;
use constant PPC_lbzcix              => 835;
use constant PPC_ldcix               => 836;
use constant PPC_lhzcix              => 837;
use constant PPC_lwzcix              => 838;
use constant PPC_nap                 => 839;
use constant PPC_rvwinkle            => 840;
use constant PPC_slbfee              => 841;
use constant PPC_sleep               => 842;
use constant PPC_stbcix              => 843;
use constant PPC_stdcix              => 844;
use constant PPC_sthcix              => 845;
use constant PPC_stwcix              => 846;
use constant PPC_tlbiel              => 847;
use constant PPC_lvebx               => 848;
use constant PPC_lvehx               => 849;
use constant PPC_lvewx               => 850;
use constant PPC_lvsl                => 851;
use constant PPC_lvsr                => 852;
use constant PPC_lvx                 => 853;
use constant PPC_lvxl                => 854;
use constant PPC_mfvscr              => 855;
use constant PPC_mtvscr              => 856;
use constant PPC_stvebx              => 857;
use constant PPC_stvehx              => 858;
use constant PPC_stvewx              => 859;
use constant PPC_stvx                => 860;
use constant PPC_stvxl               => 861;
use constant PPC_vaddcuw             => 862;
use constant PPC_vaddfp              => 863;
use constant PPC_vaddsbs             => 864;
use constant PPC_vaddshs             => 865;
use constant PPC_vaddsws             => 866;
use constant PPC_vaddubm             => 867;
use constant PPC_vaddubs             => 868;
use constant PPC_vadduhm             => 869;
use constant PPC_vadduhs             => 870;
use constant PPC_vadduwm             => 871;
use constant PPC_vadduws             => 872;
use constant PPC_vand                => 873;
use constant PPC_vandc               => 874;
use constant PPC_vavgsb              => 875;
use constant PPC_vavgsh              => 876;
use constant PPC_vavgsw              => 877;
use constant PPC_vavgub              => 878;
use constant PPC_vavguh              => 879;
use constant PPC_vavguw              => 880;
use constant PPC_vcfsx               => 881;
use constant PPC_vcfux               => 882;
use constant PPC_vcmpbfp             => 883;
use constant PPC_vcmpeqfp            => 884;
use constant PPC_vcmpequb            => 885;
use constant PPC_vcmpequh            => 886;
use constant PPC_vcmpequw            => 887;
use constant PPC_vcmpgefp            => 888;
use constant PPC_vcmpgtfp            => 889;
use constant PPC_vcmpgtsb            => 890;
use constant PPC_vcmpgtsh            => 891;
use constant PPC_vcmpgtsw            => 892;
use constant PPC_vcmpgtub            => 893;
use constant PPC_vcmpgtuh            => 894;
use constant PPC_vcmpgtuw            => 895;
use constant PPC_vctsxs              => 896;
use constant PPC_vctuxs              => 897;
use constant PPC_vexptefp            => 898;
use constant PPC_vlogefp             => 899;
use constant PPC_vmaddfp             => 900;
use constant PPC_vmaxfp              => 901;
use constant PPC_vmaxsb              => 902;
use constant PPC_vmaxsh              => 903;
use constant PPC_vmaxsw              => 904;
use constant PPC_vmaxub              => 905;
use constant PPC_vmaxuh              => 906;
use constant PPC_vmaxuw              => 907;
use constant PPC_vmhaddshs           => 908;
use constant PPC_vmhraddshs          => 909;
use constant PPC_vminfp              => 910;
use constant PPC_vminsb              => 911;
use constant PPC_vminsh              => 912;
use constant PPC_vminsw              => 913;
use constant PPC_vminub              => 914;
use constant PPC_vminuh              => 915;
use constant PPC_vminuw              => 916;
use constant PPC_vmladduhm           => 917;
use constant PPC_vmrghb              => 918;
use constant PPC_vmrghh              => 919;
use constant PPC_vmrghw              => 920;
use constant PPC_vmrglb              => 921;
use constant PPC_vmrglh              => 922;
use constant PPC_vmrglw              => 923;
use constant PPC_vmsummbm            => 924;
use constant PPC_vmsumshm            => 925;
use constant PPC_vmsumshs            => 926;
use constant PPC_vmsumubm            => 927;
use constant PPC_vmsumuhm            => 928;
use constant PPC_vmsumuhs            => 929;
use constant PPC_vmulesb             => 930;
use constant PPC_vmulesh             => 931;
use constant PPC_vmuleub             => 932;
use constant PPC_vmuleuh             => 933;
use constant PPC_vmulosb             => 934;
use constant PPC_vmulosh             => 935;
use constant PPC_vmuloub             => 936;
use constant PPC_vmulouh             => 937;
use constant PPC_vnmsubfp            => 938;
use constant PPC_vnor                => 939;
use constant PPC_vor                 => 940;
use constant PPC_vperm               => 941;
use constant PPC_vpkpx               => 942;
use constant PPC_vpkshss             => 943;
use constant PPC_vpkshus             => 944;
use constant PPC_vpkswss             => 945;
use constant PPC_vpkswus             => 946;
use constant PPC_vpkuhum             => 947;
use constant PPC_vpkuhus             => 948;
use constant PPC_vpkuwum             => 949;
use constant PPC_vpkuwus             => 950;
use constant PPC_vrefp               => 951;
use constant PPC_vrfim               => 952;
use constant PPC_vrfin               => 953;
use constant PPC_vrfip               => 954;
use constant PPC_vrfiz               => 955;
use constant PPC_vrlb                => 956;
use constant PPC_vrlh                => 957;
use constant PPC_vrlw                => 958;
use constant PPC_vrsqrtefp           => 959;
use constant PPC_vsel                => 960;
use constant PPC_vsl                 => 961;
use constant PPC_vslb                => 962;
use constant PPC_vsldoi              => 963;
use constant PPC_vslh                => 964;
use constant PPC_vslo                => 965;
use constant PPC_vslw                => 966;
use constant PPC_vspltb              => 967;
use constant PPC_vsplth              => 968;
use constant PPC_vspltisb            => 969;
use constant PPC_vspltish            => 970;
use constant PPC_vspltisw            => 971;
use constant PPC_vspltw              => 972;
use constant PPC_vsr                 => 973;
use constant PPC_vsrab               => 974;
use constant PPC_vsrah               => 975;
use constant PPC_vsraw               => 976;
use constant PPC_vsrb                => 977;
use constant PPC_vsrh                => 978;
use constant PPC_vsro                => 979;
use constant PPC_vsrw                => 980;
use constant PPC_vsubcuw             => 981;
use constant PPC_vsubfp              => 982;
use constant PPC_vsubsbs             => 983;
use constant PPC_vsubshs             => 984;
use constant PPC_vsubsws             => 985;
use constant PPC_vsububm             => 986;
use constant PPC_vsububs             => 987;
use constant PPC_vsubuhm             => 988;
use constant PPC_vsubuhs             => 989;
use constant PPC_vsubuwm             => 990;
use constant PPC_vsubuws             => 991;
use constant PPC_vsum2sws            => 992;
use constant PPC_vsum4sbs            => 993;
use constant PPC_vsum4shs            => 994;
use constant PPC_vsum4ubs            => 995;
use constant PPC_vsumsws             => 996;
use constant PPC_vupkhpx             => 997;
use constant PPC_vupkhsb             => 998;
use constant PPC_vupkhsh             => 999;
use constant PPC_vupklpx             => 1000;
use constant PPC_vupklsb             => 1001;
use constant PPC_vupklsh             => 1002;
use constant PPC_vxor                => 1003;
use constant PPC_lxsdx               => 1004;
use constant PPC_lxvd2x              => 1005;
use constant PPC_lxvdsx              => 1006;
use constant PPC_lxvw4x              => 1007;
use constant PPC_stxsdx              => 1008;
use constant PPC_stxvd2x             => 1009;
use constant PPC_stxvw4x             => 1010;
use constant PPC_xsabsdp             => 1011;
use constant PPC_xsadddp             => 1012;
use constant PPC_xscmpodp            => 1013;
use constant PPC_xscmpudp            => 1014;
use constant PPC_xscpsgndp           => 1015;
use constant PPC_xscvdpsp            => 1016;
use constant PPC_xscvdpsxds          => 1017;
use constant PPC_xscvdpsxws          => 1018;
use constant PPC_xscvdpuxds          => 1019;
use constant PPC_xscvdpuxws          => 1020;
use constant PPC_xscvspdp            => 1021;
use constant PPC_xscvsxddp           => 1022;
use constant PPC_xscvuxddp           => 1023;
use constant PPC_xsdivdp             => 1024;
use constant PPC_xsmaddadp           => 1025;
use constant PPC_xsmaddmdp           => 1026;
use constant PPC_xsmaxdp             => 1027;
use constant PPC_xsmindp             => 1028;
use constant PPC_xsmsubadp           => 1029;
use constant PPC_xsmsubmdp           => 1030;
use constant PPC_xsmuldp             => 1031;
use constant PPC_xsnabsdp            => 1032;
use constant PPC_xsnegdp             => 1033;
use constant PPC_xsnmaddadp          => 1034;
use constant PPC_xsnmaddmdp          => 1035;
use constant PPC_xsnmsubadp          => 1036;
use constant PPC_xsnmsubmdp          => 1037;
use constant PPC_xsrdpi              => 1038;
use constant PPC_xsrdpic             => 1039;
use constant PPC_xsrdpim             => 1040;
use constant PPC_xsrdpip             => 1041;
use constant PPC_xsrdpiz             => 1042;
use constant PPC_xsredp              => 1043;
use constant PPC_xsrsqrtedp          => 1044;
use constant PPC_xssqrtdp            => 1045;
use constant PPC_xssubdp             => 1046;
use constant PPC_xstdivdp            => 1047;
use constant PPC_xstsqrtdp           => 1048;
use constant PPC_xvabsdp             => 1049;
use constant PPC_xvabssp             => 1050;
use constant PPC_xvadddp             => 1051;
use constant PPC_xvaddsp             => 1052;
use constant PPC_xvcmpeqdp           => 1053;
use constant PPC_xvcmpeqsp           => 1054;
use constant PPC_xvcmpgedp           => 1055;
use constant PPC_xvcmpgesp           => 1056;
use constant PPC_xvcmpgtdp           => 1057;
use constant PPC_xvcmpgtsp           => 1058;
use constant PPC_xvcpsgndp           => 1059;
use constant PPC_xvcpsgnsp           => 1060;
use constant PPC_xvcvdpsp            => 1061;
use constant PPC_xvcvdpsxds          => 1062;
use constant PPC_xvcvdpsxws          => 1063;
use constant PPC_xvcvdpuxds          => 1064;
use constant PPC_xvcvdpuxws          => 1065;
use constant PPC_xvcvspdp            => 1066;
use constant PPC_xvcvspsxds          => 1067;
use constant PPC_xvcvspsxws          => 1068;
use constant PPC_xvcvspuxds          => 1069;
use constant PPC_xvcvspuxws          => 1070;
use constant PPC_xvcvsxddp           => 1071;
use constant PPC_xvcvsxdsp           => 1072;
use constant PPC_xvcvsxwdp           => 1073;
use constant PPC_xvcvsxwsp           => 1074;
use constant PPC_xvcvuxddp           => 1075;
use constant PPC_xvcvuxdsp           => 1076;
use constant PPC_xvcvuxwdp           => 1077;
use constant PPC_xvcvuxwsp           => 1078;
use constant PPC_xvdivdp             => 1079;
use constant PPC_xvdivsp             => 1080;
use constant PPC_xvmaddadp           => 1081;
use constant PPC_xvmaddasp           => 1082;
use constant PPC_xvmaddmdp           => 1083;
use constant PPC_xvmaddmsp           => 1084;
use constant PPC_xvmaxdp             => 1085;
use constant PPC_xvmaxsp             => 1086;
use constant PPC_xvmindp             => 1087;
use constant PPC_xvminsp             => 1088;
use constant PPC_xvmsubadp           => 1089;
use constant PPC_xvmsubasp           => 1090;
use constant PPC_xvmsubmdp           => 1091;
use constant PPC_xvmsubmsp           => 1092;
use constant PPC_xvmuldp             => 1093;
use constant PPC_xvmulsp             => 1094;
use constant PPC_xvnabsdp            => 1095;
use constant PPC_xvnabssp            => 1096;
use constant PPC_xvnegdp             => 1097;
use constant PPC_xvnegsp             => 1098;
use constant PPC_xvnmaddadp          => 1099;
use constant PPC_xvnmaddasp          => 1100;
use constant PPC_xvnmaddmdp          => 1101;
use constant PPC_xvnmaddmsp          => 1102;
use constant PPC_xvnmsubadp          => 1103;
use constant PPC_xvnmsubasp          => 1104;
use constant PPC_xvnmsubmdp          => 1105;
use constant PPC_xvnmsubmsp          => 1106;
use constant PPC_xvrdpi              => 1107;
use constant PPC_xvrdpic             => 1108;
use constant PPC_xvrdpim             => 1109;
use constant PPC_xvrdpip             => 1110;
use constant PPC_xvrdpiz             => 1111;
use constant PPC_xvredp              => 1112;
use constant PPC_xvresp              => 1113;
use constant PPC_xvrspi              => 1114;
use constant PPC_xvrspic             => 1115;
use constant PPC_xvrspim             => 1116;
use constant PPC_xvrspip             => 1117;
use constant PPC_xvrspiz             => 1118;
use constant PPC_xvrsqrtedp          => 1119;
use constant PPC_xvrsqrtesp          => 1120;
use constant PPC_xvsqrtdp            => 1121;
use constant PPC_xvsqrtsp            => 1122;
use constant PPC_xvsubdp             => 1123;
use constant PPC_xvsubsp             => 1124;
use constant PPC_xvtdivdp            => 1125;
use constant PPC_xvtdivsp            => 1126;
use constant PPC_xvtsqrtdp           => 1127;
use constant PPC_xvtsqrtsp           => 1128;
use constant PPC_xxland              => 1129;
use constant PPC_xxlandc             => 1130;
use constant PPC_xxlnor              => 1131;
use constant PPC_xxlor               => 1132;
use constant PPC_xxlxor              => 1133;
use constant PPC_xxmrghw             => 1134;
use constant PPC_xxmrglw             => 1135;
use constant PPC_xxpermdi            => 1136;
use constant PPC_xxsel               => 1137;
use constant PPC_xxsldwi             => 1138;
use constant PPC_xxspltw             => 1139;
use constant PPC_wait                => 1140;
use constant PPC_dss                 => 1141;
use constant PPC_dssall              => 1142;
use constant PPC_dst                 => 1143;
use constant PPC_dstt                => 1144;
use constant PPC_dstst               => 1145;
use constant PPC_dststt              => 1146;
use constant PPC_lvlx                => 1147;
use constant PPC_lvlxl               => 1148;
use constant PPC_lvrx                => 1149;
use constant PPC_lvrxl               => 1150;
use constant PPC_stvlx               => 1151;
use constant PPC_stvlxl              => 1152;
use constant PPC_stvrx               => 1153;
use constant PPC_stvrxl              => 1154;
use constant PPC_add16i              => 1155;
use constant PPC_add2i               => 1156;
use constant PPC_add2is              => 1157;
use constant PPC_and2i               => 1158;
use constant PPC_and2is              => 1159;
use constant PPC_cmp16i              => 1160;
use constant PPC_cmph                => 1161;
use constant PPC_cmph16i             => 1162;
use constant PPC_cmphl               => 1163;
use constant PPC_cmphl16i            => 1164;
use constant PPC_cmpl16i             => 1165;
use constant PPC_mull2i              => 1166;
use constant PPC_or2i                => 1167;
use constant PPC_or2is               => 1168;
use constant PPC_rlw                 => 1169;
use constant PPC_rlwi                => 1170;
use constant PPC_bclri               => 1171;
use constant PPC_bgeni               => 1172;
use constant PPC_bmaski              => 1173;
use constant PPC_bseti               => 1174;
use constant PPC_btsti               => 1175;
use constant PPC_extzb               => 1176;
use constant PPC_extzh               => 1177;
use constant PPC_illegal             => 1178;
use constant PPC_mfar                => 1179;
use constant PPC_mtar                => 1180;
use constant PPC_sub                 => 1181;
use constant PPC_sub16i              => 1182;
use constant PPC_sub2i               => 1183;
use constant PPC_sub2is              => 1184;
use constant PPC_extldi              => 1185;
use constant PPC_extrdi              => 1186;
use constant PPC_insrdi              => 1187;
use constant PPC_rotldi              => 1188;
use constant PPC_rotrdi              => 1189;
use constant PPC_rotld               => 1190;
use constant PPC_sldi                => 1191;
use constant PPC_srdi                => 1192;
use constant PPC_clrldi              => 1193;
use constant PPC_clrrdi              => 1194;
use constant PPC_clrlsldi            => 1195;
use constant PPC_xnop                => 1196;
use constant PPC_hnop                => 1197;
use constant PPC_dcbfl               => 1198;
use constant PPC_dcbflp              => 1199;
use constant PPC_dcbtt               => 1200;
use constant PPC_dcbtstt             => 1201;
use constant PPC_lwsync              => 1202;
use constant PPC_ptesync             => 1203;
use constant PPC_waitrsv             => 1204;
use constant PPC_waitimpl            => 1205;
use constant PPC_evmr                => 1206;
use constant PPC_evnot               => 1207;
use constant PPC_mtcr                => 1208;
use constant PPC_xvmovdp             => 1209;
use constant PPC_xvmovsp             => 1210;
use constant PPC_xxspltd             => 1211;
use constant PPC_xxmrghd             => 1212;
use constant PPC_xxmrgld             => 1213;
use constant PPC_xxswapd             => 1214;
use constant PPC_dcbz128             => 1215;
use constant PPC_last                => 1216;
use constant NEC850_NULL             => 0;
use constant NEC850_BREAKPOINT       => 1;
use constant NEC850_XORI             => 2;
use constant NEC850_XOR              => 3;
use constant NEC850_TST1             => 4;
use constant NEC850_TST              => 5;
use constant NEC850_TRAP             => 6;
use constant NEC850_SUBR             => 7;
use constant NEC850_SUB              => 8;
use constant NEC850_STSR             => 9;
use constant NEC850_ST_B             => 10;
use constant NEC850_ST_H             => 11;
use constant NEC850_ST_W             => 12;
use constant NEC850_SST_B            => 13;
use constant NEC850_SST_H            => 14;
use constant NEC850_SST_W            => 15;
use constant NEC850_SLD_B            => 16;
use constant NEC850_SLD_H            => 17;
use constant NEC850_SLD_W            => 18;
use constant NEC850_SHR              => 19;
use constant NEC850_SHL              => 20;
use constant NEC850_SET1             => 21;
use constant NEC850_SETFV            => 22;
use constant NEC850_SETFL            => 23;
use constant NEC850_SETFZ            => 24;
use constant NEC850_SETFNH           => 25;
use constant NEC850_SETFN            => 26;
use constant NEC850_SETFT            => 27;
use constant NEC850_SETFLT           => 28;
use constant NEC850_SETFLE           => 29;
use constant NEC850_SETFNV           => 30;
use constant NEC850_SETFNC           => 31;
use constant NEC850_SETFNZ           => 32;
use constant NEC850_SETFH            => 33;
use constant NEC850_SETFP            => 34;
use constant NEC850_SETFSA           => 35;
use constant NEC850_SETFGE           => 36;
use constant NEC850_SETFGT           => 37;
use constant NEC850_SATSUBR          => 38;
use constant NEC850_SATSUBI          => 39;
use constant NEC850_SATSUB           => 40;
use constant NEC850_SATADD           => 41;
use constant NEC850_SAR              => 42;
use constant NEC850_RETI             => 43;
use constant NEC850_ORI              => 44;
use constant NEC850_OR               => 45;
use constant NEC850_NOT1             => 46;
use constant NEC850_NOT              => 47;
use constant NEC850_NOP              => 48;
use constant NEC850_MULHI            => 49;
use constant NEC850_MULH             => 50;
use constant NEC850_MOVHI            => 51;
use constant NEC850_MOVEA            => 52;
use constant NEC850_MOV              => 53;
use constant NEC850_LDSR             => 54;
use constant NEC850_LD_B             => 55;
use constant NEC850_LD_H             => 56;
use constant NEC850_LD_W             => 57;
use constant NEC850_JR               => 58;
use constant NEC850_JMP              => 59;
use constant NEC850_JARL             => 60;
use constant NEC850_HALT             => 61;
use constant NEC850_EI               => 62;
use constant NEC850_DIVH             => 63;
use constant NEC850_DI               => 64;
use constant NEC850_CMP              => 65;
use constant NEC850_CLR1             => 66;
use constant NEC850_BV               => 67;
use constant NEC850_BL               => 68;
use constant NEC850_BZ               => 69;
use constant NEC850_BNH              => 70;
use constant NEC850_BN               => 71;
use constant NEC850_BR               => 72;
use constant NEC850_BLT              => 73;
use constant NEC850_BLE              => 74;
use constant NEC850_BNV              => 75;
use constant NEC850_BNC              => 76;
use constant NEC850_BNZ              => 77;
use constant NEC850_BH               => 78;
use constant NEC850_BP               => 79;
use constant NEC850_BSA              => 80;
use constant NEC850_BGE              => 81;
use constant NEC850_BGT              => 82;
use constant NEC850_ANDI             => 83;
use constant NEC850_AND              => 84;
use constant NEC850_ADDI             => 85;
use constant NEC850_ADD              => 86;
use constant NEC850_SWITCH           => 87;
use constant NEC850_ZXB              => 88;
use constant NEC850_SXB              => 89;
use constant NEC850_ZXH              => 90;
use constant NEC850_SXH              => 91;
use constant NEC850_DISPOSE_r0       => 92;
use constant NEC850_DISPOSE_r        => 93;
use constant NEC850_CALLT            => 94;
use constant NEC850_DBTRAP           => 95;
use constant NEC850_DBRET            => 96;
use constant NEC850_CTRET            => 97;
use constant NEC850_SASFV            => 98;
use constant NEC850_SASFL            => 99;
use constant NEC850_SASFZ            => 100;
use constant NEC850_SASFNH           => 101;
use constant NEC850_SASFN            => 102;
use constant NEC850_SASFT            => 103;
use constant NEC850_SASFLT           => 104;
use constant NEC850_SASFLE           => 105;
use constant NEC850_SASFNV           => 106;
use constant NEC850_SASFNC           => 107;
use constant NEC850_SASFNZ           => 108;
use constant NEC850_SASFH            => 109;
use constant NEC850_SASFP            => 110;
use constant NEC850_SASFSA           => 111;
use constant NEC850_SASFGE           => 112;
use constant NEC850_SASFGT           => 113;
use constant NEC850_PREPARE_sp       => 114;
use constant NEC850_PREPARE_i        => 115;
use constant NEC850_MUL              => 116;
use constant NEC850_MULU             => 117;
use constant NEC850_DIVH_r3          => 118;
use constant NEC850_DIVHU            => 119;
use constant NEC850_DIV              => 120;
use constant NEC850_DIVU             => 121;
use constant NEC850_BSW              => 122;
use constant NEC850_BSH              => 123;
use constant NEC850_HSW              => 124;
use constant NEC850_CMOVV            => 125;
use constant NEC850_CMOVL            => 126;
use constant NEC850_CMOVZ            => 127;
use constant NEC850_CMOVNH           => 128;
use constant NEC850_CMOVN            => 129;
use constant NEC850_CMOV             => 130;
use constant NEC850_CMOVLT           => 131;
use constant NEC850_CMOVLE           => 132;
use constant NEC850_CMOVNV           => 133;
use constant NEC850_CMOVNC           => 134;
use constant NEC850_CMOVNZ           => 135;
use constant NEC850_CMOVH            => 136;
use constant NEC850_CMOVP            => 137;
use constant NEC850_CMOVSA           => 138;
use constant NEC850_CMOVGE           => 139;
use constant NEC850_CMOVGT           => 140;
use constant NEC850_SLD_BU           => 141;
use constant NEC850_SLD_HU           => 142;
use constant NEC850_LD_BU            => 143;
use constant NEC850_LD_HU            => 144;
use constant NEC850_LAST_INSTRUCTION => 145;
use constant TRICORE_null            => 0;
use constant TRICORE_abs             => 1;
use constant TRICORE_abs_b           => 2;
use constant TRICORE_abs_h           => 3;
use constant TRICORE_absdif          => 4;
use constant TRICORE_absdif_b        => 5;
use constant TRICORE_absdif_h        => 6;
use constant TRICORE_absdifs         => 7;
use constant TRICORE_absdifs_h       => 8;
use constant TRICORE_abss            => 9;
use constant TRICORE_abss_h          => 10;
use constant TRICORE_add_b           => 11;
use constant TRICORE_add_f           => 12;
use constant TRICORE_add_h           => 13;
use constant TRICORE_add16           => 14;
use constant TRICORE_add16_a         => 15;
use constant TRICORE_add32           => 16;
use constant TRICORE_add32_a         => 17;
use constant TRICORE_addc            => 18;
use constant TRICORE_addi            => 19;
use constant TRICORE_addih           => 20;
use constant TRICORE_addih_a         => 21;
use constant TRICORE_adds            => 22;
use constant TRICORE_adds_h          => 23;
use constant TRICORE_adds_hu         => 24;
use constant TRICORE_adds_u          => 25;
use constant TRICORE_adds16          => 26;
use constant TRICORE_addsc_at        => 27;
use constant TRICORE_addsc16_a       => 28;
use constant TRICORE_addsc32_a       => 29;
use constant TRICORE_addx            => 30;
use constant TRICORE_and_and_t       => 31;
use constant TRICORE_and_andn_t      => 32;
use constant TRICORE_and_eq          => 33;
use constant TRICORE_and_ge          => 34;
use constant TRICORE_and_ge_u        => 35;
use constant TRICORE_and_lt          => 36;
use constant TRICORE_and_lt_u        => 37;
use constant TRICORE_and_ne          => 38;
use constant TRICORE_and_nor_t       => 39;
use constant TRICORE_and_or_t        => 40;
use constant TRICORE_and_t           => 41;
use constant TRICORE_and16           => 42;
use constant TRICORE_and32           => 43;
use constant TRICORE_andn            => 44;
use constant TRICORE_andn_t          => 45;
use constant TRICORE_bisr16          => 46;
use constant TRICORE_bisr32          => 47;
use constant TRICORE_bmerge          => 48;
use constant TRICORE_bsplit          => 49;
use constant TRICORE_cachea_i        => 50;
use constant TRICORE_cachea_w        => 51;
use constant TRICORE_cachea_wi       => 52;
use constant TRICORE_cadd16          => 53;
use constant TRICORE_cadd32          => 54;
use constant TRICORE_caddn16         => 55;
use constant TRICORE_caddn32         => 56;
use constant TRICORE_call16          => 57;
use constant TRICORE_call32          => 58;
use constant TRICORE_calla           => 59;
use constant TRICORE_calli           => 60;
use constant TRICORE_clo             => 61;
use constant TRICORE_clo_h           => 62;
use constant TRICORE_cls             => 63;
use constant TRICORE_cls_h           => 64;
use constant TRICORE_clz             => 65;
use constant TRICORE_clz_h           => 66;
use constant TRICORE_cmov16          => 67;
use constant TRICORE_cmovn16         => 68;
use constant TRICORE_cmp_f           => 69;
use constant TRICORE_csub            => 70;
use constant TRICORE_csubn           => 71;
use constant TRICORE_debug16         => 72;
use constant TRICORE_debug32         => 73;
use constant TRICORE_dextr           => 74;
use constant TRICORE_disable         => 75;
use constant TRICORE_div_f           => 76;
use constant TRICORE_dsync           => 77;
use constant TRICORE_dvadj           => 78;
use constant TRICORE_dvinit          => 79;
use constant TRICORE_dvinit_b        => 80;
use constant TRICORE_dvinit_bu       => 81;
use constant TRICORE_dvinit_h        => 82;
use constant TRICORE_dvinit_hu       => 83;
use constant TRICORE_dvinit_u        => 84;
use constant TRICORE_dvstep          => 85;
use constant TRICORE_dvstep_u        => 86;
use constant TRICORE_enable          => 87;
use constant TRICORE_eq_a            => 88;
use constant TRICORE_eq_b            => 89;
use constant TRICORE_eq_h            => 90;
use constant TRICORE_eq_w            => 91;
use constant TRICORE_eq16            => 92;
use constant TRICORE_eq32            => 93;
use constant TRICORE_eqany_b         => 94;
use constant TRICORE_eqany_h         => 95;
use constant TRICORE_eqz_a           => 96;
use constant TRICORE_extr            => 97;
use constant TRICORE_extr_u          => 98;
use constant TRICORE_ftoi            => 99;
use constant TRICORE_ftoq31          => 100;
use constant TRICORE_ftou            => 101;
use constant TRICORE_ge              => 102;
use constant TRICORE_ge_a            => 103;
use constant TRICORE_ge_u            => 104;
use constant TRICORE_imask           => 105;
use constant TRICORE_ins_t           => 106;
use constant TRICORE_insert          => 107;
use constant TRICORE_insn_t          => 108;
use constant TRICORE_isync           => 109;
use constant TRICORE_itof            => 110;
use constant TRICORE_ixmax           => 111;
use constant TRICORE_ixmax_u         => 112;
use constant TRICORE_ixmin           => 113;
use constant TRICORE_ixmin_u         => 114;
use constant TRICORE_j16             => 115;
use constant TRICORE_j32             => 116;
use constant TRICORE_ja              => 117;
use constant TRICORE_jeq_a           => 118;
use constant TRICORE_jeq16           => 119;
use constant TRICORE_jeq32           => 120;
use constant TRICORE_jge             => 121;
use constant TRICORE_jge_u           => 122;
use constant TRICORE_jgez16          => 123;
use constant TRICORE_jgtz16          => 124;
use constant TRICORE_ji16            => 125;
use constant TRICORE_ji32            => 126;
use constant TRICORE_jl              => 127;
use constant TRICORE_jla             => 128;
use constant TRICORE_jlez16          => 129;
use constant TRICORE_jli             => 130;
use constant TRICORE_jlt             => 131;
use constant TRICORE_jlt_u           => 132;
use constant TRICORE_jltz16          => 133;
use constant TRICORE_jne_a           => 134;
use constant TRICORE_jne16           => 135;
use constant TRICORE_jne32           => 136;
use constant TRICORE_jned            => 137;
use constant TRICORE_jnei            => 138;
use constant TRICORE_jnz16           => 139;
use constant TRICORE_jnz16_a         => 140;
use constant TRICORE_jnz16_t         => 141;
use constant TRICORE_jnz32_a         => 142;
use constant TRICORE_jnz32_t         => 143;
use constant TRICORE_jz16            => 144;
use constant TRICORE_jz16_a          => 145;
use constant TRICORE_jz16_t          => 146;
use constant TRICORE_jz32_a          => 147;
use constant TRICORE_jz32_t          => 148;
use constant TRICORE_ld_b            => 149;
use constant TRICORE_ld_d            => 150;
use constant TRICORE_ld_da           => 151;
use constant TRICORE_ld_hu           => 152;
use constant TRICORE_ld_q            => 153;
use constant TRICORE_ld16_a          => 154;
use constant TRICORE_ld16_bu         => 155;
use constant TRICORE_ld16_h          => 156;
use constant TRICORE_ld16_w          => 157;
use constant TRICORE_ld32_a          => 158;
use constant TRICORE_ld32_bu         => 159;
use constant TRICORE_ld32_h          => 160;
use constant TRICORE_ld32_w          => 161;
use constant TRICORE_ldlcx           => 162;
use constant TRICORE_ldmst           => 163;
use constant TRICORE_lducx           => 164;
use constant TRICORE_lea             => 165;
use constant TRICORE_loop16          => 166;
use constant TRICORE_loop32          => 167;
use constant TRICORE_loopu           => 168;
use constant TRICORE_lt_a            => 169;
use constant TRICORE_lt_b            => 170;
use constant TRICORE_lt_bu           => 171;
use constant TRICORE_lt_h            => 172;
use constant TRICORE_lt_hu           => 173;
use constant TRICORE_lt_u            => 174;
use constant TRICORE_lt_w            => 175;
use constant TRICORE_lt_wu           => 176;
use constant TRICORE_lt16            => 177;
use constant TRICORE_lt32            => 178;
use constant TRICORE_madd            => 179;
use constant TRICORE_madd_f          => 180;
use constant TRICORE_madd_h          => 181;
use constant TRICORE_madd_q          => 182;
use constant TRICORE_madd_u          => 183;
use constant TRICORE_maddm_h         => 184;
use constant TRICORE_maddms_h        => 185;
use constant TRICORE_maddr_h         => 186;
use constant TRICORE_maddr_q         => 187;
use constant TRICORE_maddrs_h        => 188;
use constant TRICORE_maddrs_q        => 189;
use constant TRICORE_madds           => 190;
use constant TRICORE_madds_h         => 191;
use constant TRICORE_madds_q         => 192;
use constant TRICORE_madds_u         => 193;
use constant TRICORE_maddsu_h        => 194;
use constant TRICORE_maddsum_h       => 195;
use constant TRICORE_maddsums_h      => 196;
use constant TRICORE_maddsur_h       => 197;
use constant TRICORE_maddsurs_h      => 198;
use constant TRICORE_maddsus_h       => 199;
use constant TRICORE_max             => 200;
use constant TRICORE_max_b           => 201;
use constant TRICORE_max_bu          => 202;
use constant TRICORE_max_h           => 203;
use constant TRICORE_max_hu          => 204;
use constant TRICORE_max_u           => 205;
use constant TRICORE_mfcr            => 206;
use constant TRICORE_min             => 207;
use constant TRICORE_min_b           => 208;
use constant TRICORE_min_bu          => 209;
use constant TRICORE_min_h           => 210;
use constant TRICORE_min_hu          => 211;
use constant TRICORE_min_u           => 212;
use constant TRICORE_mov_u           => 213;
use constant TRICORE_mov16           => 214;
use constant TRICORE_mov16_a         => 215;
use constant TRICORE_mov16_aa        => 216;
use constant TRICORE_mov16_d         => 217;
use constant TRICORE_mov32           => 218;
use constant TRICORE_mov32_a         => 219;
use constant TRICORE_mov32_aa        => 220;
use constant TRICORE_mov32_d         => 221;
use constant TRICORE_movh            => 222;
use constant TRICORE_movh_a          => 223;
use constant TRICORE_msub            => 224;
use constant TRICORE_msub_f          => 225;
use constant TRICORE_msub_h          => 226;
use constant TRICORE_msub_q          => 227;
use constant TRICORE_msub_u          => 228;
use constant TRICORE_msubad_h        => 229;
use constant TRICORE_msubadm_h       => 230;
use constant TRICORE_msubadms_h      => 231;
use constant TRICORE_msubadr_h       => 232;
use constant TRICORE_msubadrs_h      => 233;
use constant TRICORE_msubads_h       => 234;
use constant TRICORE_msubm_h         => 235;
use constant TRICORE_msubms_h        => 236;
use constant TRICORE_msubr_h         => 237;
use constant TRICORE_msubr_q         => 238;
use constant TRICORE_msubrs_h        => 239;
use constant TRICORE_msubrs_q        => 240;
use constant TRICORE_msubs           => 241;
use constant TRICORE_msubs_h         => 242;
use constant TRICORE_msubs_q         => 243;
use constant TRICORE_msubs_u         => 244;
use constant TRICORE_mtcr            => 245;
use constant TRICORE_mul_f           => 246;
use constant TRICORE_mul_h           => 247;
use constant TRICORE_mul_q           => 248;
use constant TRICORE_mul_u           => 249;
use constant TRICORE_mul16           => 250;
use constant TRICORE_mul32           => 251;
use constant TRICORE_mulm_h          => 252;
use constant TRICORE_mulms_h         => 253;
use constant TRICORE_mulr_h          => 254;
use constant TRICORE_mulr_q          => 255;
use constant TRICORE_muls            => 256;
use constant TRICORE_muls_u          => 257;
use constant TRICORE_nand            => 258;
use constant TRICORE_nand_t          => 259;
use constant TRICORE_ne              => 260;
use constant TRICORE_ne_a            => 261;
use constant TRICORE_nez_a           => 262;
use constant TRICORE_nop16           => 263;
use constant TRICORE_nop32           => 264;
use constant TRICORE_nor_t           => 265;
use constant TRICORE_nor16           => 266;
use constant TRICORE_nor32           => 267;
use constant TRICORE_or_and_t        => 268;
use constant TRICORE_or_andn_t       => 269;
use constant TRICORE_or_eq           => 270;
use constant TRICORE_or_ge           => 271;
use constant TRICORE_or_ge_u         => 272;
use constant TRICORE_or_lt           => 273;
use constant TRICORE_or_lt_u         => 274;
use constant TRICORE_or_ne           => 275;
use constant TRICORE_or_nor_t        => 276;
use constant TRICORE_or_or_t         => 277;
use constant TRICORE_or_t            => 278;
use constant TRICORE_or16            => 279;
use constant TRICORE_or32            => 280;
use constant TRICORE_orn             => 281;
use constant TRICORE_orn_t           => 282;
use constant TRICORE_pack            => 283;
use constant TRICORE_parity          => 284;
use constant TRICORE_q31tof          => 285;
use constant TRICORE_qseed_f         => 286;
use constant TRICORE_ret16           => 287;
use constant TRICORE_ret32           => 288;
use constant TRICORE_rfe16           => 289;
use constant TRICORE_rfe32           => 290;
use constant TRICORE_rfm             => 291;
use constant TRICORE_rslcx           => 292;
use constant TRICORE_rstv            => 293;
use constant TRICORE_rsub16          => 294;
use constant TRICORE_rsub32          => 295;
use constant TRICORE_rsubs           => 296;
use constant TRICORE_rsubs_u         => 297;
use constant TRICORE_sat16_b         => 298;
use constant TRICORE_sat16_bu        => 299;
use constant TRICORE_sat16_h         => 300;
use constant TRICORE_sat16_hu        => 301;
use constant TRICORE_sat32_b         => 302;
use constant TRICORE_sat32_bu        => 303;
use constant TRICORE_sat32_h         => 304;
use constant TRICORE_sat32_hu        => 305;
use constant TRICORE_sel             => 306;
use constant TRICORE_seln            => 307;
use constant TRICORE_sh_and_t        => 308;
use constant TRICORE_sh_andn_t       => 309;
use constant TRICORE_sh_eq           => 310;
use constant TRICORE_sh_ge           => 311;
use constant TRICORE_sh_ge_u         => 312;
use constant TRICORE_sh_h            => 313;
use constant TRICORE_sh_lt           => 314;
use constant TRICORE_sh_lt_u         => 315;
use constant TRICORE_sh_nand_t       => 316;
use constant TRICORE_sh_ne           => 317;
use constant TRICORE_sh_nor_t        => 318;
use constant TRICORE_sh_or_t         => 319;
use constant TRICORE_sh_orn_t        => 320;
use constant TRICORE_sh_xnor_t       => 321;
use constant TRICORE_sh_xor_t        => 322;
use constant TRICORE_sh16            => 323;
use constant TRICORE_sh32            => 324;
use constant TRICORE_sha_h           => 325;
use constant TRICORE_sha16           => 326;
use constant TRICORE_sha32           => 327;
use constant TRICORE_shas            => 328;
use constant TRICORE_st_d            => 329;
use constant TRICORE_st_da           => 330;
use constant TRICORE_st_q            => 331;
use constant TRICORE_st_t            => 332;
use constant TRICORE_st16_a          => 333;
use constant TRICORE_st16_b          => 334;
use constant TRICORE_st16_h          => 335;
use constant TRICORE_st16_w          => 336;
use constant TRICORE_st32_a          => 337;
use constant TRICORE_st32_b          => 338;
use constant TRICORE_st32_h          => 339;
use constant TRICORE_st32_w          => 340;
use constant TRICORE_stlcx           => 341;
use constant TRICORE_stucx           => 342;
use constant TRICORE_sub_b           => 343;
use constant TRICORE_sub_f           => 344;
use constant TRICORE_sub_h           => 345;
use constant TRICORE_sub16           => 346;
use constant TRICORE_sub16_a         => 347;
use constant TRICORE_sub32           => 348;
use constant TRICORE_sub32_a         => 349;
use constant TRICORE_subc            => 350;
use constant TRICORE_subs_h          => 351;
use constant TRICORE_subs_hu         => 352;
use constant TRICORE_subs_u          => 353;
use constant TRICORE_subs16          => 354;
use constant TRICORE_subs32          => 355;
use constant TRICORE_subx            => 356;
use constant TRICORE_svlcx           => 357;
use constant TRICORE_swap_w          => 358;
use constant TRICORE_syscall         => 359;
use constant TRICORE_tlbdemap        => 360;
use constant TRICORE_tlbflush_a      => 361;
use constant TRICORE_tlbflush_b      => 362;
use constant TRICORE_tlbmap          => 363;
use constant TRICORE_tlbprobe_a      => 364;
use constant TRICORE_tlbprobe_i      => 365;
use constant TRICORE_trapsv          => 366;
use constant TRICORE_trapv           => 367;
use constant TRICORE_unpack          => 368;
use constant TRICORE_updfl           => 369;
use constant TRICORE_utof            => 370;
use constant TRICORE_xnor            => 371;
use constant TRICORE_xnor_t          => 372;
use constant TRICORE_xor_eq          => 373;
use constant TRICORE_xor_ge          => 374;
use constant TRICORE_xor_ge_u        => 375;
use constant TRICORE_xor_lt          => 376;
use constant TRICORE_xor_lt_u        => 377;
use constant TRICORE_xor_ne          => 378;
use constant TRICORE_xor_t           => 379;
use constant TRICORE_xor16           => 380;
use constant TRICORE_xor32           => 381;
use constant TRICORE_last            => 382;
###
#
# E X P O R T E D   N A M E S
#
###
our @EXPORT = qw(
NN_null
NN_aaa
NN_aad
NN_aam
NN_aas
NN_adc
NN_add
NN_and
NN_arpl
NN_bound
NN_bsf
NN_bsr
NN_bt
NN_btc
NN_btr
NN_bts
NN_call
NN_callfi
NN_callni
NN_cbw
NN_cwde
NN_cdqe
NN_clc
NN_cld
NN_cli
NN_clts
NN_cmc
NN_cmp
NN_cmps
NN_cwd
NN_cdq
NN_cqo
NN_daa
NN_das
NN_dec
NN_div
NN_enterw
NN_enter
NN_enterd
NN_enterq
NN_hlt
NN_idiv
NN_imul
NN_in
NN_inc
NN_ins
NN_int
NN_into
NN_int3
NN_iretw
NN_iret
NN_iretd
NN_iretq
NN_ja
NN_jae
NN_jb
NN_jbe
NN_jc
NN_jcxz
NN_jecxz
NN_jrcxz
NN_je
NN_jg
NN_jge
NN_jl
NN_jle
NN_jna
NN_jnae
NN_jnb
NN_jnbe
NN_jnc
NN_jne
NN_jng
NN_jnge
NN_jnl
NN_jnle
NN_jno
NN_jnp
NN_jns
NN_jnz
NN_jo
NN_jp
NN_jpe
NN_jpo
NN_js
NN_jz
NN_jmp
NN_jmpfi
NN_jmpni
NN_jmpshort
NN_lahf
NN_lar
NN_lea
NN_leavew
NN_leave
NN_leaved
NN_leaveq
NN_lgdt
NN_lidt
NN_lgs
NN_lss
NN_lds
NN_les
NN_lfs
NN_lldt
NN_lmsw
NN_lock
NN_lods
NN_loopw
NN_loop
NN_loopd
NN_loopq
NN_loopwe
NN_loope
NN_loopde
NN_loopqe
NN_loopwne
NN_loopne
NN_loopdne
NN_loopqne
NN_lsl
NN_ltr
NN_mov
NN_movsp
NN_movs
NN_movsx
NN_movzx
NN_mul
NN_neg
NN_nop
NN_not
NN_or
NN_out
NN_outs
NN_pop
NN_popaw
NN_popa
NN_popad
NN_popaq
NN_popfw
NN_popf
NN_popfd
NN_popfq
NN_push
NN_pushaw
NN_pusha
NN_pushad
NN_pushaq
NN_pushfw
NN_pushf
NN_pushfd
NN_pushfq
NN_rcl
NN_rcr
NN_rol
NN_ror
NN_rep
NN_repe
NN_repne
NN_retn
NN_retf
NN_sahf
NN_sal
NN_sar
NN_shl
NN_shr
NN_sbb
NN_scas
NN_seta
NN_setae
NN_setb
NN_setbe
NN_setc
NN_sete
NN_setg
NN_setge
NN_setl
NN_setle
NN_setna
NN_setnae
NN_setnb
NN_setnbe
NN_setnc
NN_setne
NN_setng
NN_setnge
NN_setnl
NN_setnle
NN_setno
NN_setnp
NN_setns
NN_setnz
NN_seto
NN_setp
NN_setpe
NN_setpo
NN_sets
NN_setz
NN_sgdt
NN_sidt
NN_shld
NN_shrd
NN_sldt
NN_smsw
NN_stc
NN_std
NN_sti
NN_stos
NN_str
NN_sub
NN_test
NN_verr
NN_verw
NN_wait
NN_xchg
NN_xlat
NN_xor
NN_cmpxchg
NN_bswap
NN_xadd
NN_invd
NN_wbinvd
NN_invlpg
NN_rdmsr
NN_wrmsr
NN_cpuid
NN_cmpxchg8b
NN_rdtsc
NN_rsm
NN_cmova
NN_cmovb
NN_cmovbe
NN_cmovg
NN_cmovge
NN_cmovl
NN_cmovle
NN_cmovnb
NN_cmovno
NN_cmovnp
NN_cmovns
NN_cmovnz
NN_cmovo
NN_cmovp
NN_cmovs
NN_cmovz
NN_fcmovb
NN_fcmove
NN_fcmovbe
NN_fcmovu
NN_fcmovnb
NN_fcmovne
NN_fcmovnbe
NN_fcmovnu
NN_fcomi
NN_fucomi
NN_fcomip
NN_fucomip
NN_rdpmc
NN_fld
NN_fst
NN_fstp
NN_fxch
NN_fild
NN_fist
NN_fistp
NN_fbld
NN_fbstp
NN_fadd
NN_faddp
NN_fiadd
NN_fsub
NN_fsubp
NN_fisub
NN_fsubr
NN_fsubrp
NN_fisubr
NN_fmul
NN_fmulp
NN_fimul
NN_fdiv
NN_fdivp
NN_fidiv
NN_fdivr
NN_fdivrp
NN_fidivr
NN_fsqrt
NN_fscale
NN_fprem
NN_frndint
NN_fxtract
NN_fabs
NN_fchs
NN_fcom
NN_fcomp
NN_fcompp
NN_ficom
NN_ficomp
NN_ftst
NN_fxam
NN_fptan
NN_fpatan
NN_f2xm1
NN_fyl2x
NN_fyl2xp1
NN_fldz
NN_fld1
NN_fldpi
NN_fldl2t
NN_fldl2e
NN_fldlg2
NN_fldln2
NN_finit
NN_fninit
NN_fsetpm
NN_fldcw
NN_fstcw
NN_fnstcw
NN_fstsw
NN_fnstsw
NN_fclex
NN_fnclex
NN_fstenv
NN_fnstenv
NN_fldenv
NN_fsave
NN_fnsave
NN_frstor
NN_fincstp
NN_fdecstp
NN_ffree
NN_fnop
NN_feni
NN_fneni
NN_fdisi
NN_fndisi
NN_fprem1
NN_fsincos
NN_fsin
NN_fcos
NN_fucom
NN_fucomp
NN_fucompp
NN_setalc
NN_svdc
NN_rsdc
NN_svldt
NN_rsldt
NN_svts
NN_rsts
NN_icebp
NN_loadall
NN_emms
NN_movd
NN_movq
NN_packsswb
NN_packssdw
NN_packuswb
NN_paddb
NN_paddw
NN_paddd
NN_paddsb
NN_paddsw
NN_paddusb
NN_paddusw
NN_pand
NN_pandn
NN_pcmpeqb
NN_pcmpeqw
NN_pcmpeqd
NN_pcmpgtb
NN_pcmpgtw
NN_pcmpgtd
NN_pmaddwd
NN_pmulhw
NN_pmullw
NN_por
NN_psllw
NN_pslld
NN_psllq
NN_psraw
NN_psrad
NN_psrlw
NN_psrld
NN_psrlq
NN_psubb
NN_psubw
NN_psubd
NN_psubsb
NN_psubsw
NN_psubusb
NN_psubusw
NN_punpckhbw
NN_punpckhwd
NN_punpckhdq
NN_punpcklbw
NN_punpcklwd
NN_punpckldq
NN_pxor
NN_fxsave
NN_fxrstor
NN_sysenter
NN_sysexit
NN_pavgusb
NN_pfadd
NN_pfsub
NN_pfsubr
NN_pfacc
NN_pfcmpge
NN_pfcmpgt
NN_pfcmpeq
NN_pfmin
NN_pfmax
NN_pi2fd
NN_pf2id
NN_pfrcp
NN_pfrsqrt
NN_pfmul
NN_pfrcpit1
NN_pfrsqit1
NN_pfrcpit2
NN_pmulhrw
NN_femms
NN_prefetch
NN_prefetchw
NN_addps
NN_addss
NN_andnps
NN_andps
NN_cmpps
NN_cmpss
NN_comiss
NN_cvtpi2ps
NN_cvtps2pi
NN_cvtsi2ss
NN_cvtss2si
NN_cvttps2pi
NN_cvttss2si
NN_divps
NN_divss
NN_ldmxcsr
NN_maxps
NN_maxss
NN_minps
NN_minss
NN_movaps
NN_movhlps
NN_movhps
NN_movlhps
NN_movlps
NN_movmskps
NN_movss
NN_movups
NN_mulps
NN_mulss
NN_orps
NN_rcpps
NN_rcpss
NN_rsqrtps
NN_rsqrtss
NN_shufps
NN_sqrtps
NN_sqrtss
NN_stmxcsr
NN_subps
NN_subss
NN_ucomiss
NN_unpckhps
NN_unpcklps
NN_xorps
NN_pavgb
NN_pavgw
NN_pextrw
NN_pinsrw
NN_pmaxsw
NN_pmaxub
NN_pminsw
NN_pminub
NN_pmovmskb
NN_pmulhuw
NN_psadbw
NN_pshufw
NN_maskmovq
NN_movntps
NN_movntq
NN_prefetcht0
NN_prefetcht1
NN_prefetcht2
NN_prefetchnta
NN_sfence
NN_cmpeqps
NN_cmpltps
NN_cmpleps
NN_cmpunordps
NN_cmpneqps
NN_cmpnltps
NN_cmpnleps
NN_cmpordps
NN_cmpeqss
NN_cmpltss
NN_cmpless
NN_cmpunordss
NN_cmpneqss
NN_cmpnltss
NN_cmpnless
NN_cmpordss
NN_pf2iw
NN_pfnacc
NN_pfpnacc
NN_pi2fw
NN_pswapd
NN_fstp1
NN_fcom2
NN_fcomp3
NN_fxch4
NN_fcomp5
NN_ffreep
NN_fxch7
NN_fstp8
NN_fstp9
NN_addpd
NN_addsd
NN_andnpd
NN_andpd
NN_clflush
NN_cmppd
NN_cmpsd
NN_comisd
NN_cvtdq2pd
NN_cvtdq2ps
NN_cvtpd2dq
NN_cvtpd2pi
NN_cvtpd2ps
NN_cvtpi2pd
NN_cvtps2dq
NN_cvtps2pd
NN_cvtsd2si
NN_cvtsd2ss
NN_cvtsi2sd
NN_cvtss2sd
NN_cvttpd2dq
NN_cvttpd2pi
NN_cvttps2dq
NN_cvttsd2si
NN_divpd
NN_divsd
NN_lfence
NN_maskmovdqu
NN_maxpd
NN_maxsd
NN_mfence
NN_minpd
NN_minsd
NN_movapd
NN_movdq2q
NN_movdqa
NN_movdqu
NN_movhpd
NN_movlpd
NN_movmskpd
NN_movntdq
NN_movnti
NN_movntpd
NN_movq2dq
NN_movsd
NN_movupd
NN_mulpd
NN_mulsd
NN_orpd
NN_paddq
NN_pause
NN_pmuludq
NN_pshufd
NN_pshufhw
NN_pshuflw
NN_pslldq
NN_psrldq
NN_psubq
NN_punpckhqdq
NN_punpcklqdq
NN_shufpd
NN_sqrtpd
NN_sqrtsd
NN_subpd
NN_subsd
NN_ucomisd
NN_unpckhpd
NN_unpcklpd
NN_xorpd
NN_syscall
NN_sysret
NN_swapgs
NN_movddup
NN_movshdup
NN_movsldup
NN_movsxd
NN_cmpxchg16b
NN_addsubpd
NN_addsubps
NN_haddpd
NN_haddps
NN_hsubpd
NN_hsubps
NN_monitor
NN_mwait
NN_fisttp
NN_lddqu
NN_psignb
NN_psignw
NN_psignd
NN_pshufb
NN_pmulhrsw
NN_pmaddubsw
NN_phsubsw
NN_phaddsw
NN_phaddw
NN_phaddd
NN_phsubw
NN_phsubd
NN_palignr
NN_pabsb
NN_pabsw
NN_pabsd
NN_vmcall
NN_vmclear
NN_vmlaunch
NN_vmresume
NN_vmptrld
NN_vmptrst
NN_vmread
NN_vmwrite
NN_vmxoff
NN_vmxon
NN_ud2
NN_rdtscp
NN_pfrcpv
NN_pfrsqrtv
NN_cmpeqpd
NN_cmpltpd
NN_cmplepd
NN_cmpunordpd
NN_cmpneqpd
NN_cmpnltpd
NN_cmpnlepd
NN_cmpordpd
NN_cmpeqsd
NN_cmpltsd
NN_cmplesd
NN_cmpunordsd
NN_cmpneqsd
NN_cmpnltsd
NN_cmpnlesd
NN_cmpordsd
NN_blendpd
NN_blendps
NN_blendvpd
NN_blendvps
NN_dppd
NN_dpps
NN_extractps
NN_insertps
NN_movntdqa
NN_mpsadbw
NN_packusdw
NN_pblendvb
NN_pblendw
NN_pcmpeqq
NN_pextrb
NN_pextrd
NN_pextrq
NN_phminposuw
NN_pinsrb
NN_pinsrd
NN_pinsrq
NN_pmaxsb
NN_pmaxsd
NN_pmaxud
NN_pmaxuw
NN_pminsb
NN_pminsd
NN_pminud
NN_pminuw
NN_pmovsxbw
NN_pmovsxbd
NN_pmovsxbq
NN_pmovsxwd
NN_pmovsxwq
NN_pmovsxdq
NN_pmovzxbw
NN_pmovzxbd
NN_pmovzxbq
NN_pmovzxwd
NN_pmovzxwq
NN_pmovzxdq
NN_pmuldq
NN_pmulld
NN_ptest
NN_roundpd
NN_roundps
NN_roundsd
NN_roundss
NN_crc32
NN_pcmpestri
NN_pcmpestrm
NN_pcmpistri
NN_pcmpistrm
NN_pcmpgtq
NN_popcnt
NN_extrq
NN_insertq
NN_movntsd
NN_movntss
NN_lzcnt
NN_xgetbv
NN_xrstor
NN_xsave
NN_xsetbv
NN_getsec
NN_clgi
NN_invlpga
NN_skinit
NN_stgi
NN_vmexit
NN_vmload
NN_vmmcall
NN_vmrun
NN_vmsave
NN_invept
NN_invvpid
NN_movbe
NN_aesenc
NN_aesenclast
NN_aesdec
NN_aesdeclast
NN_aesimc
NN_aeskeygenassist
NN_pclmulqdq
NN_retnw
NN_retnd
NN_retnq
NN_retfw
NN_retfd
NN_retfq
NN_last
I5_null
I5_aci
I5_adc
Z80_adc
I5_add
Z80_add
I5_adi
I5_ana
I5_ani
I5_call
I5_cnz
I5_cz
I5_cnc
I5_cc
I5_cpo
I5_cpe
I5_cp
I5_cm
I5_cmc
I5_cmp
I5_cpi
I5_cma
I5_daa
I5_dad
I5_dcr
I5_dcx
I5_di
Z80_di
I5_ei
Z80_ei
I5_halt
I5_in
Z80_in
I5_inr
I5_inx
I5_jmp
I5_jnz
I5_jz
I5_jnc
I5_jc
I5_jpo
I5_jpe
I5_jp
I5_jm
I5_lda
I5_ldax
I5_lhld
I5_lxi
I5_mov
I5_mvi
I5_nop
I5_ora
I5_ori
I5_out
Z80_out
I5_pchl
I5_pop
Z80_pop
I5_push
Z80_push
I5_ret
I5_rnz
I5_rz
I5_rnc
I5_rc
I5_rpo
I5_rpe
I5_rp
I5_rm
I5_ral
I5_rlc
I5_rar
I5_rrc
I5_rst
I5_sbb
I5_sbi
I5_stc
I5_sphl
I5_sta
I5_stax
I5_shld
I5_sui
I5_sub
Z80_sub
I5_xra
I5_xri
I5_xchg
I5_xthl
I5_rim
I5_sim
Z80_and
Z80_bit
Z80_call
Z80_ccf
Z80_cp
Z80_cpd
Z80_cpdr
Z80_cpi
Z80_cpir
Z80_cpl
Z80_dec
Z80_djnz
Z80_ex
Z80_exx
Z80_halt
Z80_im
Z80_inc
Z80_ind
Z80_indr
Z80_ini
Z80_inir
Z80_jp
Z80_jr
Z80_ld
Z80_ldd
Z80_lddr
Z80_ldi
Z80_ldir
Z80_neg
Z80_or
Z80_otdr
Z80_otir
Z80_outd
Z80_outi
Z80_res
Z80_ret
Z80_reti
Z80_retn
Z80_rl
Z80_rla
Z80_rlc
Z80_rlca
Z80_rld
Z80_rr
Z80_rra
Z80_rrc
Z80_rrca
Z80_rrd
Z80_scf
Z80_sbc
Z80_set
Z80_sla
Z80_sra
Z80_srl
Z80_xor
Z80_inp
Z80_outp
Z80_srr
HD_in0
Z80_in0
HD_mlt
Z80_mlt
HD_otim
Z80_otim
HD_otimr
Z80_otimr
HD_otdm
Z80_otdm
HD_otdmr
Z80_otdmr
HD_out0
Z80_out0
HD_slp
Z80_slp
HD_tst
Z80_tst
HD_tstio
Z80_tstio
A80_lbcd
A80_lded
A80_lspd
A80_lixd
A80_liyd
A80_sbcd
A80_sded
A80_sspd
A80_sixd
A80_siyd
A80_xtix
A80_xtiy
A80_spix
A80_spiy
A80_pcix
A80_pciy
A80_mvra
A80_mvia
A80_mvar
A80_mvai
A80_addix
A80_addiy
A80_addc
A80_addcix
A80_addciy
A80_subc
A80_subcix
A80_subciy
A80_jrc
A80_jrnc
A80_jrz
A80_jrnz
A80_cmpi
A80_cmpd
A80_im0
A80_im1
A80_im2
A80_otd
A80_oti
I5_dsub
I5_arhl
I5_rdel
I5_ldhi
I5_ldsi
I5_shlx
I5_lhlx
I5_rstv
I5_jx5
I5_jnx5
Z80_cplw
Z80_swap
Z80_inw
Z80_outw
Z80_ldw
Z80_addw
Z80_subw
Z80_adcw
Z80_sbcw
Z80_andw
Z80_xorw
Z80_orw
Z80_cpw
Z80_ddir
Z80_calr
Z80_ldctl
Z80_mtest
Z80_exxx
Z80_exxy
Z80_exall
Z80_setc
Z80_resc
Z80_rlcw
Z80_rrcw
Z80_rlw
Z80_rrw
Z80_slaw
Z80_sraw
Z80_srlw
Z80_multw
Z80_multuw
Z80_divuw
Z80_outaw
Z80_inaw
Z80_outa
Z80_ina
Z80_negw
Z80_exts
Z80_extsw
Z80_btest
Z80_ldiw
Z80_ldirw
Z80_lddw
Z80_lddrw
Z80_iniw
Z80_inirw
Z80_indw
Z80_indrw
Z80_outiw
Z80_otirw
Z80_outdw
Z80_otdrw
GB_ldh
GB_stop
I5_last
I860_null
I860_adds
I860_addu
I860_and
I860_andh
I860_andnot
I860_andnoth
I860_bc
I860_bc_t
I860_bla
I860_bnc
I860_bnc_t
I860_br
I860_bri
I860_bte
I860_btne
I860_call
I860_calli
I860_fadd
I860_faddp
I860_faddz
I860_famov
I860_fiadd
I860_fisub
I860_fix
I860_fld
I860_flush
I860_fmlow_dd
I860_fmul
I860_form
I860_frcp
I860_frsqr
I860_fst
I860_fsub
I860_ftrunc
I860_fxfr
I860_fzchkl
I860_fzchks
I860_introvr
I860_ixfr
I860_ld_c
I860_ld
I860_ldint
I860_ldio
I860_lock
I860_or
I860_orh
I860_pfadd
I860_pfaddp
I860_pfaddz
I860_pfamov
I860_pfeq
I860_pfgt
I860_pfiadd
I860_pfisub
I860_pfix
I860_pfld
I860_pfle
I860_pfmul
I860_pfmul3_dd
I860_pform
I860_pfsub
I860_pftrunc
I860_pfzchkl
I860_pfzchks
I860_pst_d
I860_scyc
I860_shl
I860_shr
I860_shra
I860_shrd
I860_st_c
I860_st
I860_stio
I860_subs
I860_subu
I860_trap
I860_unlock
I860_xor
I860_xorh
I860_r2p1
I860_r2pt
I860_r2ap1
I860_r2apt
I860_i2p1
I860_i2pt
I860_i2ap1
I860_i2apt
I860_rat1p2
I860_m12apm
I860_ra1p2
I860_m12ttpa
I860_iat1p2
I860_m12tpm
I860_ia1p2
I860_m12tpa
I860_r2s1
I860_r2st
I860_r2as1
I860_r2ast
I860_i2s1
I860_i2st
I860_i2as1
I860_i2ast
I860_rat1s2
I860_m12asm
I860_ra1s2
I860_m12ttsa
I860_iat1s2
I860_m12tsm
I860_ia1s2
I860_m12tsa
I860_mr2p1
I860_mr2pt
I860_mr2mp1
I860_mr2mpt
I860_mi2p1
I860_mi2pt
I860_mi2mp1
I860_mi2mpt
I860_mrmt1p2
I860_mm12mpm
I860_mrm1p2
I860_mm12ttpm
I860_mimt1p2
I860_mm12tpm
I860_mim1p2
I860_mr2s1
I860_mr2st
I860_mr2ms1
I860_mr2mst
I860_mi2s1
I860_mi2st
I860_mi2ms1
I860_mi2mst
I860_mrmt1s2
I860_mm12msm
I860_mrm1s2
I860_mm12ttsm
I860_mimt1s2
I860_mm12tsm
I860_mim1s2
I860_last
I51_null
I51_acall
I51_add
I51_addc
I51_ajmp
I51_anl
I51_cjne
I51_clr
I51_cpl
I51_da
I51_dec
I51_div
I51_djnz
I51_inc
I51_jb
I51_jbc
I51_jc
I51_jmp
I51_jnb
I51_jnc
I51_jnz
I51_jz
I51_lcall
I51_ljmp
I51_mov
I51_movc
I51_movx
I51_mul
I51_nop
I51_orl
I51_pop
I51_push
I51_ret
I51_reti
I51_rl
I51_rlc
I51_rr
I51_rrc
I51_setb
I51_sjmp
I51_subb
I51_swap
I51_xch
I51_xchd
I51_xrl
I51_jsle
I51_jsg
I51_jle
I51_jg
I51_jsl
I51_jsge
I51_je
I51_jne
I51_trap
I51_ejmp
I51_ecall
I51_eret
I51_movh
I51_movz
I51_movs
I51_srl
I51_sra
I51_sll
I51_sub
I51_cmp
I51_last
TMS_null
TMS_abs
TMS_adcb
TMS_add
TMS_addb
TMS_addc
TMS_adds
TMS_addt
TMS_adrk
TMS_and
TMS_andb
TMS_apac
TMS_apl
TMS_apl2
TMS_b
TMS_bacc
TMS_baccd
TMS_banz
TMS_banzd
TMS_bcnd
TMS_bcndd
TMS_bd
TMS_bit
TMS_bitt
TMS_bldd
TMS_bldp
TMS_blpd
TMS_bsar
TMS_cala
TMS_calad
TMS_call
TMS_calld
TMS_cc
TMS_ccd
TMS_clrc
TMS_cmpl
TMS_cmpr
TMS_cpl
TMS_cpl2
TMS_crgt
TMS_crlt
TMS_dmov
TMS_estop
TMS_exar
TMS_idle
TMS_idle2
TMS_in
TMS_intr
TMS_lacb
TMS_lacc
TMS_lacl
TMS_lact
TMS_lamm
TMS_lar
TMS_ldp
TMS_lmmr
TMS_lph
TMS_lst
TMS_lt
TMS_lta
TMS_ltd
TMS_ltp
TMS_lts
TMS_mac
TMS_macd
TMS_madd
TMS_mads
TMS_mar
TMS_mpy
TMS_mpya
TMS_mpys
TMS_mpyu
TMS_neg
TMS_nmi
TMS_nop
TMS_norm
TMS_opl
TMS_opl2
TMS_or
TMS_orb
TMS_out
TMS_pac
TMS_pop
TMS_popd
TMS_pshd
TMS_push
TMS_ret
TMS_retc
TMS_retcd
TMS_retd
TMS_rete
TMS_reti
TMS_rol
TMS_rolb
TMS_ror
TMS_rorb
TMS_rpt
TMS_rptb
TMS_rptz
TMS_sacb
TMS_sach
TMS_sacl
TMS_samm
TMS_sar
TMS_sath
TMS_satl
TMS_sbb
TMS_sbbb
TMS_sbrk
TMS_setc
TMS_sfl
TMS_sflb
TMS_sfr
TMS_sfrb
TMS_smmr
TMS_spac
TMS_sph
TMS_spl
TMS_splk
TMS_spm
TMS_sqra
TMS_sqrs
TMS_sst
TMS_sub
TMS_subb
TMS_subc
TMS_subs
TMS_subt
TMS_tblr
TMS_tblw
TMS_trap
TMS_xc
TMS_xor
TMS_xorb
TMS_xpl
TMS_xpl2
TMS_zalr
TMS_zap
TMS_zpr
TMS2_abs
TMS2_add
TMS2_addc
TMS2_addh
TMS2_addk
TMS2_adds
TMS2_addt
TMS2_adlk
TMS2_adrk
TMS2_and
TMS2_andk
TMS2_apac
TMS2_b
TMS2_bacc
TMS2_banz
TMS2_bbnz
TMS2_bbz
TMS2_bc
TMS2_bgez
TMS2_bgz
TMS2_bioz
TMS2_bit
TMS2_bitt
TMS2_blez
TMS2_blkd
TMS2_blkp
TMS2_blz
TMS2_bnc
TMS2_bnv
TMS2_bnz
TMS2_bv
TMS2_bz
TMS2_cala
TMS2_call
TMS2_cmpl
TMS2_cmpr
TMS2_cnfd
TMS2_cnfp
TMS2_conf
TMS2_dint
TMS2_dmov
TMS2_eint
TMS2_fort
TMS2_idle
TMS2_in
TMS2_lac
TMS2_lack
TMS2_lact
TMS2_lalk
TMS2_lar
TMS2_lark
TMS2_larp
TMS2_ldp
TMS2_ldpk
TMS2_lph
TMS2_lrlk
TMS2_lst
TMS2_lst1
TMS2_lt
TMS2_lta
TMS2_ltd
TMS2_ltp
TMS2_lts
TMS2_mac
TMS2_macd
TMS2_mar
TMS2_mpy
TMS2_mpya
TMS2_mpyk
TMS2_mpys
TMS2_mpyu
TMS2_neg
TMS2_nop
TMS2_norm
TMS2_or
TMS2_ork
TMS2_out
TMS2_pac
TMS2_pop
TMS2_popd
TMS2_pshd
TMS2_push
TMS2_rc
TMS2_ret
TMS2_rfsm
TMS2_rhm
TMS2_rol
TMS2_ror
TMS2_rovm
TMS2_rpt
TMS2_rptk
TMS2_rsxm
TMS2_rtc
TMS2_rtxm
TMS2_rxf
TMS2_sach
TMS2_sacl
TMS2_sar
TMS2_sblk
TMS2_sbrk
TMS2_sc
TMS2_sfl
TMS2_sfr
TMS2_sfsm
TMS2_shm
TMS2_sovm
TMS2_spac
TMS2_sph
TMS2_spl
TMS2_spm
TMS2_sqra
TMS2_sqrs
TMS2_sst
TMS2_sst1
TMS2_ssxm
TMS2_stc
TMS2_stxm
TMS2_sub
TMS2_subb
TMS2_subc
TMS2_subh
TMS2_subk
TMS2_subs
TMS2_subt
TMS2_sxf
TMS2_tblr
TMS2_tblw
TMS2_trap
TMS2_xor
TMS2_xork
TMS2_zac
TMS2_zalh
TMS2_zalr
TMS2_zals
TMS_last
M65_null
M65_adc
M65_anc
M65_and
M65_ane
M65_arr
M65_asl
M65_asr
M65_bcc
M65_bcs
M65_beq
M65_bit
M65_bmi
M65_bne
M65_bpl
M65_brk
M65_bvc
M65_bvs
M65_clc
M65_cld
M65_cli
M65_clv
M65_cmp
M65_cpx
M65_cpy
M65_dcp
M65_dec
M65_dex
M65_dey
M65_eor
M65_inc
M65_inx
M65_iny
M65_isb
M65_jmp
M65_jmpi
M65_jsr
M65_lae
M65_lax
M65_lda
M65_ldx
M65_ldy
M65_lsr
M65_lxa
M65_nop
M65_ora
M65_pha
M65_php
M65_pla
M65_plp
M65_rla
M65_rol
M65_ror
M65_rra
M65_rti
M65_rts
M65_sax
M65_sbc
M65_sbx
M65_sec
M65_sed
M65_sei
M65_sha
M65_shs
M65_shx
M65_shy
M65_slo
M65_sre
M65_sta
M65_stx
M65_sty
M65_tax
M65_tay
M65_tsx
M65_txa
M65_txs
M65_tya
M65_bbr0
M65_bbr1
M65_bbr2
M65_bbr3
M65_bbr4
M65_bbr5
M65_bbr6
M65_bbr7
M65_bbs0
M65_bbs1
M65_bbs2
M65_bbs3
M65_bbs4
M65_bbs5
M65_bbs6
M65_bbs7
M65_rmb0
M65_rmb1
M65_rmb2
M65_rmb3
M65_rmb4
M65_rmb5
M65_rmb6
M65_rmb7
M65_smb0
M65_smb1
M65_smb2
M65_smb3
M65_smb4
M65_smb5
M65_smb6
M65_smb7
M65_stz
M65_tsb
M65_trb
M65_phy
M65_ply
M65_phx
M65_plx
M65_bra
M65_last
M65816_null
M65816_adc
M65816_and
M65816_asl
M65816_bcc
M65816_bcs
M65816_beq
M65816_bit
M65816_bmi
M65816_bne
M65816_bpl
M65816_bra
M65816_brk
M65816_brl
M65816_bvc
M65816_bvs
M65816_clc
M65816_cld
M65816_cli
M65816_clv
M65816_cmp
M65816_cop
M65816_cpx
M65816_cpy
M65816_dec
M65816_dex
M65816_dey
M65816_eor
M65816_inc
M65816_inx
M65816_iny
M65816_jml
M65816_jmp
M65816_jsl
M65816_jsr
M65816_lda
M65816_ldx
M65816_ldy
M65816_lsr
M65816_mvn
M65816_mvp
M65816_nop
M65816_ora
M65816_pea
M65816_pei
M65816_per
M65816_pha
M65816_phb
M65816_phd
M65816_phk
M65816_php
M65816_phx
M65816_phy
M65816_pla
M65816_plb
M65816_pld
M65816_plp
M65816_plx
M65816_ply
M65816_rep
M65816_rol
M65816_ror
M65816_rti
M65816_rtl
M65816_rts
M65816_sbc
M65816_sec
M65816_sed
M65816_sei
M65816_sep
M65816_sta
M65816_stp
M65816_stx
M65816_sty
M65816_stz
M65816_tax
M65816_tay
M65816_tcd
M65816_tcs
M65816_tdc
M65816_trb
M65816_tsb
M65816_tsc
M65816_tsx
M65816_txa
M65816_txs
M65816_txy
M65816_tya
M65816_tyx
M65816_wai
M65816_wdm
M65816_xba
M65816_xce
M65816_last
pdp_null
pdp_halt
pdp_wait
pdp_rti
pdp_bpt
pdp_iot
pdp_reset
pdp_rtt
pdp_mfpt
pdp_jmp
pdp_rts
pdp_spl
pdp_nop
pdp_clc
pdp_clv
pdp_clz
pdp_cln
pdp_ccc
pdp_sec
pdp_sev
pdp_sez
pdp_sen
pdp_scc
pdp_swab
pdp_br
pdp_bne
pdp_beq
pdp_bge
pdp_blt
pdp_bgt
pdp_ble
pdp_jsr
pdp_clr
pdp_com
pdp_inc
pdp_dec
pdp_neg
pdp_adc
pdp_sbc
pdp_tst
pdp_ror
pdp_rol
pdp_asr
pdp_asl
pdp_mark
pdp_mfpi
pdp_mtpi
pdp_sxt
pdp_mov
pdp_cmp
pdp_bit
pdp_bic
pdp_bis
pdp_add
pdp_sub
pdp_mul
pdp_div
pdp_ash
pdp_ashc
pdp_xor
pdp_fadd
pdp_fsub
pdp_fmul
pdp_fdiv
pdp_sob
pdp_bpl
pdp_bmi
pdp_bhi
pdp_blos
pdp_bvc
pdp_bvs
pdp_bcc
pdp_bcs
pdp_emt
pdp_trap
pdp_mtps
pdp_mfpd
pdp_mtpd
pdp_mfps
pdp_cfcc
pdp_setf
pdp_seti
pdp_setd
pdp_setl
pdp_ldfps
pdp_stfps
pdp_stst
pdp_clrd
pdp_tstd
pdp_absd
pdp_negd
pdp_muld
pdp_modd
pdp_addd
pdp_ldd
pdp_subd
pdp_cmpd
pdp_std
pdp_divd
pdp_stexp
pdp_stcdi
pdp_stcdf
pdp_ldexp
pdp_ldcif
pdp_ldcfd
pdp_call
pdp_return
pdp_compcc
pdp_last
mc_null
mc_abcd
mc_add
mc_adda
mc_addi
mc_addq
mc_addx
mc_and
mc_andi
mc_asl
mc_asr
mc_b
mc_bchg
mc_bclr
mc_bftst
mc_bfchg
mc_bfclr
mc_bfset
mc_bfextu
mc_bfexts
mc_bfffo
mc_bfins
mc_bgnd
mc_bkpt
mc_bra
mc_bset
mc_bsr
mc_btst
mc_callm
mc_cas
mc_cas2
mc_chk
mc_chk2
mc_cinv
mc_clr
mc_cmp
mc_cmp2
mc_cmpa
mc_cmpi
mc_cmpm
mc_cpush
mc_db
mc_divs
mc_divsl
mc_divu
mc_divul
mc_eor
mc_eori
mc_exg
mc_ext
mc_extb
mc_fabs
mc_facos
mc_fadd
mc_fasin
mc_fatan
mc_fatanh
mc_fb
mc_fcmp
mc_fcos
mc_fcosh
mc_fdabs
mc_fdadd
mc_fdb
mc_fddiv
mc_fdiv
mc_fdmove
mc_fdmul
mc_fdneg
mc_fdsqrt
mc_fdsub
mc_fetox
mc_fetoxm1
mc_fgetexp
mc_fgetman
mc_fint
mc_fintrz
mc_flog2
mc_flog10
mc_flogn
mc_flognp1
mc_fmod
mc_fmove
mc_fmovecr
mc_fmovem
mc_fmul
mc_fneg
mc_fnop
mc_frem
mc_frestore
mc_fs
mc_fsabs
mc_fsadd
mc_fsave
mc_fscale
mc_fsdiv
mc_fsgldiv
mc_fsglmul
mc_fsin
mc_fsincos
mc_fsinh
mc_fsmove
mc_fsmul
mc_fsneg
mc_fsqrt
mc_fssqrt
mc_fssub
mc_fsub
mc_ftan
mc_ftanh
mc_ftentox
mc_ftrap
mc_ftst
mc_ftwotox
mc_halt
mc_illegal
mc_jmp
mc_jsr
mc_lea
mc_link
mc_lpstop
mc_lsl
mc_lsr
mc_mac
mc_macl
mc_move
mc_move16
mc_movea
mc_movec
mc_movem
mc_movep
mc_moveq
mc_moves
mc_msac
mc_msacl
mc_muls
mc_mulu
mc_nbcd
mc_neg
mc_negx
mc_nop
mc_not
mc_or
mc_ori
mc_pack
mc_pea
mc_pb
mc_pdb
mc_pflush
mc_pflushr
mc_ploadr
mc_ploadw
mc_pmove
mc_prestore
mc_psave
mc_ps
mc_ptestr
mc_ptestw
mc_ptrap
mc_pulse
mc_pvalid
mc_rol
mc_ror
mc_roxl
mc_roxr
mc_reset
mc_rtd
mc_rte
mc_rtm
mc_rtr
mc_rts
mc_sbcd
mc_s
mc_stop
mc_sub
mc_suba
mc_subi
mc_subq
mc_subx
mc_swap
mc_tas
mc_tbl
mc_trap
mc_trapv
mc_tst
mc_unlk
mc_unpk
mc_wddata
mc_wdebug
mc_atrap
mc_last
mc8_null
mc8_aba
mc8_ab
mc8_adc
mc8_add
mc8_addd
mc8_ais
mc8_aix
mc8_and
mc8_andcc
mc8_asr
mc8_bcc
mc8_bclr
mc8_bcs
mc8_beq
mc8_bge
mc8_bgt
mc8_bhcc
mc8_bhcs
mc8_bhi
mc8_bhs
mc8_bih
mc8_bil
mc8_bit
mc8_ble
mc8_blo
mc8_bls
mc8_blt
mc8_bmc
mc8_bmi
mc8_bms
mc8_bne
mc8_bpl
mc8_bra
mc8_brclr
mc8_brn
mc8_brset
mc8_bset
mc8_bsr
mc8_bvc
mc8_bvs
mc8_cba
mc8_cbeq
mc8_clc
mc8_cli
mc8_clr
mc8_clv
mc8_cmp
mc8_com
mc8_cp
mc8_cpd
mc8_cphx
mc8_cpx
mc8_cwai
mc8_daa
mc8_dbnz
mc8_de
mc8_dec
mc8_des
mc8_div
mc8_eor
mc8_exg
mc8_fdiv
mc8_idiv
mc8_in
mc8_inc
mc8_ins
mc8_jmp
mc8_jsr
mc8_ld
mc8_lda
mc8_ldd
mc8_ldhx
mc8_lds
mc8_ldx
mc8_lea
mc8_lsl
mc8_lsld
mc8_lsr
mc8_lsrd
mc8_mov
mc8_mul
mc8_neg
mc8_nop
mc8_nsa
mc8_ora
mc8_orcc
mc8_psh
mc8_psha
mc8_pshb
mc8_pshh
mc8_pshx
mc8_pul
mc8_pula
mc8_pulb
mc8_pulh
mc8_pulx
mc8_rol
mc8_ror
mc8_rsp
mc8_rti
mc8_rts
mc8_sba
mc8_sbc
mc8_sec
mc8_sei
mc8_sev
mc8_sex
mc8_slp
mc8_st
mc8_sta
mc8_std
mc8_sthx
mc8_stop
mc8_sts
mc8_stx
mc8_sub
mc8_subd
mc8_swi
mc8_sync
mc8_tab
mc8_tap
mc8_tax
mc8_tba
mc8_test
mc8_tfr
mc8_tpa
mc8_ts
mc8_tst
mc8_tsx
mc8_txa
mc8_txs
mc8_tys
mc8_wai
mc8_wait
mc8_xgd
mc8_1
mc8_2
mc8_os9
mc8_aim
mc8_oim
mc8_eim
mc8_tim
mc8_bgnd
mc8_call
mc8_rtc
mc8_last
j_nop
j_aconst_null
j_iconst_m1
j_iconst_0
j_iconst_1
j_iconst_2
j_iconst_3
j_iconst_4
j_iconst_5
j_lconst_0
j_lconst_1
j_fconst_0
j_fconst_1
j_fconst_2
j_dconst_0
j_dconst_1
j_bipush
j_sipush
j_ldc
j_ldcw
j_ldc2w
j_iload
j_lload
j_fload
j_dload
j_aload
j_iload_0
j_iload_1
j_iload_2
j_iload_3
j_lload_0
j_lload_1
j_lload_2
j_lload_3
j_fload_0
j_fload_1
j_fload_2
j_fload_3
j_dload_0
j_dload_1
j_dload_2
j_dload_3
j_aload_0
j_aload_1
j_aload_2
j_aload_3
j_iaload
j_laload
j_faload
j_daload
j_aaload
j_baload
j_caload
j_saload
j_istore
j_lstore
j_fstore
j_dstore
j_astore
j_istore_0
j_istore_1
j_istore_2
j_istore_3
j_lstore_0
j_lstore_1
j_lstore_2
j_lstore_3
j_fstore_0
j_fstore_1
j_fstore_2
j_fstore_3
j_dstore_0
j_dstore_1
j_dstore_2
j_dstore_3
j_astore_0
j_astore_1
j_astore_2
j_astore_3
j_iastore
j_lastore
j_fastore
j_dastore
j_aastore
j_bastore
j_castore
j_sastore
j_pop
j_pop2
j_dup
j_dup_x1
j_dup_x2
j_dup2
j_dup2_x1
j_dup2_x2
j_swap
j_iadd
j_ladd
j_fadd
j_dadd
j_isub
j_lsub
j_fsub
j_dsub
j_imul
j_lmul
j_fmul
j_dmul
j_idiv
j_ldiv
j_fdiv
j_ddiv
j_irem
j_lrem
j_frem
j_drem
j_ineg
j_lneg
j_fneg
j_dneg
j_ishl
j_lshl
j_ishr
j_lshr
j_iushr
j_lushr
j_iand
j_land
j_ior
j_lor
j_ixor
j_lxor
j_iinc
j_i2l
j_i2f
j_i2d
j_l2i
j_l2f
j_l2d
j_f2i
j_f2l
j_f2d
j_d2i
j_d2l
j_d2f
j_i2b
j_i2c
j_i2s
j_lcmp
j_fcmpl
j_fcmpg
j_dcmpl
j_dcmpg
j_ifeq
j_ifne
j_iflt
j_ifge
j_ifgt
j_ifle
j_if_icmpeq
j_if_icmpne
j_if_icmplt
j_if_icmpge
j_if_icmpgt
j_if_icmple
j_if_acmpeq
j_if_acmpne
j_goto
j_jsr
j_ret
j_tableswitch
j_lookupswitch
j_ireturn
j_lreturn
j_freturn
j_dreturn
j_areturn
j_return
j_getstatic
j_putstatic
j_getfield
j_putfield
j_invokevirtual
j_invokespecial
j_invokestatic
j_invokeinterface
j_invokedynamic
j_new
j_newarray
j_anewarray
j_arraylength
j_athrow
j_checkcast
j_instanceof
j_monitorenter
j_monitorexit
j_wide
j_multianewarray
j_ifnull
j_ifnonnull
j_goto_w
j_jsr_w
j_breakpoint
j_lastnorm
j_a_invokesuper
j_a_invokevirtualobject
j_a_invokeignored
j_a_software
j_a_hardware
j_last
ARM_null
ARM_ret
ARM_nop
ARM_b
ARM_bl
ARM_asr
ARM_lsl
ARM_lsr
ARM_ror
ARM_neg
ARM_and
ARM_eor
ARM_sub
ARM_rsb
ARM_add
ARM_adc
ARM_sbc
ARM_rsc
ARM_tst
ARM_teq
ARM_cmp
ARM_cmn
ARM_orr
ARM_mov
ARM_bic
ARM_mvn
ARM_mrs
ARM_msr
ARM_mul
ARM_mla
ARM_ldr
ARM_ldrpc
ARM_str
ARM_ldm
ARM_stm
ARM_swp
ARM_svc
ARM_smull
ARM_smlal
ARM_umull
ARM_umlal
ARM_bx
ARM_pop
ARM_push
ARM_adr
ARM_bkpt
ARM_blx1
ARM_blx2
ARM_clz
ARM_ldrd
ARM_pld
ARM_qadd
ARM_qdadd
ARM_qdsub
ARM_qsub
ARM_smlabb
ARM_smlatb
ARM_smlabt
ARM_smlatt
ARM_smlalbb
ARM_smlaltb
ARM_smlalbt
ARM_smlaltt
ARM_smlawb
ARM_smulwb
ARM_smlawt
ARM_smulwt
ARM_smulbb
ARM_smultb
ARM_smulbt
ARM_smultt
ARM_strd
xScale_mia
xScale_miaph
xScale_miabb
xScale_miabt
xScale_miatb
xScale_miatt
xScale_mar
xScale_mra
ARM_movl
ARM_adrl
ARM_swbkpt
ARM_cdp
ARM_cdp2
ARM_ldc
ARM_ldc2
ARM_stc
ARM_stc2
ARM_mrc
ARM_mrc2
ARM_mcr
ARM_mcr2
ARM_mcrr
ARM_mrrc
ARM_fabsd
ARM_fabss
ARM_faddd
ARM_fadds
ARM_fcmpd
ARM_fcmps
ARM_fcmped
ARM_fcmpes
ARM_fcmpezd
ARM_fcmpezs
ARM_fcmpzd
ARM_fcmpzs
ARM_fcpyd
ARM_fcpys
ARM_fcvtsd
ARM_fcvtds
ARM_fdivd
ARM_fdivs
ARM_fldd
ARM_flds
ARM_fldmd
ARM_fldms
ARM_fldmx
ARM_fmacd
ARM_fmacs
ARM_fmscd
ARM_fmscs
ARM_fmstat
ARM_fmuld
ARM_fmuls
ARM_fnegd
ARM_fnegs
ARM_fnmacd
ARM_fnmacs
ARM_fnmscd
ARM_fnmscs
ARM_fnmuld
ARM_fnmuls
ARM_fsitod
ARM_fsitos
ARM_fsqrtd
ARM_fsqrts
ARM_fstd
ARM_fsts
ARM_fstmd
ARM_fstms
ARM_fstmx
ARM_fsubd
ARM_fsubs
ARM_ftosid
ARM_ftosis
ARM_ftosizd
ARM_ftosizs
ARM_ftouid
ARM_ftouis
ARM_ftouizd
ARM_ftouizs
ARM_fuitod
ARM_fuitos
ARM_fmdhr
ARM_fmrdh
ARM_fmdlr
ARM_fmrdl
ARM_fmxr
ARM_fmrx
ARM_fmsr
ARM_fmrs
ARM_fmdrr
ARM_fmrrd
ARM_fmsrr
ARM_fmrrs
ARM_bxj
ARM_mcrr2
ARM_mrrc2
ARM_cps
ARM_cpsid
ARM_cpsie
ARM_ldrex
ARM_pkhbt
ARM_pkhtb
ARM_qadd16
ARM_qadd8
ARM_qaddsubx
ARM_qsub16
ARM_qsub8
ARM_qsubaddx
ARM_rev
ARM_rev16
ARM_revsh
ARM_rfe
ARM_sadd16
ARM_sadd8
ARM_saddsubx
ARM_sel
ARM_setend
ARM_shadd16
ARM_shadd8
ARM_shaddsubx
ARM_shsub16
ARM_shsub8
ARM_shsubaddx
ARM_smlad
ARM_smladx
ARM_smuad
ARM_smuadx
ARM_smlald
ARM_smlaldx
ARM_smlsd
ARM_smlsdx
ARM_smusd
ARM_smusdx
ARM_smlsld
ARM_smlsldx
ARM_smmla
ARM_smmlar
ARM_smmul
ARM_smmulr
ARM_smmls
ARM_smmlsr
ARM_srs
ARM_ssat
ARM_ssat16
ARM_ssub16
ARM_ssub8
ARM_ssubaddx
ARM_strex
ARM_sxtab
ARM_sxtb
ARM_sxtab16
ARM_sxtb16
ARM_sxtah
ARM_sxth
ARM_uadd16
ARM_uadd8
ARM_uaddsubx
ARM_uhadd16
ARM_uhadd8
ARM_uhaddsubx
ARM_uhsub16
ARM_uhsub8
ARM_uhsubaddx
ARM_umaal
ARM_uqadd16
ARM_uqadd8
ARM_uqaddsubx
ARM_uqsub16
ARM_uqsub8
ARM_uqsubaddx
ARM_usada8
ARM_usad8
ARM_usat
ARM_usat16
ARM_usub16
ARM_usub8
ARM_usubaddx
ARM_uxtab
ARM_uxtb
ARM_uxtab16
ARM_uxtb16
ARM_uxtah
ARM_uxth
ARM_clrex
ARM_ldrexb
ARM_ldrexd
ARM_ldrexh
ARM_strexb
ARM_strexd
ARM_strexh
ARM_yield
ARM_sev
ARM_wfe
ARM_wfi
ARM_smc
ARM_orn
ARM_movt
ARM_sbfx
ARM_ubfx
ARM_bfi
ARM_bfc
ARM_tbb
ARM_tbh
ARM_pli
ARM_rbit
ARM_it
ARM_mls
ARM_sdiv
ARM_udiv
ARM_cbz
ARM_cbnz
ARM_dsb
ARM_dmb
ARM_isb
ARM_dbg
ARM_und
ARM_rrx
ARM_enterx
ARM_leavex
ARM_chka
ARM_hb
ARM_hbl
ARM_hblp
ARM_hbp
ARM_vaba
ARM_vabal
ARM_vabd
ARM_vabdl
ARM_vabs
ARM_vacge
ARM_vacgt
ARM_vacle
ARM_vaclt
ARM_vadd
ARM_vaddhn
ARM_vaddl
ARM_vaddw
ARM_vand
ARM_vbic
ARM_vbif
ARM_vbit
ARM_vbsl
ARM_vceq
ARM_vcge
ARM_vcgt
ARM_vcle
ARM_vcls
ARM_vclt
ARM_vclz
ARM_vcmp
ARM_vcmpe
ARM_vcnt
ARM_vcvt
ARM_vcvtr
ARM_vcvtb
ARM_vcvtt
ARM_vdiv
ARM_vdup
ARM_veor
ARM_vext
ARM_vfma
ARM_vfms
ARM_vfnma
ARM_vfnms
ARM_vhadd
ARM_vhsub
ARM_vld1
ARM_vld2
ARM_vld3
ARM_vld4
ARM_vldm
ARM_vldr
ARM_vmax
ARM_vmin
ARM_vmla
ARM_vmlal
ARM_vmls
ARM_vmlsl
ARM_vmov
ARM_vmovl
ARM_vmovn
ARM_vmrs
ARM_vmsr
ARM_vmul
ARM_vmull
ARM_vmvn
ARM_vneg
ARM_vnmla
ARM_vnmls
ARM_vnmul
ARM_vorn
ARM_vorr
ARM_vpadal
ARM_vpadd
ARM_vpaddl
ARM_vpmax
ARM_vpmin
ARM_vpop
ARM_vpush
ARM_vqabs
ARM_vqadd
ARM_vqdmlal
ARM_vqdmlsl
ARM_vqdmulh
ARM_vqdmull
ARM_vqmovn
ARM_vqmovun
ARM_vqneg
ARM_vqrdmulh
ARM_vqrshl
ARM_vqrshrn
ARM_vqrshrun
ARM_vqshl
ARM_vqshlu
ARM_vqshrn
ARM_vqshrun
ARM_vqsub
ARM_vraddhn
ARM_vrecpe
ARM_vrecps
ARM_vrev16
ARM_vrev32
ARM_vrev64
ARM_vrhadd
ARM_vrshl
ARM_vrshr
ARM_vrshrn
ARM_vrsqrte
ARM_vrsqrts
ARM_vrsra
ARM_vrsubhn
ARM_vshl
ARM_vshll
ARM_vshr
ARM_vshrn
ARM_vsli
ARM_vsqrt
ARM_vsra
ARM_vsri
ARM_vst1
ARM_vst2
ARM_vst3
ARM_vst4
ARM_vstm
ARM_vstr
ARM_vsub
ARM_vsubhn
ARM_vsubl
ARM_vsubw
ARM_vswp
ARM_vtbl
ARM_vtbx
ARM_vtrn
ARM_vtst
ARM_vuzp
ARM_vzip
ARM_last
TMS6_null
TMS6_abs
TMS6_add
TMS6_addu
TMS6_addab
TMS6_addah
TMS6_addaw
TMS6_addk
TMS6_add2
TMS6_and
TMS6_b
TMS6_clr
TMS6_cmpeq
TMS6_cmpgt
TMS6_cmpgtu
TMS6_cmplt
TMS6_cmpltu
TMS6_ext
TMS6_extu
TMS6_idle
TMS6_ldb
TMS6_ldbu
TMS6_ldh
TMS6_ldhu
TMS6_ldw
TMS6_lmbd
TMS6_mpy
TMS6_mpyu
TMS6_mpyus
TMS6_mpysu
TMS6_mpyh
TMS6_mpyhu
TMS6_mpyhus
TMS6_mpyhsu
TMS6_mpyhl
TMS6_mpyhlu
TMS6_mpyhuls
TMS6_mpyhslu
TMS6_mpylh
TMS6_mpylhu
TMS6_mpyluhs
TMS6_mpylshu
TMS6_mv
TMS6_mvc
TMS6_mvk
TMS6_mvkh
TMS6_mvklh
TMS6_neg
TMS6_nop
TMS6_norm
TMS6_not
TMS6_or
TMS6_sadd
TMS6_sat
TMS6_set
TMS6_shl
TMS6_shr
TMS6_shru
TMS6_smpy
TMS6_smpyhl
TMS6_smpylh
TMS6_smpyh
TMS6_sshl
TMS6_ssub
TMS6_stb
TMS6_stbu
TMS6_sth
TMS6_sthu
TMS6_stw
TMS6_sub
TMS6_subu
TMS6_subab
TMS6_subah
TMS6_subaw
TMS6_subc
TMS6_sub2
TMS6_xor
TMS6_zero
TMS6_abs2
TMS6_absdp
TMS6_abssp
TMS6_add4
TMS6_addad
TMS6_adddp
TMS6_addkpc
TMS6_addsp
TMS6_addsub
TMS6_addsub2
TMS6_andn
TMS6_avg2
TMS6_avgu4
TMS6_bdec
TMS6_bitc4
TMS6_bitr
TMS6_bnop
TMS6_bpos
TMS6_callp
TMS6_cmpeq2
TMS6_cmpeq4
TMS6_cmpeqdp
TMS6_cmpeqsp
TMS6_cmpgt2
TMS6_cmpgtdp
TMS6_cmpgtsp
TMS6_cmpgtu4
TMS6_cmplt2
TMS6_cmpltdp
TMS6_cmpltsp
TMS6_cmpltu4
TMS6_cmpy
TMS6_cmpyr
TMS6_cmpyr1
TMS6_ddotp4
TMS6_ddotph2
TMS6_ddotph2r
TMS6_ddotpl2
TMS6_ddotpl2r
TMS6_deal
TMS6_dint
TMS6_dmv
TMS6_dotp2
TMS6_dotpn2
TMS6_dotpnrsu2
TMS6_dotpnrus2
TMS6_dotprsu2
TMS6_dotprus2
TMS6_dotpsu4
TMS6_dotpu4
TMS6_dotpus4
TMS6_dpack2
TMS6_dpackx2
TMS6_dpint
TMS6_dpsp
TMS6_dptrunc
TMS6_gmpy
TMS6_gmpy4
TMS6_intdp
TMS6_intdpu
TMS6_intsp
TMS6_intspu
TMS6_lddw
TMS6_ldndw
TMS6_ldnw
TMS6_max2
TMS6_maxu4
TMS6_min2
TMS6_minu4
TMS6_mpy2
TMS6_mpy2ir
TMS6_mpy32
TMS6_mpy32su
TMS6_mpy32u
TMS6_mpy32us
TMS6_mpydp
TMS6_mpyhi
TMS6_mpyhir
TMS6_mpyi
TMS6_mpyid
TMS6_mpyih
TMS6_mpyihr
TMS6_mpyil
TMS6_mpyilr
TMS6_mpyli
TMS6_mpylir
TMS6_mpysp
TMS6_mpysp2dp
TMS6_mpyspdp
TMS6_mpysu4
TMS6_mpyu4
TMS6_mpyus4
TMS6_mvd
TMS6_mvkl
TMS6_pack2
TMS6_packh2
TMS6_packh4
TMS6_packhl2
TMS6_packl4
TMS6_packlh2
TMS6_rcpdp
TMS6_rcpsp
TMS6_rint
TMS6_rotl
TMS6_rpack2
TMS6_rsqrdp
TMS6_rsqrsp
TMS6_sadd2
TMS6_saddsu2
TMS6_saddsub
TMS6_saddsub2
TMS6_saddu4
TMS6_saddus2
TMS6_shfl
TMS6_shfl3
TMS6_shlmb
TMS6_shr2
TMS6_shrmb
TMS6_shru2
TMS6_smpy2
TMS6_smpy32
TMS6_spack2
TMS6_spacku4
TMS6_spdp
TMS6_spint
TMS6_spkernel
TMS6_spkernelr
TMS6_sploop
TMS6_sploopd
TMS6_sploopw
TMS6_spmask
TMS6_spmaskr
TMS6_sptrunc
TMS6_sshvl
TMS6_sshvr
TMS6_ssub2
TMS6_stdw
TMS6_stndw
TMS6_stnw
TMS6_sub4
TMS6_subabs4
TMS6_subdp
TMS6_subsp
TMS6_swap2
TMS6_swap4
TMS6_swe
TMS6_swenr
TMS6_unpkhu4
TMS6_unpklu4
TMS6_xormpy
TMS6_xpnd2
TMS6_xpnd4
TMS6_last
I196_null
I196_add2
I196_add3
I196_addb2
I196_addb3
I196_addc
I196_addcb
I196_and2
I196_and3
I196_andb2
I196_andb3
I196_bmov
I196_bmovi
I196_br
I196_clr
I196_clrb
I196_clrc
I196_clrvt
I196_cmp
I196_cmpb
I196_cmpl
I196_dec
I196_decb
I196_di
I196_div
I196_divb
I196_divu
I196_divub
I196_djnz
I196_djnzw
I196_dpts
I196_ei
I196_epts
I196_ext
I196_extb
I196_idlpd
I196_inc
I196_incb
I196_jbc
I196_jbs
I196_jc
I196_je
I196_jge
I196_jgt
I196_jh
I196_jle
I196_jlt
I196_jnc
I196_jne
I196_jnh
I196_jnst
I196_jnv
I196_jnvt
I196_jst
I196_jv
I196_jvt
I196_lcall
I196_ld
I196_ldb
I196_ldbse
I196_ldbze
I196_ljmp
I196_mul2
I196_mul3
I196_mulb2
I196_mulb3
I196_mulu2
I196_mulu3
I196_mulub2
I196_mulub3
I196_neg
I196_negb
I196_nop
I196_norml
I196_not
I196_notb
I196_or
I196_orb
I196_pop
I196_popa
I196_popf
I196_push
I196_pusha
I196_pushf
I196_ret
I196_rst
I196_scall
I196_setc
I196_shl
I196_shlb
I196_shll
I196_shr
I196_shra
I196_shrab
I196_shral
I196_shrb
I196_shrl
I196_sjmp
I196_skip
I196_st
I196_stb
I196_sub2
I196_sub3
I196_subb2
I196_subb3
I196_subc
I196_subcb
I196_tijmp
I196_trap
I196_xch
I196_xchb
I196_xor
I196_xorb
I196_ebmovi
I196_ebr
I196_ecall
I196_ejmp
I196_eld
I196_eldb
I196_est
I196_estb
I196_last
SH3_null
SH3_add
SH3_addc
SH3_addv
SH3_and
SH3_and_b
SH3_bf
SH3_bf_s
SH3_bra
SH3_braf
SH3_bsr
SH3_bsrf
SH3_bt
SH3_bt_s
SH3_clrmac
SH3_clrs
SH3_clrt
SH3_cmp_eq
SH3_cmp_ge
SH3_cmp_gt
SH3_cmp_hi
SH3_cmp_hs
SH3_cmp_pl
SH3_cmp_pz
SH3_cmp_str
SH3_div0s
SH3_div0u
SH3_div1
SH3_dmuls_l
SH3_dmulu_l
SH3_dt
SH3_exts_b
SH3_exts_w
SH3_extu_b
SH3_extu_w
SH3_jmp
SH3_jsr
SH3_ldc
SH3_ldc_l
SH3_lds
SH3_lds_l
SH3_ldtlb
SH3_mac_w
SH3_mac_l
SH3_mov
SH3_mov_b
SH3_mov_w
SH3_mov_l
SH3_movi
SH3_movi_w
SH3_movi_l
SH3_movp_b
SH3_movp_w
SH3_movp_l
SH3_movs_b
SH3_movs_w
SH3_movs_l
SH3_mova
SH3_movt
SH3_mul
SH3_muls
SH3_mulu
SH3_neg
SH3_negc
SH3_nop
SH3_not
SH3_or
SH3_or_b
SH3_pref
SH3_rotcl
SH3_rotcr
SH3_rotl
SH3_rotr
SH3_rte
SH3_rts
SH3_sets
SH3_sett
SH3_shad
SH3_shal
SH3_shar
SH3_shld
SH3_shll
SH3_shll2
SH3_shll8
SH3_shll16
SH3_shlr
SH3_shlr2
SH3_shlr8
SH3_shlr16
SH3_sleep
SH3_stc
SH3_stc_l
SH3_sts
SH3_sts_l
SH3_sub
SH3_subc
SH3_subv
SH3_swap_b
SH3_swap_w
SH3_tas_b
SH3_trapa
SH3_tst
SH3_tst_b
SH3_xor
SH3_xor_b
SH3_xtrct
SH4_fabs
SH4_fadd
SH4_fcmp_eq
SH4_fcmp_gt
SH4_fcnvds
SH4_fcnvsd
SH4_fdiv
SH4_fipr
SH4_fldi0
SH4_fldi1
SH4_flds
SH4_float
SH4_fmac
SH4_fmov
SH4_fmov_s
SH4_fmovex
SH4_fmul
SH4_fneg
SH4_frchg
SH4_fschg
SH4_fsqrt
SH4_fsts
SH4_fsub
SH4_ftrc
SH4_ftrv
SH4_ftstn
SH4_movca_l
SH4_ocbi
SH4_ocbp
SH4_ocbwb
SH4_fsca
SH2a_band_b
SH2a_bandnot_b
SH2a_bclr
SH2a_bclr_b
SH2a_bld
SH2a_bld_b
SH2a_bldnot_b
SH2a_bor_b
SH2a_bornot_b
SH2a_bset
SH2a_bset_b
SH2a_bst
SH2a_bst_b
SH2a_bxor_b
SH2a_clips_b
SH2a_clips_w
SH2a_clipu_b
SH2a_clipu_w
SH2a_divs
SH2a_divu
SH2a_jsr_n
SH2a_ldbank
SH2a_movi20
SH2a_movi20s
SH2a_movml_l
SH2a_movmu_l
SH2a_movrt
SH2a_movu_b
SH2a_movu_w
SH2a_mulr
SH2a_nott
SH2a_resbank
SH2a_rts_n
SH2a_rtv_n
SH2a_stbank
SH4a_movco_l
SH4a_movli_l
SH4a_movua_l
SH4a_icbi
SH4a_prefi
SH4a_synco
SH4a_fsrra
SH4a_fpchg
SH4_last
Z8_null
Z8_adc
Z8_add
Z8_and
Z8_call
Z8_ccf
Z8_clr
Z8_com
Z8_cp
Z8_da
Z8_dec
Z8_decw
Z8_di
Z8_djnz
Z8_ei
Z8_halt
Z8_inc
Z8_incw
Z8_iret
Z8_jp
Z8_jpcond
Z8_jr
Z8_jrcond
Z8_ld
Z8_ldc
Z8_ldci
Z8_lde
Z8_ldei
Z8_nop
Z8_or
Z8_pop
Z8_push
Z8_rcf
Z8_ret
Z8_rl
Z8_rlc
Z8_rr
Z8_rrc
Z8_sbc
Z8_scf
Z8_sra
Z8_srp
Z8_stop
Z8_sub
Z8_swap
Z8_tm
Z8_tcm
Z8_xor
Z8_wdh
Z8_wdt
Z8_last
AVR_null
AVR_add
AVR_adc
AVR_adiw
AVR_sub
AVR_subi
AVR_sbc
AVR_sbci
AVR_sbiw
AVR_and
AVR_andi
AVR_or
AVR_ori
AVR_eor
AVR_com
AVR_neg
AVR_sbr
AVR_cbr
AVR_inc
AVR_dec
AVR_tst
AVR_clr
AVR_ser
AVR_cp
AVR_cpc
AVR_cpi
AVR_mul
AVR_rjmp
AVR_ijmp
AVR_jmp
AVR_rcall
AVR_icall
AVR_call
AVR_ret
AVR_reti
AVR_cpse
AVR_sbrc
AVR_sbrs
AVR_sbic
AVR_sbis
AVR_brbs
AVR_brbc
AVR_breq
AVR_brne
AVR_brcs
AVR_brcc
AVR_brsh
AVR_brlo
AVR_brmi
AVR_brpl
AVR_brge
AVR_brlt
AVR_brhs
AVR_brhc
AVR_brts
AVR_brtc
AVR_brvs
AVR_brvc
AVR_brie
AVR_brid
AVR_mov
AVR_ldi
AVR_lds
AVR_ld
AVR_ldd
AVR_sts
AVR_st
AVR_std
AVR_lpm
AVR_in
AVR_out
AVR_push
AVR_pop
AVR_lsl
AVR_lsr
AVR_rol
AVR_ror
AVR_asr
AVR_swap
AVR_bset
AVR_bclr
AVR_sbi
AVR_cbi
AVR_bst
AVR_bld
AVR_sec
AVR_clc
AVR_sen
AVR_cln
AVR_sez
AVR_clz
AVR_sei
AVR_cli
AVR_ses
AVR_cls
AVR_sev
AVR_clv
AVR_set
AVR_clt
AVR_seh
AVR_clh
AVR_nop
AVR_sleep
AVR_wdr
AVR_elpm
AVR_espm
AVR_fmul
AVR_fmuls
AVR_fmulsu
AVR_movw
AVR_muls
AVR_mulsu
AVR_spm
AVR_eicall
AVR_eijmp
AVR_des
AVR_lac
AVR_las
AVR_lat
AVR_xch
AVR_last
MIPS_null
MIPS_add
MIPS_addu
MIPS_and
MIPS_dadd
MIPS_daddu
MIPS_dsub
MIPS_dsubu
MIPS_nor
MIPS_or
MIPS_slt
MIPS_sltu
MIPS_sub
MIPS_subu
MIPS_xor
MIPS_dsll
MIPS_dsll32
MIPS_dsra
MIPS_dsra32
MIPS_dsrl
MIPS_dsrl32
MIPS_sll
MIPS_sra
MIPS_srl
MIPS_dsllv
MIPS_dsrav
MIPS_dsrlv
MIPS_sllv
MIPS_srav
MIPS_srlv
MIPS_addi
MIPS_addiu
MIPS_daddi
MIPS_daddiu
MIPS_slti
MIPS_sltiu
MIPS_andi
MIPS_ori
MIPS_xori
MIPS_teq
MIPS_tge
MIPS_tgeu
MIPS_tlt
MIPS_tltu
MIPS_tne
MIPS_cfc1
MIPS_cfc2
MIPS_ctc1
MIPS_ctc2
MIPS_dmfc0
MIPS_qmfc2
MIPS_dmtc0
MIPS_qmtc2
MIPS_mfc0
MIPS_mfc1
MIPS_mfc2
MIPS_mtc0
MIPS_mtc1
MIPS_mtc2
MIPS_teqi
MIPS_tgei
MIPS_tgeiu
MIPS_tlti
MIPS_tltiu
MIPS_tnei
MIPS_ddiv
MIPS_ddivu
MIPS_div
MIPS_divu
MIPS_dmult
MIPS_dmultu
MIPS_mult
MIPS_multu
MIPS_mthi
MIPS_mtlo
MIPS_mfhi
MIPS_mflo
MIPS_cop0
MIPS_cop1
MIPS_cop2
MIPS_break
MIPS_syscall
MIPS_bc0f
MIPS_bc1f
MIPS_bc2f
MIPS_bc3f
MIPS_bc0fl
MIPS_bc1fl
MIPS_bc2fl
MIPS_bc3fl
MIPS_bc0t
MIPS_bc1t
MIPS_bc2t
MIPS_bc3t
MIPS_bc0tl
MIPS_bc1tl
MIPS_bc2tl
MIPS_bc3tl
MIPS_bgez
MIPS_bgezal
MIPS_bgezall
MIPS_bgezl
MIPS_bgtz
MIPS_bgtzl
MIPS_blez
MIPS_blezl
MIPS_bltz
MIPS_bltzal
MIPS_bltzall
MIPS_bltzl
MIPS_beq
MIPS_beql
MIPS_bne
MIPS_bnel
MIPS_jalr
MIPS_j
MIPS_jr
MIPS_jal
MIPS_jalx
MIPS_cache
MIPS_lb
MIPS_lbu
MIPS_ldl
MIPS_ldr
MIPS_lwl
MIPS_lwr
MIPS_ld
MIPS_lld
MIPS_ldc1
MIPS_ldc2
MIPS_ll
MIPS_lw
MIPS_lwu
MIPS_lh
MIPS_lhu
MIPS_lui
MIPS_lwc1
MIPS_lwc2
MIPS_sb
MIPS_sdl
MIPS_sdr
MIPS_swl
MIPS_swr
MIPS_scd
MIPS_sd
MIPS_sdc1
MIPS_sdc2
MIPS_sc
MIPS_sw
MIPS_sh
MIPS_swc1
MIPS_swc2
MIPS_sync
MIPS_eret
MIPS_tlbp
MIPS_tlbr
MIPS_tlbwi
MIPS_tlbwr
MIPS_fadd
MIPS_fsub
MIPS_fmul
MIPS_fdiv
MIPS_fabs
MIPS_fcvt_s
MIPS_fcvt_d
MIPS_fcvt_w
MIPS_fcvt_l
MIPS_fround_l
MIPS_ftrunc_l
MIPS_fceil_l
MIPS_ffloor_l
MIPS_fround_w
MIPS_ftrunc_w
MIPS_fceil_w
MIPS_ffloor_w
MIPS_fmov
MIPS_fneg
MIPS_fsqrt
MIPS_fc_f
MIPS_fc_un
MIPS_fc_eq
MIPS_fc_ueq
MIPS_fc_olt
MIPS_fc_ult
MIPS_fc_ole
MIPS_fc_ule
MIPS_fc_sf
MIPS_fc_ngle
MIPS_fc_seq
MIPS_fc_ngl
MIPS_fc_lt
MIPS_fc_nge
MIPS_fc_le
MIPS_fc_ngt
MIPS_nop
MIPS_mov
MIPS_neg
MIPS_negu
MIPS_bnez
MIPS_bnezl
MIPS_beqz
MIPS_beqzl
MIPS_b
MIPS_bal
MIPS_li
MIPS_la
MIPS_pref
MIPS_ldxc1
MIPS_lwxc1
MIPS_sdxc1
MIPS_swxc1
MIPS_madd_s
MIPS_madd_d
MIPS_msub_s
MIPS_msub_d
MIPS_movf
MIPS_movt
MIPS_movn
MIPS_movz
MIPS_fmovf
MIPS_fmovt
MIPS_fmovn
MIPS_fmovz
MIPS_nmadd_s
MIPS_nmadd_d
MIPS_nmsub_s
MIPS_nmsub_d
MIPS_prefx
MIPS_frecip
MIPS_frsqrt
MIPS_lbv
MIPS_lsv
MIPS_llv
MIPS_ldv
MIPS_lqv
MIPS_lrv
MIPS_lpv
MIPS_luv
MIPS_lhv
MIPS_lfv
MIPS_lwv
MIPS_ltv
MIPS_sbv
MIPS_ssv
MIPS_slv
MIPS_sdv
MIPS_sqv
MIPS_srv
MIPS_spv
MIPS_suv
MIPS_shv
MIPS_sfv
MIPS_swv
MIPS_stv
MIPS_vmulf
MIPS_vmacf
MIPS_vmulu
MIPS_vmacu
MIPS_vrndp
MIPS_vrndn
MIPS_vmulq
MIPS_vmacq
MIPS_vmudh
MIPS_vmadh
MIPS_vmudm
MIPS_vmadm
MIPS_vmudn
MIPS_vmadn
MIPS_vmudl
MIPS_vmadl
MIPS_vadd
MIPS_vsub
MIPS_vsut
MIPS_vabs
MIPS_vaddc
MIPS_vsubc
MIPS_vaddb
MIPS_vsubb
MIPS_vaccb
MIPS_vsucb
MIPS_vsad
MIPS_vsac
MIPS_vsum
MIPS_vsaw
MIPS_vlt
MIPS_veq
MIPS_vne
MIPS_vge
MIPS_vcl
MIPS_vch
MIPS_vcr
MIPS_vmrg
MIPS_vand
MIPS_vnand
MIPS_vor
MIPS_vnor
MIPS_vxor
MIPS_vnxor
MIPS_vnoop
MIPS_vmov
MIPS_vrcp
MIPS_vrsq
MIPS_vrcph
MIPS_vrsqh
MIPS_vrcpl
MIPS_vrsql
MIPS_vinst
MIPS_vextt
MIPS_vinsq
MIPS_vextq
MIPS_vinsn
MIPS_vextn
MIPS_cfc0
MIPS_ctc0
MIPS_mtsa
MIPS_R5900_first
MIPS_mfsa
MIPS_mtsab
MIPS_mtsah
MIPS_fadda
MIPS_fsuba
MIPS_fmula
MIPS_fmadda
MIPS_fmsuba
MIPS_fmadd
MIPS_fmsub
MIPS_fmax
MIPS_fmin
MIPS_plzcw
MIPS_mthi1
MIPS_mtlo1
MIPS_pmthl_lw
MIPS_pmthi
MIPS_pmtlo
MIPS_div1
MIPS_divu1
MIPS_pdivw
MIPS_pdivuw
MIPS_pdivbw
MIPS_paddw
MIPS_pmaddw
MIPS_mult1
MIPS_multu1
MIPS_madd1
MIPS_maddu1
MIPS_pmadduw
MIPS_psubw
MIPS_pcgtw
MIPS_psllvw
MIPS_pceqw
MIPS_pmaxw
MIPS_psrlvw
MIPS_pminw
MIPS_psravw
MIPS_paddh
MIPS_pmsubw
MIPS_padsbh
MIPS_psubh
MIPS_pcgth
MIPS_pceqh
MIPS_pmaxh
MIPS_pminh
MIPS_paddb
MIPS_psubb
MIPS_pcgtb
MIPS_pinth
MIPS_pceqb
MIPS_pintoh
MIPS_pmultw
MIPS_pmultuw
MIPS_pcpyld
MIPS_pcpyud
MIPS_paddsw
MIPS_pmaddh
MIPS_padduw
MIPS_psubsw
MIPS_phmadh
MIPS_psubuw
MIPS_pextlw
MIPS_pand
MIPS_pextuw
MIPS_por
MIPS_ppacw
MIPS_pxor
MIPS_pnor
MIPS_paddsh
MIPS_pmsubh
MIPS_padduh
MIPS_psubsh
MIPS_phmsbh
MIPS_psubuh
MIPS_pextlh
MIPS_pextuh
MIPS_ppach
MIPS_paddsb
MIPS_paddub
MIPS_psubsb
MIPS_psubub
MIPS_pextlb
MIPS_pextub
MIPS_ppacb
MIPS_qfsrv
MIPS_pmulth
MIPS_pabsw
MIPS_pabsh
MIPS_pexoh
MIPS_pexch
MIPS_prevh
MIPS_pcpyh
MIPS_pext5
MIPS_pexow
MIPS_pexcw
MIPS_ppac5
MIPS_prot3w
MIPS_psllh
MIPS_psrlh
MIPS_psrah
MIPS_psllw
MIPS_psrlw
MIPS_psraw
MIPS_mfhi1
MIPS_mflo1
MIPS_pmfhi
MIPS_pmflo
MIPS_pmfhl
MIPS_lq
MIPS_sq
MIPS_lqc2
MIPS_sqc2
MIPS_madd_r5900
MIPS_maddu_r5900
MIPS_mult3
MIPS_multu3
MIPS_R5900_last
MIPS_bteqz
MIPS_btnez
MIPS_cmp
MIPS_cmpi
MIPS_extend
MIPS_move
MIPS_not
MIPS_dla
MIPS_clo
MIPS_clz
MIPS_madd
MIPS_maddu
MIPS_msub
MIPS_msubu
MIPS_mul
MIPS_sdbbp
MIPS_wait
MIPS_alnv_ps
MIPS_deret
MIPS_di
MIPS_ehb
MIPS_ei
MIPS_ext
MIPS_fcvt_ps
MIPS_fcvt_s_pl
MIPS_fcvt_s_pu
MIPS_ins
MIPS_jalr_hb
MIPS_jr_hb
MIPS_luxc1
MIPS_madd_ps
MIPS_mfhc1
MIPS_mfhc2
MIPS_msub_ps
MIPS_mthc1
MIPS_mthc2
MIPS_nmadd_ps
MIPS_nmsub_ps
MIPS_pll
MIPS_plu
MIPS_pul
MIPS_puu
MIPS_rdhwr
MIPS_rdpgpr
MIPS_rotr
MIPS_rotrv
MIPS_seb
MIPS_seh
MIPS_suxc1
MIPS_synci
MIPS_wrpgpr
MIPS_wsbh
MIPS_dmfc1
MIPS_dmtc1
MIPS_save
MIPS_restore
MIPS_jalrc
MIPS_jrc
MIPS_sew
MIPS_zeb
MIPS_zeh
MIPS_zew
MIPS_ssnop
MIPS_li_s
MIPS_li_d
MIPS_dneg
MIPS_dnegu
MIPS_pause
MIPS_dclo
MIPS_dclz
MIPS_dext
MIPS_dextm
MIPS_dextu
MIPS_dins
MIPS_dinsm
MIPS_dinsu
MIPS_dmfc2
MIPS_dmtc2
MIPS_drotr
MIPS_drotr32
MIPS_drotrv
MIPS_dsbh
MIPS_dshd
MIPS_baddu
MIPS_bbit0
MIPS_bbit032
MIPS_bbit1
MIPS_bbit132
MIPS_cins
MIPS_cins32
MIPS_dmul
MIPS_dpop
MIPS_exts
MIPS_exts32
MIPS_mtm0
MIPS_mtm1
MIPS_mtm2
MIPS_mtp0
MIPS_mtp1
MIPS_mtp2
MIPS_pop
MIPS_saa
MIPS_saad
MIPS_seq
MIPS_seqi
MIPS_sne
MIPS_snei
MIPS_synciobdma
MIPS_syncs
MIPS_syncw
MIPS_syncws
MIPS_uld
MIPS_ulw
MIPS_usd
MIPS_usw
MIPS_v3mulu
MIPS_vmm0
MIPS_vmulu_cn
MIPS_dbreak
MIPS_dret
MIPS_mfdr
MIPS_mtdr
PSP_bitrev
PSP_max
PSP_min
PSP_mfic
PSP_mtic
PSP_wsbw
PSP_sleep
PSP_lv
PSP_lvl
PSP_lvr
PSP_sv
PSP_svl
PSP_svr
PSP_mfv
PSP_mtv
PSP_mfvc
PSP_mtvc
PSP_bvf
PSP_bvt
PSP_bvfl
PSP_bvtl
PSP_vnop
PSP_vflush
PSP_vsync
PSP_vabs
PSP_vadd
PSP_vasin
PSP_vavg
PSP_vbfy1
PSP_vbfy2
PSP_vc2i
PSP_vcmovf
PSP_vcmovt
PSP_vcmp
PSP_vcos
PSP_vcrs
PSP_vcrsp
PSP_vcst
PSP_vdet
PSP_vdiv
PSP_vdot
PSP_vexp2
PSP_vf2h
PSP_vf2id
PSP_vf2in
PSP_vf2iu
PSP_vf2iz
PSP_vfad
PSP_vfim
PSP_vh2f
PSP_vhdp
PSP_vhtfm2
PSP_vhtfm3
PSP_vhtfm4
PSP_vi2c
PSP_vi2f
PSP_vi2s
PSP_vi2uc
PSP_vi2us
PSP_vidt
PSP_viim
PSP_vlgb
PSP_vlog2
PSP_vmax
PSP_vmfvc
PSP_vmidt
PSP_vmin
PSP_vmmov
PSP_vmmul
PSP_vmone
PSP_vmov
PSP_vmscl
PSP_vmtvc
PSP_vmul
PSP_vmzero
PSP_vneg
PSP_vnrcp
PSP_vnsin
PSP_vocp
PSP_vone
PSP_vpfxd
PSP_vpfxs
PSP_vpfxt
PSP_vqmul
PSP_vrcp
PSP_vrexp2
PSP_vrndf1
PSP_vrndf2
PSP_vrndi
PSP_vrnds
PSP_vrot
PSP_vrsq
PSP_vs2i
PSP_vsat0
PSP_vsat1
PSP_vsbn
PSP_vsbz
PSP_vscl
PSP_vscmp
PSP_vsge
PSP_vsgn
PSP_vsin
PSP_vslt
PSP_vsocp
PSP_vsqrt
PSP_vsrt1
PSP_vsrt2
PSP_vsrt3
PSP_vsrt4
PSP_vsub
PSP_vt4444
PSP_vt5551
PSP_vt5650
PSP_vtfm2
PSP_vtfm3
PSP_vtfm4
PSP_vuc2i
PSP_vus2i
PSP_vwbn
PSP_vzero
PSP_mfvme
PSP_mtvme
MIPS_last
H8_null
H8_add
H8_adds
H8_addx
H8_and
H8_andc
H8_band
H8_bra
H8_brn
H8_bhi
H8_bls
H8_bcc
H8_bcs
H8_bne
H8_beq
H8_bvc
H8_bvs
H8_bpl
H8_bmi
H8_bge
H8_blt
H8_bgt
H8_ble
H8_bclr
H8_biand
H8_bild
H8_bior
H8_bist
H8_bixor
H8_bld
H8_bnot
H8_bor
H8_bset
H8_bsr
H8_bst
H8_btst
H8_bxor
H8_clrmac
H8_cmp
H8_daa
H8_das
H8_dec
H8_divxs
H8_divxu
H8_eepmov
H8_exts
H8_extu
H8_inc
H8_jmp
H8_jsr
H8_ldc
H8_ldm
H8_ldmac
H8_mac
H8_mov
H8_movfpe
H8_movtpe
H8_mulxs
H8_mulxu
H8_neg
H8_nop
H8_not
H8_or
H8_orc
H8_pop
H8_push
H8_rotl
H8_rotr
H8_rotxl
H8_rotxr
H8_rte
H8_rts
H8_shal
H8_shar
H8_shll
H8_shlr
H8_sleep
H8_stc
H8_stm
H8_stmac
H8_sub
H8_subs
H8_subx
H8_tas
H8_trapa
H8_xor
H8_xorc
H8_last
PIC_null
PIC_addwf
PIC_andwf
PIC_clrf
PIC_clrw
PIC_comf
PIC_decf
PIC_decfsz
PIC_incf
PIC_incfsz
PIC_iorwf
PIC_movf
PIC_movwf
PIC_nop
PIC_rlf
PIC_rrf
PIC_subwf
PIC_swapf
PIC_xorwf
PIC_bcf
PIC_bsf
PIC_btfsc
PIC_btfss
PIC_addlw
PIC_andlw
PIC_call
PIC_clrwdt
PIC_goto
PIC_iorlw
PIC_movlw
PIC_retfie
PIC_retlw
PIC_return
PIC_sleep
PIC_sublw
PIC_xorlw
PIC_option
PIC_tris
PIC_movfw
PIC_tstf
PIC_negf
PIC_b
PIC_clrc
PIC_clrdc
PIC_clrz
PIC_setc
PIC_setdc
PIC_setz
PIC_skpc
PIC_skpdc
PIC_skpnc
PIC_skpndc
PIC_skpnz
PIC_skpz
PIC_bc
PIC_bdc
PIC_bnc
PIC_bndc
PIC_bnz
PIC_bz
PIC_addcf
PIC_adddcf
PIC_subcf
PIC_addwf3
PIC_addwfc3
PIC_andwf3
PIC_clrf2
PIC_comf3
PIC_cpfseq2
PIC_cpfsgt2
PIC_cpfslt2
PIC_decf3
PIC_decfsz3
PIC_dcfsnz3
PIC_incf3
PIC_incfsz3
PIC_infsnz3
PIC_iorwf3
PIC_movf3
PIC_movff2
PIC_movwf2
PIC_mulwf2
PIC_negf2
PIC_rlcf3
PIC_rlncf3
PIC_rrcf3
PIC_rrncf3
PIC_setf2
PIC_subfwb3
PIC_subwf3
PIC_subwfb3
PIC_swapf3
PIC_tstfsz2
PIC_xorwf3
PIC_bcf3
PIC_bsf3
PIC_btfsc3
PIC_btfss3
PIC_btg3
PIC_bc1
PIC_bn1
PIC_bnc1
PIC_bnn1
PIC_bnov1
PIC_bnz1
PIC_bov1
PIC_bra1
PIC_bz1
PIC_call2
PIC_daw0
PIC_pop0
PIC_push0
PIC_rcall1
PIC_reset0
PIC_retfie1
PIC_return1
PIC_lfsr2
PIC_movlb1
PIC_mullw1
PIC_tblrd0
PIC_tblrd0p
PIC_tblrd0m
PIC_tblrdp0
PIC_tblwt0
PIC_tblwt0p
PIC_tblwt0m
PIC_tblwtp0
PIC_last
SPARC_null
SPARC_add
SPARC_addcc
SPARC_addc
SPARC_addccc
SPARC_and
SPARC_andcc
SPARC_andn
SPARC_andncc
SPARC_b
SPARC_bp
SPARC_bpr
SPARC_call
SPARC_casa
SPARC_casxa
SPARC_done
SPARC_fabs
SPARC_fadd
SPARC_fbp
SPARC_fb
SPARC_fcmp
SPARC_fcmpe
SPARC_fdiv
SPARC_fdmulq
SPARC_flush
SPARC_flushw
SPARC_fmov
SPARC_fmovcc
SPARC_fmovr
SPARC_fmul
SPARC_fneg
SPARC_fsmuld
SPARC_fsqrt
SPARC_fsub
SPARC_fstox
SPARC_fdtox
SPARC_fqtox
SPARC_fxtos
SPARC_fxtod
SPARC_fxtoq
SPARC_fitos
SPARC_fdtos
SPARC_fqtos
SPARC_fitod
SPARC_fstod
SPARC_fqtod
SPARC_fitoq
SPARC_fstoq
SPARC_fdtoq
SPARC_fstoi
SPARC_fdtoi
SPARC_fqtoi
SPARC_illtrap
SPARC_impdep1
SPARC_impdep2
SPARC_jmpl
SPARC_ldd
SPARC_ldda
SPARC_lddf
SPARC_lddfa
SPARC_ldf
SPARC_ldfa
SPARC_ldfsr
SPARC_ldqf
SPARC_ldqfa
SPARC_ldsb
SPARC_ldsba
SPARC_ldsh
SPARC_ldsha
SPARC_ldstub
SPARC_ldstuba
SPARC_ldsw
SPARC_ldswa
SPARC_ldub
SPARC_lduba
SPARC_lduh
SPARC_lduha
SPARC_lduw
SPARC_lduwa
SPARC_ldx
SPARC_ldxa
SPARC_ldxfsr
SPARC_membar
SPARC_mov
SPARC_movr
SPARC_mulscc
SPARC_mulx
SPARC_nop
SPARC_or
SPARC_orcc
SPARC_orn
SPARC_orncc
SPARC_popc
SPARC_prefetch
SPARC_prefetcha
SPARC_rd
SPARC_rdpr
SPARC_restore
SPARC_restored
SPARC_retry
SPARC_return
SPARC_save
SPARC_saved
SPARC_sdiv
SPARC_sdivcc
SPARC_sdivx
SPARC_sethi
SPARC_sir
SPARC_sll
SPARC_sllx
SPARC_smul
SPARC_smulcc
SPARC_sra
SPARC_srax
SPARC_srl
SPARC_srlx
SPARC_stb
SPARC_stba
SPARC_stbar
SPARC_std
SPARC_stda
SPARC_stdf
SPARC_stdfa
SPARC_stf
SPARC_stfa
SPARC_stfsr
SPARC_sth
SPARC_stha
SPARC_stqf
SPARC_stqfa
SPARC_stw
SPARC_stwa
SPARC_stx
SPARC_stxa
SPARC_stxfsr
SPARC_sub
SPARC_subcc
SPARC_subc
SPARC_subccc
SPARC_swap
SPARC_swapa
SPARC_taddcc
SPARC_taddcctv
SPARC_tsubcc
SPARC_tsubcctv
SPARC_t
SPARC_udiv
SPARC_udivcc
SPARC_udivx
SPARC_umul
SPARC_umulcc
SPARC_wr
SPARC_wrpr
SPARC_xnor
SPARC_xnorcc
SPARC_xor
SPARC_xorcc
SPARC_cmp
SPARC_jmp
SPARC_iprefetch
SPARC_tst
SPARC_ret
SPARC_retl
SPARC_setuw
SPARC_setsw
SPARC_setx
SPARC_signx
SPARC_not
SPARC_neg
SPARC_cas
SPARC_casl
SPARC_casx
SPARC_casxl
SPARC_inc
SPARC_inccc
SPARC_dec
SPARC_deccc
SPARC_btst
SPARC_bset
SPARC_bclr
SPARC_btog
SPARC_clr
SPARC_clrb
SPARC_clrh
SPARC_clrx
SPARC_clruw
SPARC_pseudo_mov
SPARC_alignaddress
SPARC_array
SPARC_edge
SPARC_faligndata
SPARC_fandnot1
SPARC_fandnot2
SPARC_fand
SPARC_fcmpeq
SPARC_fcmpgt
SPARC_fcmple
SPARC_fcmpne
SPARC_fexpand
SPARC_fmul8sux16
SPARC_fmul8ulx16
SPARC_fmul8x16
SPARC_fmul8x16al
SPARC_fmul8x16au
SPARC_fmuld8sux16
SPARC_fmuld8ulx16
SPARC_fnand
SPARC_fnor
SPARC_fnot1
SPARC_fnot2
SPARC_fone
SPARC_fornot1
SPARC_fornot2
SPARC_for
SPARC_fpackfix
SPARC_fpack
SPARC_fpadd
SPARC_fpmerge
SPARC_fpsub
SPARC_fsrc1
SPARC_fsrc2
SPARC_fxnor
SPARC_fxor
SPARC_fzero
SPARC_pdist
SPARC_shutdown
SPARC_rett
SPARC_last
HPPA_null
HPPA_add
HPPA_addb
HPPA_addi
HPPA_addib
HPPA_addil
HPPA_and
HPPA_andcm
HPPA_b
HPPA_bb
HPPA_be
HPPA_blr
HPPA_break
HPPA_bv
HPPA_bve
HPPA_cldd
HPPA_cldw
HPPA_clrbts
HPPA_cmpb
HPPA_cmpclr
HPPA_cmpib
HPPA_cmpiclr
HPPA_copr
HPPA_cstd
HPPA_cstw
HPPA_dcor
HPPA_depd
HPPA_depdi
HPPA_depw
HPPA_depwi
HPPA_diag
HPPA_ds
HPPA_extrd
HPPA_extrw
HPPA_fdc
HPPA_fdce
HPPA_fic
HPPA_fice
HPPA_hadd
HPPA_havg
HPPA_hshl
HPPA_hshladd
HPPA_hshr
HPPA_hshradd
HPPA_hsub
HPPA_idtlbt
HPPA_iitlbt
HPPA_lci
HPPA_ldb
HPPA_ldcd
HPPA_ldcw
HPPA_ldd
HPPA_ldda
HPPA_ldh
HPPA_ldil
HPPA_ldo
HPPA_ldsid
HPPA_ldw
HPPA_ldwa
HPPA_lpa
HPPA_mfctl
HPPA_mfia
HPPA_mfsp
HPPA_mixh
HPPA_mixw
HPPA_movb
HPPA_movib
HPPA_mtctl
HPPA_mtsarcm
HPPA_mtsm
HPPA_mtsp
HPPA_or
HPPA_pdc
HPPA_pdtlb
HPPA_pdtlbe
HPPA_permh
HPPA_pitlb
HPPA_pitlbe
HPPA_popbts
HPPA_probe
HPPA_probei
HPPA_pushbts
HPPA_pushnom
HPPA_rfi
HPPA_rsm
HPPA_shladd
HPPA_shrpd
HPPA_shrpw
HPPA_spop0
HPPA_spop1
HPPA_spop2
HPPA_spop3
HPPA_ssm
HPPA_stb
HPPA_stby
HPPA_std
HPPA_stda
HPPA_stdby
HPPA_sth
HPPA_stw
HPPA_stwa
HPPA_sub
HPPA_subi
HPPA_sync
HPPA_syncdma
HPPA_uaddcm
HPPA_uxor
HPPA_xor
HPPA_fabs
HPPA_fadd
HPPA_fcmp
HPPA_fcnv
HPPA_fcpy
HPPA_fdiv
HPPA_fid
HPPA_fldd
HPPA_fldw
HPPA_fmpy
HPPA_fmpyadd
HPPA_fmpyfadd
HPPA_fmpynfadd
HPPA_fmpysub
HPPA_fneg
HPPA_fnegabs
HPPA_frem
HPPA_frnd
HPPA_fsqrt
HPPA_fstd
HPPA_fstw
HPPA_fsub
HPPA_ftest
HPPA_xmpyu
HPPA_pmdis
HPPA_pmenb
HPPA_call
HPPA_ret
HPPA_shld
HPPA_shlw
HPPA_shrd
HPPA_shrw
HPPA_ldi
HPPA_copy
HPPA_mtsar
HPPA_nop
HPPA_last
H8500_null
H8500_mov_g
H8500_mov_e
H8500_mov_i
H8500_mov_f
H8500_mov_l
H8500_mov_s
H8500_ldm
H8500_stm
H8500_xch
H8500_swap
H8500_movtpe
H8500_movfpe
H8500_add_g
H8500_add_q
H8500_sub
H8500_adds
H8500_subs
H8500_addx
H8500_subx
H8500_dadd
H8500_dsub
H8500_mulxu
H8500_divxu
H8500_cmp_g
H8500_cmp_e
H8500_cmp_i
H8500_exts
H8500_extu
H8500_tst
H8500_neg
H8500_clr
H8500_tas
H8500_and
H8500_or
H8500_xor
H8500_not
H8500_shal
H8500_shar
H8500_shll
H8500_shlr
H8500_rotl
H8500_rotr
H8500_rotxl
H8500_rotxr
H8500_bset
H8500_bclr
H8500_bnot
H8500_btst
H8500_bra
H8500_brn
H8500_bhi
H8500_bls
H8500_bcc
H8500_bcs
H8500_bne
H8500_beq
H8500_bvc
H8500_bvs
H8500_bpl
H8500_bmi
H8500_bge
H8500_blt
H8500_bgt
H8500_ble
H8500_jmp
H8500_pjmp
H8500_bsr
H8500_jsr
H8500_pjsr
H8500_rts
H8500_prts
H8500_rtd
H8500_prtd
H8500_scb
H8500_trapa
H8500_trap_vs
H8500_rte
H8500_link
H8500_unlk
H8500_sleep
H8500_ldc
H8500_stc
H8500_andc
H8500_orc
H8500_xorc
H8500_nop
H8500_bpt
H8500_last
DSP56_null
DSP56_abs
DSP56_adc
DSP56_add
DSP56_addl
DSP56_addr
DSP56_and
DSP56_andi
DSP56_asl
DSP56_asl4
DSP56_asr
DSP56_asr4
DSP56_asr16
DSP56_bfchg
DSP56_bfclr
DSP56_bfset
DSP56_bftsth
DSP56_bftstl
DSP56_bcc
DSP56_bchg
DSP56_bclr
DSP56_bra
DSP56_brclr
DSP56_brkcc
DSP56_brset
DSP56_bscc
DSP56_bsclr
DSP56_bset
DSP56_bsr
DSP56_bsset
DSP56_btst
DSP56_chkaau
DSP56_clb
DSP56_clr
DSP56_clr24
DSP56_cmp
DSP56_cmpm
DSP56_cmpu
DSP56_debug
DSP56_debugcc
DSP56_dec
DSP56_dec24
DSP56_div
DSP56_dmac
DSP56_do
DSP56_do_f
DSP56_dor
DSP56_dor_f
DSP56_enddo
DSP56_eor
DSP56_extract
DSP56_extractu
DSP56_ext
DSP56_ill
DSP56_imac
DSP56_impy
DSP56_inc
DSP56_inc24
DSP56_insert
DSP56_jcc
DSP56_jclr
DSP56_jmp
DSP56_jscc
DSP56_jsclr
DSP56_jset
DSP56_jsr
DSP56_jsset
DSP56_lra
DSP56_lsl
DSP56_lsr
DSP56_lua
DSP56_lea
DSP56_mac
DSP56_maci
DSP56_mac_s_u
DSP56_macr
DSP56_macri
DSP56_max
DSP56_maxm
DSP56_merge
DSP56_move
DSP56_movec
DSP56_movei
DSP56_movem
DSP56_movep
DSP56_moves
DSP56_mpy
DSP56_mpyi
DSP56_mpy_s_u
DSP56_mpyr
DSP56_mpyri
DSP56_neg
DSP56_negc
DSP56_nop
DSP56_norm
DSP56_normf
DSP56_not
DSP56_or
DSP56_ori
DSP56_pflush
DSP56_pflushun
DSP56_pfree
DSP56_plock
DSP56_plockr
DSP56_punlock
DSP56_punlockr
DSP56_rep
DSP56_repcc
DSP56_reset
DSP56_rnd
DSP56_rol
DSP56_ror
DSP56_rti
DSP56_rts
DSP56_sbc
DSP56_stop
DSP56_sub
DSP56_subl
DSP56_subr
DSP56_swap
DSP56_tcc
DSP56_tfr
DSP56_tfr2
DSP56_tfr3
DSP56_trap
DSP56_trapcc
DSP56_tst
DSP56_tst2
DSP56_vsl
DSP56_wait
DSP56_zero
DSP56_swi
DSP56_pmov
DSP56_last
C166_null
C166_add
C166_addb
C166_addc
C166_addcb
C166_and
C166_andb
C166_ashr
C166_atomic
C166_band
C166_bclr
C166_bcmp
C166_bfldh
C166_bfldl
C166_bmov
C166_bmovn
C166_bor
C166_bset
C166_bxor
C166_calla
C166_calli
C166_callr
C166_calls
C166_cmp
C166_cmpb
C166_cmpd1
C166_cmpd2
C166_cmpi1
C166_cmpi2
C166_cpl
C166_cplb
C166_diswdt
C166_div
C166_divl
C166_divlu
C166_divu
C166_einit
C166_extr
C166_extp
C166_extpr
C166_exts
C166_extsr
C166_idle
C166_jb
C166_jbc
C166_jmpa
C166_jmpi
C166_jmpr
C166_jmps
C166_jnb
C166_jnbs
C166_mov
C166_movb
C166_movbs
C166_movbz
C166_mul
C166_mulu
C166_neg
C166_negb
C166_nop
C166_or
C166_orb
C166_pcall
C166_pop
C166_prior
C166_push
C166_pwrdn
C166_ret
C166_reti
C166_retp
C166_rets
C166_rol
C166_ror
C166_scxt
C166_shl
C166_shr
C166_srst
C166_srvwdt
C166_sub
C166_subb
C166_subc
C166_subcb
C166_trap
C166_xor
C166_xorb
ST10_CoABS
ST10_CoADD
ST10_CoASHR
ST10_CoCMP
ST10_CoLOAD
ST10_CoMAC
ST10_CoMACM
ST10_CoMAX
ST10_CoMIN
ST10_CoMOV
ST10_CoMUL
ST10_CoNEG
ST10_CoNOP
ST10_CoRND
ST10_CoSHL
ST10_CoSHR
ST10_CoSTORE
ST10_CoSUB
C166_last
ST20_null
ST20_adc
ST20_add
ST20_addc
ST20_ajw
ST20_and
ST20_arot
ST20_ashr
ST20_biquad
ST20_bitld
ST20_bitmask
ST20_bitst
ST20_breakpoint
ST20_cj
ST20_dequeue
ST20_divstep
ST20_dup
ST20_ecall
ST20_enqueue
ST20_eqc
ST20_eret
ST20_fcall
ST20_gajw
ST20_gt
ST20_gtu
ST20_io
ST20_j
ST20_jab
ST20_lbinc
ST20_ldc
ST20_ldl
ST20_ldlp
ST20_ldnl
ST20_ldnlp
ST20_ldpi
ST20_ldprodid
ST20_ldtdesc
ST20_lsinc
ST20_lsxinc
ST20_lwinc
ST20_mac
ST20_mul
ST20_nfix
ST20_nop
ST20_not
ST20_opr
ST20_or
ST20_order
ST20_orderu
ST20_pfix
ST20_rev
ST20_rmw
ST20_rot
ST20_run
ST20_saturate
ST20_sbinc
ST20_shl
ST20_shr
ST20_signal
ST20_smacinit
ST20_smacloop
ST20_smul
ST20_ssinc
ST20_statusclr
ST20_statusset
ST20_statustst
ST20_stl
ST20_stnl
ST20_stop
ST20_sub
ST20_subc
ST20_swap32
ST20_swinc
ST20_timeslice
ST20_umac
ST20_unsign
ST20_wait
ST20_wsub
ST20_xbword
ST20_xor
ST20_xsword
ST20_alt
ST20_altend
ST20_altwt
ST20_bcnt
ST20_bitcnt
ST20_bitrevnbits
ST20_bitrevword
ST20_bsub
ST20_call
ST20_causeerror
ST20_cb
ST20_cbu
ST20_ccnt1
ST20_cflerr
ST20_cir
ST20_ciru
ST20_clockdis
ST20_clockenb
ST20_clrhalterr
ST20_crcbyte
ST20_crcword
ST20_cs
ST20_csngl
ST20_csu
ST20_csub0
ST20_cword
ST20_devlb
ST20_devls
ST20_devlw
ST20_devmove
ST20_devsb
ST20_devss
ST20_devsw
ST20_diff
ST20_disc
ST20_diss
ST20_dist
ST20_div
ST20_enbc
ST20_enbs
ST20_enbt
ST20_endp
ST20_fmul
ST20_fptesterr
ST20_gcall
ST20_gintdis
ST20_gintenb
ST20_in
ST20_insertqueue
ST20_intdis
ST20_intenb
ST20_iret
ST20_ladd
ST20_lb
ST20_lbx
ST20_ldclock
ST20_lddevid
ST20_ldiff
ST20_ldinf
ST20_ldiv
ST20_ldmemstartval
ST20_ldpri
ST20_ldshadow
ST20_ldtimer
ST20_ldtraph
ST20_ldtrapped
ST20_lend
ST20_lmul
ST20_ls
ST20_lshl
ST20_lshr
ST20_lsub
ST20_lsum
ST20_lsx
ST20_mint
ST20_move
ST20_move2dall
ST20_move2dinit
ST20_move2dnonzero
ST20_move2dzero
ST20_norm
ST20_out
ST20_outbyte
ST20_outword
ST20_pop
ST20_postnormsn
ST20_prod
ST20_reboot
ST20_rem
ST20_resetch
ST20_restart
ST20_ret
ST20_roundsn
ST20_runp
ST20_satadd
ST20_satmul
ST20_satsub
ST20_saveh
ST20_savel
ST20_sb
ST20_seterr
ST20_sethalterr
ST20_settimeslice
ST20_slmul
ST20_ss
ST20_ssub
ST20_startp
ST20_stclock
ST20_sthb
ST20_sthf
ST20_stlb
ST20_stlf
ST20_stoperr
ST20_stopp
ST20_stshadow
ST20_sttimer
ST20_sttraph
ST20_sttrapped
ST20_sulmul
ST20_sum
ST20_swapqueue
ST20_swaptimer
ST20_talt
ST20_taltwt
ST20_testerr
ST20_testhalterr
ST20_testpranal
ST20_tin
ST20_trapdis
ST20_trapenb
ST20_tret
ST20_unpacksn
ST20_wcnt
ST20_wsubdb
ST20_xdble
ST20_xword
ST20_last
ST7_null
ST7_adc
ST7_add
ST7_and
ST7_bcp
ST7_bres
ST7_bset
ST7_btjf
ST7_btjt
ST7_call
ST7_callr
ST7_clr
ST7_cp
ST7_cpl
ST7_dec
ST7_halt
ST7_iret
ST7_inc
ST7_jp
ST7_jra
ST7_jrt
ST7_jrf
ST7_jrih
ST7_jril
ST7_jrh
ST7_jrnh
ST7_jrm
ST7_jrnm
ST7_jrmi
ST7_jrpl
ST7_jreq
ST7_jrne
ST7_jrc
ST7_jrnc
ST7_jrult
ST7_jruge
ST7_jrugt
ST7_jrule
ST7_ld
ST7_mul
ST7_neg
ST7_nop
ST7_or
ST7_pop
ST7_push
ST7_rcf
ST7_ret
ST7_rim
ST7_rlc
ST7_rrc
ST7_rsp
ST7_sbc
ST7_scf
ST7_sim
ST7_sla
ST7_sll
ST7_srl
ST7_sra
ST7_sub
ST7_swap
ST7_tnz
ST7_trap
ST7_wfi
ST7_xor
ST7_last
IA64_null
IA64_0
IA64_1
IA64_a
IA64_acq
IA64_add
IA64_addl
IA64_addp4
IA64_adds
IA64_alloc
IA64_and
IA64_andcm
IA64_b
IA64_bias
IA64_br
IA64_break
IA64_brl
IA64_brp
IA64_bsw
IA64_c
IA64_call
IA64_cexit
IA64_chk
IA64_cloop
IA64_clr
IA64_clrrrb
IA64_cmp
IA64_cmp4
IA64_cmpxchg1
IA64_cmpxchg2
IA64_cmpxchg4
IA64_cmpxchg8
IA64_cond
IA64_cover
IA64_ctop
IA64_czx1
IA64_czx2
IA64_d
IA64_dep
IA64_dpnt
IA64_dptk
IA64_e
IA64_epc
IA64_eq
IA64_excl
IA64_exit
IA64_exp
IA64_extr
IA64_f
IA64_fabs
IA64_fadd
IA64_famax
IA64_famin
IA64_fand
IA64_fandcm
IA64_fault
IA64_fc
IA64_fchkf
IA64_fclass
IA64_fclrf
IA64_fcmp
IA64_fcvt
IA64_fetchadd4
IA64_fetchadd8
IA64_few
IA64_fill
IA64_flushrs
IA64_fma
IA64_fmax
IA64_fmerge
IA64_fmin
IA64_fmix
IA64_fmpy
IA64_fms
IA64_fneg
IA64_fnegabs
IA64_fnma
IA64_fnmpy
IA64_fnorm
IA64_for
IA64_fpabs
IA64_fpack
IA64_fpamax
IA64_fpamin
IA64_fpcmp
IA64_fpcvt
IA64_fpma
IA64_fpmax
IA64_fpmerge
IA64_fpmin
IA64_fpmpy
IA64_fpms
IA64_fpneg
IA64_fpnegabs
IA64_fpnma
IA64_fpnmpy
IA64_fprcpa
IA64_fprsqrta
IA64_frcpa
IA64_frsqrta
IA64_fselect
IA64_fsetc
IA64_fsub
IA64_fswap
IA64_fsxt
IA64_fwb
IA64_fx
IA64_fxor
IA64_fxu
IA64_g
IA64_ga
IA64_ge
IA64_getf
IA64_geu
IA64_gt
IA64_gtu
IA64_h
IA64_hu
IA64_i
IA64_ia
IA64_imp
IA64_invala
IA64_itc
IA64_itr
IA64_l
IA64_ld1
IA64_ld2
IA64_ld4
IA64_ld8
IA64_ldf
IA64_ldf8
IA64_ldfd
IA64_ldfe
IA64_ldfp8
IA64_ldfpd
IA64_ldfps
IA64_ldfs
IA64_le
IA64_leu
IA64_lfetch
IA64_loadrs
IA64_loop
IA64_lr
IA64_lt
IA64_ltu
IA64_lu
IA64_m
IA64_many
IA64_mf
IA64_mix1
IA64_mix2
IA64_mix4
IA64_mov
IA64_movl
IA64_mux1
IA64_mux2
IA64_nc
IA64_ne
IA64_neq
IA64_nge
IA64_ngt
IA64_nl
IA64_nle
IA64_nlt
IA64_nm
IA64_nop
IA64_nr
IA64_ns
IA64_nt1
IA64_nt2
IA64_nta
IA64_nz
IA64_or
IA64_orcm
IA64_ord
IA64_pack2
IA64_pack4
IA64_padd1
IA64_padd2
IA64_padd4
IA64_pavg1
IA64_pavg2
IA64_pavgsub1
IA64_pavgsub2
IA64_pcmp1
IA64_pcmp2
IA64_pcmp4
IA64_pmax1
IA64_pmax2
IA64_pmin1
IA64_pmin2
IA64_pmpy2
IA64_pmpyshr2
IA64_popcnt
IA64_pr
IA64_probe
IA64_psad1
IA64_pshl2
IA64_pshl4
IA64_pshladd2
IA64_pshr2
IA64_pshr4
IA64_pshradd2
IA64_psub1
IA64_psub2
IA64_psub4
IA64_ptc
IA64_ptr
IA64_r
IA64_raz
IA64_rel
IA64_ret
IA64_rfi
IA64_rsm
IA64_rum
IA64_rw
IA64_s
IA64_s0
IA64_s1
IA64_s2
IA64_s3
IA64_sa
IA64_se
IA64_setf
IA64_shl
IA64_shladd
IA64_shladdp4
IA64_shr
IA64_shrp
IA64_sig
IA64_spill
IA64_spnt
IA64_sptk
IA64_srlz
IA64_ssm
IA64_sss
IA64_st1
IA64_st2
IA64_st4
IA64_st8
IA64_stf
IA64_stf8
IA64_stfd
IA64_stfe
IA64_stfs
IA64_sub
IA64_sum
IA64_sxt1
IA64_sxt2
IA64_sxt4
IA64_sync
IA64_tak
IA64_tbit
IA64_thash
IA64_tnat
IA64_tpa
IA64_trunc
IA64_ttag
IA64_u
IA64_unc
IA64_unord
IA64_unpack1
IA64_unpack2
IA64_unpack4
IA64_uss
IA64_uus
IA64_uuu
IA64_w
IA64_wexit
IA64_wtop
IA64_x
IA64_xchg1
IA64_xchg2
IA64_xchg4
IA64_xchg8
IA64_xf
IA64_xma
IA64_xmpy
IA64_xor
IA64_xuf
IA64_z
IA64_zxt1
IA64_zxt2
IA64_zxt4
IA64_last
NET_null
NET_add
NET_add_ovf
NET_add_ovf_un
NET_and
NET_ann_arg
NET_ann_call
NET_ann_catch
NET_ann_data
NET_ann_data_s
NET_ann_dead
NET_ann_def
NET_ann_hoisted
NET_ann_hoisted_call
NET_ann_lab
NET_ann_live
NET_ann_phi
NET_ann_ref
NET_ann_ref_s
NET_arglist
NET_beq
NET_beq_s
NET_bge
NET_bge_s
NET_bge_un
NET_bge_un_s
NET_bgt
NET_bgt_s
NET_bgt_un
NET_bgt_un_s
NET_ble
NET_ble_s
NET_ble_un
NET_ble_un_s
NET_blt
NET_blt_s
NET_blt_un
NET_blt_un_s
NET_bne_un
NET_bne_un_s
NET_box
NET_br
NET_br_s
NET_break
NET_brfalse
NET_brfalse_s
NET_brtrue
NET_brtrue_s
NET_call
NET_calli
NET_callvirt
NET_castclass
NET_ceq
NET_cgt
NET_cgt_un
NET_ckfinite
NET_clt
NET_clt_un
NET_conv_i
NET_conv_i1
NET_conv_i2
NET_conv_i4
NET_conv_i8
NET_conv_ovf_i
NET_conv_ovf_i1
NET_conv_ovf_i1_un
NET_conv_ovf_i2
NET_conv_ovf_i2_un
NET_conv_ovf_i4
NET_conv_ovf_i4_un
NET_conv_ovf_i8
NET_conv_ovf_i8_un
NET_conv_ovf_i_un
NET_conv_ovf_u
NET_conv_ovf_u1
NET_conv_ovf_u1_un
NET_conv_ovf_u2
NET_conv_ovf_u2_un
NET_conv_ovf_u4
NET_conv_ovf_u4_un
NET_conv_ovf_u8
NET_conv_ovf_u8_un
NET_conv_ovf_u_un
NET_conv_r4
NET_conv_r8
NET_conv_r_un
NET_conv_u
NET_conv_u1
NET_conv_u2
NET_conv_u4
NET_conv_u8
NET_cpblk
NET_cpobj
NET_div
NET_div_un
NET_dup
NET_endfilter
NET_endfinally
NET_initblk
NET_initobj
NET_isinst
NET_jmp
NET_ldarg
NET_ldarg_0
NET_ldarg_1
NET_ldarg_2
NET_ldarg_3
NET_ldarg_s
NET_ldarga
NET_ldarga_s
NET_ldc_i4
NET_ldc_i4_0
NET_ldc_i4_1
NET_ldc_i4_2
NET_ldc_i4_3
NET_ldc_i4_4
NET_ldc_i4_5
NET_ldc_i4_6
NET_ldc_i4_7
NET_ldc_i4_8
NET_ldc_i4_m1
NET_ldc_i4_s
NET_ldc_i8
NET_ldc_r4
NET_ldc_r8
NET_ldelem_i
NET_ldelem_i1
NET_ldelem_i2
NET_ldelem_i4
NET_ldelem_i8
NET_ldelem_r4
NET_ldelem_r8
NET_ldelem_ref
NET_ldelem_u1
NET_ldelem_u2
NET_ldelem_u4
NET_ldelema
NET_ldfld
NET_ldflda
NET_ldftn
NET_ldind_i
NET_ldind_i1
NET_ldind_i2
NET_ldind_i4
NET_ldind_i8
NET_ldind_r4
NET_ldind_r8
NET_ldind_ref
NET_ldind_u1
NET_ldind_u2
NET_ldind_u4
NET_ldlen
NET_ldloc
NET_ldloc_0
NET_ldloc_1
NET_ldloc_2
NET_ldloc_3
NET_ldloc_s
NET_ldloca
NET_ldloca_s
NET_ldnull
NET_ldobj
NET_ldsfld
NET_ldsflda
NET_ldstr
NET_ldtoken
NET_ldvirtftn
NET_leave
NET_leave_s
NET_localloc
NET_mkrefany
NET_mul
NET_mul_ovf
NET_mul_ovf_un
NET_neg
NET_newarr
NET_newobj
NET_nop
NET_not
NET_or
NET_pop
NET_refanytype
NET_refanyval
NET_rem
NET_rem_un
NET_ret
NET_rethrow
NET_shl
NET_shr
NET_shr_un
NET_sizeof
NET_starg
NET_starg_s
NET_stelem_i
NET_stelem_i1
NET_stelem_i2
NET_stelem_i4
NET_stelem_i8
NET_stelem_r4
NET_stelem_r8
NET_stelem_ref
NET_stfld
NET_stind_i
NET_stind_i1
NET_stind_i2
NET_stind_i4
NET_stind_i8
NET_stind_r4
NET_stind_r8
NET_stind_ref
NET_stloc
NET_stloc_0
NET_stloc_1
NET_stloc_2
NET_stloc_3
NET_stloc_s
NET_stobj
NET_stsfld
NET_sub
NET_sub_ovf
NET_sub_ovf_un
NET_switch
NET_tail_
NET_throw
NET_unaligned_
NET_unbox
NET_volatile_
NET_xor
NET_ldelem
NET_stelem
NET_unbox_any
NET_constrained_
NET_no_
NET_readonly_
NET_last
MC12_null
MC12_aba
MC12_abx
MC12_aby
MC12_adca
MC12_adcb
MC12_adda
MC12_addb
MC12_addd
MC12_anda
MC12_andb
MC12_andcc
MC12_asl
MC12_asla
MC12_aslb
MC12_asld
MC12_asr
MC12_asra
MC12_asrb
MC12_bcc
MC12_bclr
MC12_bcs
MC12_beq
MC12_bge
MC12_bgnd
MC12_bgt
MC12_bhi
MC12_bhs
MC12_bita
MC12_bitb
MC12_ble
MC12_blo
MC12_bls
MC12_blt
MC12_bmi
MC12_bne
MC12_bpl
MC12_bra
MC12_brclr
MC12_brn
MC12_brset
MC12_bset
MC12_bsr
MC12_bvc
MC12_bvs
MC12_call
MC12_cba
MC12_clc
MC12_cli
MC12_clr
MC12_clra
MC12_clrb
MC12_clv
MC12_cmpa
MC12_cmpb
MC12_com
MC12_coma
MC12_comb
MC12_cpd
MC12_cps
MC12_cpx
MC12_cpy
MC12_daa
MC12_dbeq
MC12_dbne
MC12_dec
MC12_deca
MC12_decb
MC12_des
MC12_dex
MC12_dey
MC12_ediv
MC12_edivs
MC12_emacs
MC12_emaxd
MC12_emaxm
MC12_emind
MC12_eminm
MC12_emul
MC12_emuls
MC12_eora
MC12_eorb
MC12_etbl
MC12_exg
MC12_fdiv
MC12_ibeq
MC12_ibne
MC12_idiv
MC12_idivs
MC12_inc
MC12_inca
MC12_incb
MC12_ins
MC12_inx
MC12_iny
MC12_jmp
MC12_jsr
MC12_lbcc
MC12_lbcs
MC12_lbeq
MC12_lbge
MC12_lbgt
MC12_lbhi
MC12_lbhs
MC12_lble
MC12_lblo
MC12_lbls
MC12_lblt
MC12_lbmi
MC12_lbne
MC12_lbpl
MC12_lbra
MC12_lbrn
MC12_lbvc
MC12_lbvs
MC12_ldaa
MC12_ldab
MC12_ldd
MC12_lds
MC12_ldx
MC12_ldy
MC12_leas
MC12_leax
MC12_leay
MC12_lsl
MC12_lsla
MC12_lslb
MC12_lsld
MC12_lsr
MC12_lsra
MC12_lsrb
MC12_lsrd
MC12_maxa
MC12_maxm
MC12_mem
MC12_mina
MC12_minm
MC12_movb
MC12_movw
MC12_mul
MC12_neg
MC12_nega
MC12_negb
MC12_nop
MC12_oraa
MC12_orab
MC12_orcc
MC12_psha
MC12_pshb
MC12_pshc
MC12_pshd
MC12_pshx
MC12_pshy
MC12_pula
MC12_pulb
MC12_pulc
MC12_puld
MC12_pulx
MC12_puly
MC12_rev
MC12_revw
MC12_rol
MC12_rola
MC12_rolb
MC12_ror
MC12_rora
MC12_rorb
MC12_rtc
MC12_rti
MC12_rts
MC12_sba
MC12_sbca
MC12_sbcb
MC12_sec
MC12_sei
MC12_sev
MC12_sex
MC12_staa
MC12_stab
MC12_std
MC12_stop
MC12_sts
MC12_stx
MC12_sty
MC12_suba
MC12_subb
MC12_subd
MC12_swi
MC12_tab
MC12_tap
MC12_tba
MC12_tbeq
MC12_tbl
MC12_tbne
MC12_tfr
MC12_tpa
MC12_trap
MC12_tst
MC12_tsta
MC12_tstb
MC12_tsx
MC12_tsy
MC12_txs
MC12_tys
MC12_wai
MC12_wav
MC12_wavr
MC12_xgdx
MC12_xgdy
MC12_skip1
MC12_skip2
MC12X_addx
MC12X_addy
MC12X_aded
MC12X_adex
MC12X_adey
MC12X_andx
MC12X_andy
MC12X_aslw
MC12X_aslx
MC12X_asly
MC12X_asrw
MC12X_asrx
MC12X_asry
MC12X_bitx
MC12X_bity
MC12X_btas
MC12X_clrw
MC12X_clrx
MC12X_clry
MC12X_comw
MC12X_comx
MC12X_comy
MC12X_cped
MC12X_cpes
MC12X_cpex
MC12X_cpey
MC12X_decw
MC12X_decx
MC12X_decy
MC12X_eorx
MC12X_eory
MC12X_gldaa
MC12X_gldab
MC12X_gldd
MC12X_glds
MC12X_gldx
MC12X_gldy
MC12X_gstaa
MC12X_gstab
MC12X_gstd
MC12X_gsts
MC12X_gstx
MC12X_gsty
MC12X_incw
MC12X_incx
MC12X_incy
MC12X_lsrw
MC12X_lsrx
MC12X_lsry
MC12X_negw
MC12X_negx
MC12X_negy
MC12X_orx
MC12X_ory
MC12X_pshcw
MC12X_pulcw
MC12X_rolw
MC12X_rolx
MC12X_roly
MC12X_rorw
MC12X_rorx
MC12X_rory
MC12X_sbed
MC12X_sbex
MC12X_sbey
MC12X_subx
MC12X_suby
MC12X_tstw
MC12X_tstx
MC12X_tsty
MC12X_sys
MC12XGATE_adc
MC12XGATE_add
MC12XGATE_addh
MC12XGATE_addl
MC12XGATE_and
MC12XGATE_andh
MC12XGATE_andl
MC12XGATE_asr
MC12XGATE_bcc
MC12XGATE_bcs
MC12XGATE_beq
MC12XGATE_bfext
MC12XGATE_bffo
MC12XGATE_bfins
MC12XGATE_bfinsi
MC12XGATE_bfinsx
MC12XGATE_bge
MC12XGATE_bgt
MC12XGATE_bhi
MC12XGATE_bhs
MC12XGATE_bith
MC12XGATE_bitl
MC12XGATE_ble
MC12XGATE_blo
MC12XGATE_bls
MC12XGATE_blt
MC12XGATE_bmi
MC12XGATE_bne
MC12XGATE_bpl
MC12XGATE_bra
MC12XGATE_brk
MC12XGATE_bvc
MC12XGATE_bvs
MC12XGATE_cmp
MC12XGATE_cmpl
MC12XGATE_com
MC12XGATE_cpc
MC12XGATE_cpch
MC12XGATE_csem
MC12XGATE_csl
MC12XGATE_csr
MC12XGATE_jal
MC12XGATE_ldb
MC12XGATE_ldh
MC12XGATE_ldl
MC12XGATE_ldw
MC12XGATE_lsl
MC12XGATE_lsr
MC12XGATE_mov
MC12XGATE_neg
MC12XGATE_nop
MC12XGATE_or
MC12XGATE_orh
MC12XGATE_orl
MC12XGATE_par
MC12XGATE_rol
MC12XGATE_ror
MC12XGATE_rts
MC12XGATE_sbc
MC12XGATE_sex
MC12XGATE_sif
MC12XGATE_ssem
MC12XGATE_stb
MC12XGATE_stw
MC12XGATE_sub
MC12XGATE_subh
MC12XGATE_subl
MC12XGATE_tfr
MC12XGATE_tst
MC12XGATE_xnor
MC12XGATE_xnorh
MC12XGATE_xnorl
MC12XGATE_add16
MC12XGATE_and16
MC12XGATE_cmp16
MC12XGATE_ldw16
MC12XGATE_or16
MC12XGATE_sub16
MC12XGATE_xnor16
MC12_last
MC6816_null
MC6816_ldaa
MC6816_ldab
MC6816_ldd
MC6816_lde
MC6816_lded
MC6816_movb
MC6816_movw
MC6816_staa
MC6816_stab
MC6816_std
MC6816_ste
MC6816_sted
MC6816_tab
MC6816_tba
MC6816_tde
MC6816_ted
MC6816_xgab
MC6816_xgde
MC6816_aba
MC6816_adca
MC6816_adcb
MC6816_adcd
MC6816_adce
MC6816_adda
MC6816_addb
MC6816_addd
MC6816_adde
MC6816_ade
MC6816_sba
MC6816_sbca
MC6816_sbcb
MC6816_sbcd
MC6816_sbce
MC6816_sde
MC6816_suba
MC6816_subb
MC6816_subd
MC6816_sube
MC6816_daa
MC6816_sxt
MC6816_cba
MC6816_cmpa
MC6816_cmpb
MC6816_cpd
MC6816_cpe
MC6816_tst
MC6816_tsta
MC6816_tstb
MC6816_tstd
MC6816_tste
MC6816_tstw
MC6816_ediv
MC6816_edivs
MC6816_emul
MC6816_emuls
MC6816_fdiv
MC6816_fmuls
MC6816_idiv
MC6816_mul
MC6816_dec
MC6816_deca
MC6816_decb
MC6816_decw
MC6816_inc
MC6816_inca
MC6816_incb
MC6816_incw
MC6816_clr
MC6816_clra
MC6816_clrb
MC6816_clrd
MC6816_clre
MC6816_clrw
MC6816_com
MC6816_coma
MC6816_comb
MC6816_comd
MC6816_come
MC6816_comw
MC6816_neg
MC6816_nega
MC6816_negb
MC6816_negd
MC6816_nege
MC6816_negw
MC6816_anda
MC6816_andb
MC6816_andd
MC6816_ande
MC6816_eora
MC6816_eorb
MC6816_eord
MC6816_eore
MC6816_oraa
MC6816_orab
MC6816_ord
MC6816_ore
MC6816_bita
MC6816_bitb
MC6816_bclr
MC6816_bclrw
MC6816_bset
MC6816_bsetw
MC6816_lsr
MC6816_lsra
MC6816_lsrb
MC6816_lsrd
MC6816_lsre
MC6816_lsrw
MC6816_asl
MC6816_asla
MC6816_aslb
MC6816_asld
MC6816_asle
MC6816_aslw
MC6816_asr
MC6816_asra
MC6816_asrb
MC6816_asrd
MC6816_asre
MC6816_asrw
MC6816_rol
MC6816_rola
MC6816_rolb
MC6816_rold
MC6816_role
MC6816_rolw
MC6816_ror
MC6816_rora
MC6816_rorb
MC6816_rord
MC6816_rore
MC6816_rorw
MC6816_bra
MC6816_brn
MC6816_bcc
MC6816_bcs
MC6816_beq
MC6816_bmi
MC6816_bne
MC6816_bpl
MC6816_bvc
MC6816_bvs
MC6816_bhi
MC6816_bls
MC6816_bge
MC6816_bgt
MC6816_ble
MC6816_blt
MC6816_lbra
MC6816_lbrn
MC6816_lbcc
MC6816_lbcs
MC6816_lbeq
MC6816_lbev
MC6816_lbmi
MC6816_lbmv
MC6816_lbne
MC6816_lbpl
MC6816_lbvc
MC6816_lbvs
MC6816_lbhi
MC6816_lbls
MC6816_lbge
MC6816_lbgt
MC6816_lble
MC6816_lblt
MC6816_brclr
MC6816_brset
MC6816_jmp
MC6816_bsr
MC6816_jsr
MC6816_lbsr
MC6816_rts
MC6816_rti
MC6816_swi
MC6816_abx
MC6816_aby
MC6816_abz
MC6816_adx
MC6816_ady
MC6816_adz
MC6816_aex
MC6816_aey
MC6816_aez
MC6816_aix
MC6816_aiy
MC6816_aiz
MC6816_cpx
MC6816_cpy
MC6816_cpz
MC6816_ldx
MC6816_ldy
MC6816_ldz
MC6816_stx
MC6816_sty
MC6816_stz
MC6816_tsx
MC6816_tsy
MC6816_tsz
MC6816_txs
MC6816_txy
MC6816_txz
MC6816_tys
MC6816_tyx
MC6816_tyz
MC6816_tzs
MC6816_tzx
MC6816_tzy
MC6816_xgdx
MC6816_xgdy
MC6816_xgdz
MC6816_xgex
MC6816_xgey
MC6816_xgez
MC6816_tbek
MC6816_tbsk
MC6816_tbxk
MC6816_tbyk
MC6816_tbzk
MC6816_tekb
MC6816_tskb
MC6816_txkb
MC6816_tykb
MC6816_tzkb
MC6816_ais
MC6816_cps
MC6816_lds
MC6816_sts
MC6816_psha
MC6816_pshb
MC6816_pshm
MC6816_pula
MC6816_pulb
MC6816_pulm
MC6816_andp
MC6816_orp
MC6816_tap
MC6816_tdp
MC6816_tpa
MC6816_tpd
MC6816_ace
MC6816_aced
MC6816_aslm
MC6816_asrm
MC6816_clrm
MC6816_ldhi
MC6816_mac
MC6816_pshmac
MC6816_pulmac
MC6816_rmac
MC6816_tdmsk
MC6816_tedm
MC6816_tem
MC6816_tmer
MC6816_tmet
MC6816_tmxed
MC6816_lpstop
MC6816_wai
MC6816_bgnd
MC6816_nop
MC6816_last
I960_null
I960_addc
I960_addi
I960_addo
I960_alterbit
I960_and
I960_andnot
I960_atadd
I960_atmod
I960_b
I960_bal
I960_balx
I960_bbc
I960_bbs
I960_bno
I960_bg
I960_be
I960_bge
I960_bl
I960_bne
I960_ble
I960_bo
I960_bx
I960_call
I960_calls
I960_callx
I960_chkbit
I960_clrbit
I960_cmpdeci
I960_cmpdeco
I960_cmpi
I960_cmpibno
I960_cmpibg
I960_cmpibe
I960_cmpibge
I960_cmpibl
I960_cmpibne
I960_cmpible
I960_cmpibo
I960_cmpinci
I960_cmpinco
I960_cmpo
I960_cmpobg
I960_cmpobe
I960_cmpobge
I960_cmpobl
I960_cmpobne
I960_cmpoble
I960_concmpi
I960_concmpo
I960_divi
I960_divo
I960_ediv
I960_emul
I960_eshro
I960_extract
I960_faultno
I960_faultg
I960_faulte
I960_faultge
I960_faultl
I960_faultne
I960_faultle
I960_faulto
I960_flushreg
I960_fmark
I960_ld
I960_lda
I960_ldib
I960_ldis
I960_ldl
I960_ldob
I960_ldos
I960_ldq
I960_ldt
I960_mark
I960_modac
I960_modi
I960_modify
I960_modpc
I960_modtc
I960_mov
I960_movl
I960_movq
I960_movt
I960_muli
I960_mulo
I960_nand
I960_nor
I960_not
I960_notand
I960_notbit
I960_notor
I960_or
I960_ornot
I960_remi
I960_remo
I960_ret
I960_rotate
I960_scanbit
I960_scanbyte
I960_setbit
I960_shli
I960_shlo
I960_shrdi
I960_shri
I960_shro
I960_spanbit
I960_st
I960_stib
I960_stis
I960_stl
I960_stob
I960_stos
I960_stq
I960_stt
I960_subc
I960_subi
I960_subo
I960_syncf
I960_testno
I960_testg
I960_teste
I960_testge
I960_testl
I960_testne
I960_testle
I960_testo
I960_xnor
I960_xor
I960_sdma
I960_sysctl
I960_udma
I960_dcinva
I960_cmpob
I960_cmpib
I960_cmpos
I960_cmpis
I960_bswap
I960_intdis
I960_inten
I960_synmov
I960_synmovl
I960_synmovq
I960_cmpstr
I960_movqstr
I960_movstr
I960_inspacc
I960_ldphy
I960_synld
I960_fill
I960_daddc
I960_dsubc
I960_dmovt
I960_condrec
I960_receive
I960_intctl
I960_icctl
I960_dcctl
I960_halt
I960_send
I960_sendserv
I960_resumprcs
I960_schedprcs
I960_saveprcs
I960_condwait
I960_wait
I960_signal
I960_ldtime
I960_addono
I960_addino
I960_subono
I960_subino
I960_selno
I960_addog
I960_addig
I960_subog
I960_subig
I960_selg
I960_addoe
I960_addie
I960_suboe
I960_subie
I960_sele
I960_addoge
I960_addige
I960_suboge
I960_subige
I960_selge
I960_addol
I960_addil
I960_subol
I960_subil
I960_sell
I960_addone
I960_addine
I960_subone
I960_subine
I960_selne
I960_addole
I960_addile
I960_subole
I960_subile
I960_selle
I960_addoo
I960_addio
I960_suboo
I960_subio
I960_selo
I960_faddr
I960_fp_first
I960_faddrl
I960_fatanr
I960_fatanrl
I960_fclassr
I960_fclassrl
I960_fcmpor
I960_fcmporl
I960_fcmpr
I960_fcmprl
I960_fcosr
I960_fcosrl
I960_fcpyrsre
I960_fcpysre
I960_fcvtilr
I960_fcvtir
I960_fcvtri
I960_fcvtril
I960_fcvtzri
I960_fcvtzril
I960_fdivr
I960_fdivrl
I960_fexpr
I960_fexprl
I960_flogbnr
I960_flogbnrl
I960_flogepr
I960_flogeprl
I960_flogr
I960_flogrl
I960_fmovr
I960_fmovre
I960_fmovrl
I960_fmulr
I960_fmulrl
I960_fremr
I960_fremrl
I960_froundr
I960_froundrl
I960_fscaler
I960_fscalerl
I960_fsinr
I960_fsinrl
I960_fsqrtr
I960_fsqrtrl
I960_fsubr
I960_fsubrl
I960_ftanr
I960_ftanrl
I960_fp_last
I960_last
F2MC_null
F2MC_mov
F2MC_movn
F2MC_movx
F2MC_xch
F2MC_movw
F2MC_xchw
F2MC_movl
F2MC_add
F2MC_addc1
F2MC_addc2
F2MC_adddc
F2MC_sub
F2MC_subc1
F2MC_subc2
F2MC_subdc
F2MC_addw1
F2MC_addw2
F2MC_addcw
F2MC_subw1
F2MC_subw2
F2MC_subcw
F2MC_addl
F2MC_subl
F2MC_inc
F2MC_dec
F2MC_incw
F2MC_decw
F2MC_incl
F2MC_decl
F2MC_cmp1
F2MC_cmp2
F2MC_cmpw1
F2MC_cmpw2
F2MC_cmpl
F2MC_divu1
F2MC_divu2
F2MC_divuw
F2MC_mulu1
F2MC_mulu2
F2MC_muluw1
F2MC_muluw2
F2MC_div1
F2MC_div2
F2MC_divw
F2MC_mul1
F2MC_mul2
F2MC_mulw1
F2MC_mulw2
F2MC_and
F2MC_or
F2MC_xor
F2MC_not
F2MC_andw1
F2MC_andw2
F2MC_orw1
F2MC_orw2
F2MC_xorw1
F2MC_xorw2
F2MC_notw
F2MC_andl
F2MC_orl
F2MC_xorl
F2MC_neg
F2MC_negw
F2MC_nrml
F2MC_rorc
F2MC_rolc
F2MC_asr
F2MC_lsr
F2MC_lsl
F2MC_asrw1
F2MC_asrw2
F2MC_lsrw1
F2MC_lsrw2
F2MC_lslw1
F2MC_lslw2
F2MC_asrl
F2MC_lsrl
F2MC_lsll
F2MC_bz
F2MC_bnz
F2MC_bc
F2MC_bnc
F2MC_bn
F2MC_bp
F2MC_bv
F2MC_bnv
F2MC_bt
F2MC_bnt
F2MC_blt
F2MC_bge
F2MC_ble
F2MC_bgt
F2MC_bls
F2MC_bhi
F2MC_bra
F2MC_jmp
F2MC_jmpp
F2MC_call
F2MC_callv
F2MC_callp
F2MC_cbne
F2MC_cwbne
F2MC_dbnz
F2MC_dwbnz
F2MC_int
F2MC_intp
F2MC_int9
F2MC_reti
F2MC_link
F2MC_unlink
F2MC_ret
F2MC_retp
F2MC_pushw
F2MC_popw
F2MC_jctx
F2MC_movea
F2MC_addsp
F2MC_nop
F2MC_adb
F2MC_dtb
F2MC_pcb
F2MC_spb
F2MC_ncc
F2MC_cmr
F2MC_movb
F2MC_setb
F2MC_clrb
F2MC_bbc
F2MC_bbs
F2MC_sbbs
F2MC_wbts
F2MC_wbtc
F2MC_swap
F2MC_swapw
F2MC_ext
F2MC_extw
F2MC_zext
F2MC_zextw
F2MC_movsi
F2MC_movsd
F2MC_sceqi
F2MC_sceqd
F2MC_filsi
F2MC_movswi
F2MC_movswd
F2MC_scweqi
F2MC_scweqd
F2MC_filswi
F2MC_bz16
F2MC_bnz16
F2MC_bc16
F2MC_bnc16
F2MC_bn16
F2MC_bp16
F2MC_bv16
F2MC_bnv16
F2MC_bt16
F2MC_bnt16
F2MC_blt16
F2MC_bge16
F2MC_ble16
F2MC_bgt16
F2MC_bls16
F2MC_bhi16
F2MC_cbne16
F2MC_cwbne16
F2MC_dbnz16
F2MC_dwbnz16
F2MC_bbc16
F2MC_bbs16
F2MC_sbbs16
F2MC_last
TMS320C3X_null
TMS320C3X_ABSF
TMS320C3X_ABSI
TMS320C3X_ADDC
TMS320C3X_ADDF
TMS320C3X_ADDI
TMS320C3X_AND
TMS320C3X_ANDN
TMS320C3X_ASH
TMS320C3X_CMPF
TMS320C3X_CMPI
TMS320C3X_FIX
TMS320C3X_FLOAT
TMS320C3X_IDLE
TMS320C3X_IDLE2
TMS320C3X_LDE
TMS320C3X_LDF
TMS320C3X_LDFI
TMS320C3X_LDI
TMS320C3X_LDII
TMS320C3X_LDM
TMS320C3X_LSH
TMS320C3X_MPYF
TMS320C3X_MPYI
TMS320C3X_NEGB
TMS320C3X_NEGF
TMS320C3X_NEGI
TMS320C3X_NOP
TMS320C3X_NORM
TMS320C3X_NOT
TMS320C3X_POP
TMS320C3X_POPF
TMS320C3X_PUSH
TMS320C3X_PUSHF
TMS320C3X_OR
TMS320C3X_LOPOWER
TMS320C3X_MAXSPEED
TMS320C3X_RND
TMS320C3X_ROL
TMS320C3X_ROLC
TMS320C3X_ROR
TMS320C3X_RORC
TMS320C3X_RPTS
TMS320C3X_STF
TMS320C3X_STFI
TMS320C3X_STI
TMS320C3X_STII
TMS320C3X_SIGI
TMS320C3X_SUBB
TMS320C3X_SUBC
TMS320C3X_SUBF
TMS320C3X_SUBI
TMS320C3X_SUBRB
TMS320C3X_SUBRF
TMS320C3X_SUBRI
TMS320C3X_TSTB
TMS320C3X_XOR
TMS320C3X_IACK
TMS320C3X_ADDC3
TMS320C3X_ADDF3
TMS320C3X_ADDI3
TMS320C3X_AND3
TMS320C3X_ANDN3
TMS320C3X_ASH3
TMS320C3X_CMPF3
TMS320C3X_CMPI3
TMS320C3X_LSH3
TMS320C3X_MPYF3
TMS320C3X_MPYI3
TMS320C3X_OR3
TMS320C3X_SUBB3
TMS320C3X_SUBF3
TMS320C3X_SUBI3
TMS320C3X_TSTB3
TMS320C3X_XOR3
TMS320C3X_LDFcond
TMS320C3X_LDIcond
TMS320C3X_BR
TMS320C3X_BRD
TMS320C3X_CALL
TMS320C3X_RPTB
TMS320C3X_SWI
TMS320C3X_Bcond
TMS320C3X_DBcond
TMS320C3X_CALLcond
TMS320C3X_TRAPcond
TMS320C3X_RETIcond
TMS320C3X_RETScond
TMS320C3X_RETIU
TMS320C3X_RETSU
TMS320C3X_NONE
TMS320C3X_MV_IDX
TMS320C3X_last
TMS320C54_null
TMS320C54_add1
TMS320C54_add2
TMS320C54_add3
TMS320C54_addc
TMS320C54_addm
TMS320C54_adds
TMS320C54_sub1
TMS320C54_sub2
TMS320C54_sub3
TMS320C54_subb
TMS320C54_subc
TMS320C54_subs
TMS320C54_mpy2
TMS320C54_mpy3
TMS320C54_mpyr2
TMS320C54_mpya
TMS320C54_mpyu
TMS320C54_squr
TMS320C54_mac2
TMS320C54_mac3
TMS320C54_macr2
TMS320C54_macr3
TMS320C54_maca1
TMS320C54_maca2
TMS320C54_maca3
TMS320C54_macar1
TMS320C54_macar2
TMS320C54_macar3
TMS320C54_macd
TMS320C54_macp
TMS320C54_macsu
TMS320C54_mas2
TMS320C54_mas3
TMS320C54_masr2
TMS320C54_masr3
TMS320C54_masa1
TMS320C54_masa2
TMS320C54_masa3
TMS320C54_masar1
TMS320C54_masar2
TMS320C54_masar3
TMS320C54_squra
TMS320C54_squrs
TMS320C54_dadd2
TMS320C54_dadd3
TMS320C54_dadst
TMS320C54_drsub
TMS320C54_dsadt
TMS320C54_dsub
TMS320C54_dsubt
TMS320C54_abdst
TMS320C54_abs1
TMS320C54_abs2
TMS320C54_cmpl1
TMS320C54_cmpl2
TMS320C54_delay
TMS320C54_exp
TMS320C54_firs
TMS320C54_lms
TMS320C54_max
TMS320C54_min
TMS320C54_neg1
TMS320C54_neg2
TMS320C54_norm1
TMS320C54_norm2
TMS320C54_poly
TMS320C54_rnd1
TMS320C54_rnd2
TMS320C54_sat
TMS320C54_sqdst
TMS320C54_and1
TMS320C54_and2
TMS320C54_and3
TMS320C54_andm
TMS320C54_or1
TMS320C54_or2
TMS320C54_or3
TMS320C54_orm
TMS320C54_xor1
TMS320C54_xor2
TMS320C54_xor3
TMS320C54_xorm
TMS320C54_rol
TMS320C54_roltc
TMS320C54_ror
TMS320C54_sfta2
TMS320C54_sfta3
TMS320C54_sftc
TMS320C54_sftl2
TMS320C54_sftl3
TMS320C54_bit
TMS320C54_bitf
TMS320C54_bitt
TMS320C54_cmpm
TMS320C54_cmpr
TMS320C54_b
TMS320C54_bd
TMS320C54_bacc
TMS320C54_baccd
TMS320C54_banz
TMS320C54_banzd
TMS320C54_bc2
TMS320C54_bc3
TMS320C54_bcd2
TMS320C54_bcd3
TMS320C54_fb
TMS320C54_fbd
TMS320C54_fbacc
TMS320C54_fbaccd
TMS320C54_cala
TMS320C54_calad
TMS320C54_call
TMS320C54_calld
TMS320C54_cc2
TMS320C54_cc3
TMS320C54_ccd2
TMS320C54_ccd3
TMS320C54_fcala
TMS320C54_fcalad
TMS320C54_fcall
TMS320C54_fcalld
TMS320C54_intr
TMS320C54_trap
TMS320C54_fret
TMS320C54_fretd
TMS320C54_frete
TMS320C54_freted
TMS320C54_rc1
TMS320C54_rc2
TMS320C54_rc3
TMS320C54_rcd1
TMS320C54_rcd2
TMS320C54_rcd3
TMS320C54_ret
TMS320C54_retd
TMS320C54_rete
TMS320C54_reted
TMS320C54_retf
TMS320C54_retfd
TMS320C54_rpt
TMS320C54_rptb
TMS320C54_rptbd
TMS320C54_rptz
TMS320C54_frame
TMS320C54_popd
TMS320C54_popm
TMS320C54_pshd
TMS320C54_pshm
TMS320C54_idle
TMS320C54_mar
TMS320C54_nop
TMS320C54_reset
TMS320C54_rsbx1
TMS320C54_rsbx2
TMS320C54_ssbx1
TMS320C54_ssbx2
TMS320C54_xc2
TMS320C54_xc3
TMS320C54_dld
TMS320C54_ld1
TMS320C54_ld2
TMS320C54_ld3
TMS320C54_ldm
TMS320C54_ldr
TMS320C54_ldu
TMS320C54_ltd
TMS320C54_dst
TMS320C54_st
TMS320C54_sth2
TMS320C54_sth3
TMS320C54_stl2
TMS320C54_stl3
TMS320C54_stlm
TMS320C54_stm
TMS320C54_cmps
TMS320C54_saccd
TMS320C54_srccd
TMS320C54_strcd
TMS320C54_st_ld
TMS320C54_ld_mac
TMS320C54_ld_macr
TMS320C54_ld_mas
TMS320C54_ld_masr
TMS320C54_st_add
TMS320C54_st_sub
TMS320C54_st_mac
TMS320C54_st_macr
TMS320C54_st_mas
TMS320C54_st_masr
TMS320C54_st_mpy
TMS320C54_mvdd
TMS320C54_mvdk
TMS320C54_mvdm
TMS320C54_mvdp
TMS320C54_mvkd
TMS320C54_mvmd
TMS320C54_mvmm
TMS320C54_mvpd
TMS320C54_portr
TMS320C54_portw
TMS320C54_reada
TMS320C54_writa
TMS320C54_last
TMS320C55_null
TMS320C55_abdst
TMS320C55_abs1
TMS320C55_abs2
TMS320C55_add1
TMS320C55_add2
TMS320C55_add3
TMS320C55_add4
TMS320C55_addv1
TMS320C55_addv2
TMS320C55_addrv1
TMS320C55_addrv2
TMS320C55_maxdiff
TMS320C55_dmaxdiff
TMS320C55_mindiff
TMS320C55_dmindiff
TMS320C55_addsubcc4
TMS320C55_addsubcc5
TMS320C55_addsub2cc
TMS320C55_sftcc
TMS320C55_subc2
TMS320C55_subc3
TMS320C55_addsub
TMS320C55_subadd
TMS320C55_mpy_mpy
TMS320C55_mpy_mpyr
TMS320C55_mpy_mpy40
TMS320C55_mpy_mpyr40
TMS320C55_mac_mpy
TMS320C55_macr_mpyr
TMS320C55_mac40_mpy40
TMS320C55_macr40_mpyr40
TMS320C55_mas_mpy
TMS320C55_masr_mpyr
TMS320C55_mas40_mpy40
TMS320C55_masr40_mpyr40
TMS320C55_amar_mpy
TMS320C55_amar_mpyr
TMS320C55_amar_mpy40
TMS320C55_amar_mpyr40
TMS320C55_mac_mac
TMS320C55_macr_macr
TMS320C55_mac40_mac40
TMS320C55_macr40_macr40
TMS320C55_mas_mac
TMS320C55_masr_macr
TMS320C55_mas40_mac40
TMS320C55_masr40_macr40
TMS320C55_amar_mac
TMS320C55_amar_macr
TMS320C55_amar_mac40
TMS320C55_amar_macr40
TMS320C55_mas_mas
TMS320C55_masr_masr
TMS320C55_mas40_mas40
TMS320C55_masr40_masr40
TMS320C55_amar_mas
TMS320C55_amar_masr
TMS320C55_amar_mas40
TMS320C55_amar_masr40
TMS320C55_mpy_mac
TMS320C55_mpyr_macr
TMS320C55_mpy40_mac40
TMS320C55_mpyr40_macr40
TMS320C55_amar3
TMS320C55_firsadd
TMS320C55_firssub
TMS320C55_mpym_mov
TMS320C55_mpymr_mov
TMS320C55_macm_mov
TMS320C55_macmr_mov
TMS320C55_masm_mov
TMS320C55_masmr_mov
TMS320C55_add_mov
TMS320C55_sub_mov
TMS320C55_mov_mov
TMS320C55_mov_aadd
TMS320C55_mov_add
TMS320C55_amar_amar
TMS320C55_add_asub
TMS320C55_btst_mov
TMS320C55_mov_asub
TMS320C55_lms
TMS320C55_max1
TMS320C55_max2
TMS320C55_min1
TMS320C55_min2
TMS320C55_cmp
TMS320C55_cmpu
TMS320C55_aadd
TMS320C55_asub
TMS320C55_amov
TMS320C55_amar1
TMS320C55_sqr1
TMS320C55_sqr2
TMS320C55_sqrr1
TMS320C55_sqrr2
TMS320C55_mpy1
TMS320C55_mpy2
TMS320C55_mpy3
TMS320C55_mpyr1
TMS320C55_mpyr2
TMS320C55_mpyr3
TMS320C55_mpyk2
TMS320C55_mpyk3
TMS320C55_mpykr2
TMS320C55_mpykr3
TMS320C55_mpym2
TMS320C55_mpym3
TMS320C55_mpymr2
TMS320C55_mpymr3
TMS320C55_mpym403
TMS320C55_mpymr403
TMS320C55_mpymu3
TMS320C55_mpymru3
TMS320C55_sqrm
TMS320C55_sqrmr
TMS320C55_mpymk
TMS320C55_mpymkr
TMS320C55_sqa1
TMS320C55_sqa2
TMS320C55_sqar1
TMS320C55_sqar2
TMS320C55_mac3
TMS320C55_mac4
TMS320C55_macr3
TMS320C55_macr4
TMS320C55_mack3
TMS320C55_mack4
TMS320C55_mackr3
TMS320C55_mackr4
TMS320C55_macm2
TMS320C55_macm3
TMS320C55_macm4
TMS320C55_macmr2
TMS320C55_macmr3
TMS320C55_macmr4
TMS320C55_macm403
TMS320C55_macm404
TMS320C55_macmr403
TMS320C55_macmr404
TMS320C55_macmz
TMS320C55_macmrz
TMS320C55_sqam2
TMS320C55_sqam3
TMS320C55_sqamr2
TMS320C55_sqamr3
TMS320C55_macmk3
TMS320C55_macmk4
TMS320C55_macmkr3
TMS320C55_macmkr4
TMS320C55_sqs1
TMS320C55_sqs2
TMS320C55_sqsr1
TMS320C55_sqsr2
TMS320C55_mas2
TMS320C55_mas3
TMS320C55_masr2
TMS320C55_masr3
TMS320C55_masm2
TMS320C55_masm3
TMS320C55_masm4
TMS320C55_masmr2
TMS320C55_masmr3
TMS320C55_masmr4
TMS320C55_masm403
TMS320C55_masm404
TMS320C55_masmr403
TMS320C55_masmr404
TMS320C55_sqsm2
TMS320C55_sqsm3
TMS320C55_sqsmr2
TMS320C55_sqsmr3
TMS320C55_neg1
TMS320C55_neg2
TMS320C55_mant_nexp
TMS320C55_exp
TMS320C55_cmpand
TMS320C55_cmpandu
TMS320C55_cmpor
TMS320C55_cmporu
TMS320C55_round1
TMS320C55_round2
TMS320C55_sat1
TMS320C55_sat2
TMS320C55_satr1
TMS320C55_satr2
TMS320C55_sfts2
TMS320C55_sfts3
TMS320C55_sftsc2
TMS320C55_sftsc3
TMS320C55_sqdst
TMS320C55_sub1
TMS320C55_sub2
TMS320C55_sub3
TMS320C55_sub4
TMS320C55_band
TMS320C55_bfxpa
TMS320C55_bfxtr
TMS320C55_btst
TMS320C55_bnot
TMS320C55_bclr2
TMS320C55_bset2
TMS320C55_btstset
TMS320C55_btstclr
TMS320C55_btstnot
TMS320C55_btstp
TMS320C55_bclr1
TMS320C55_bset1
TMS320C55_amar2
TMS320C55_popboth
TMS320C55_pshboth
TMS320C55_bcnt
TMS320C55_not1
TMS320C55_not2
TMS320C55_and1
TMS320C55_and2
TMS320C55_and3
TMS320C55_or1
TMS320C55_or2
TMS320C55_or3
TMS320C55_xor1
TMS320C55_xor2
TMS320C55_xor3
TMS320C55_sftl2
TMS320C55_sftl3
TMS320C55_rol
TMS320C55_ror
TMS320C55_swap
TMS320C55_swapp
TMS320C55_swap4
TMS320C55_mov2
TMS320C55_mov3
TMS320C55_mov402
TMS320C55_delay
TMS320C55_pop1
TMS320C55_pop2
TMS320C55_psh1
TMS320C55_psh2
TMS320C55_bcc
TMS320C55_bccu
TMS320C55_b
TMS320C55_callcc
TMS320C55_call
TMS320C55_xcc
TMS320C55_xccpart
TMS320C55_idle
TMS320C55_nop
TMS320C55_nop_16
TMS320C55_rptblocal
TMS320C55_rptb
TMS320C55_rptcc
TMS320C55_rpt
TMS320C55_rptadd
TMS320C55_rptsub
TMS320C55_retcc
TMS320C55_ret
TMS320C55_reti
TMS320C55_intr
TMS320C55_reset
TMS320C55_trap
TMS320C55_last
TRIMEDIA_null
TRIMEDIA_igtri
TRIMEDIA_igeqi
TRIMEDIA_ilesi
TRIMEDIA_ineqi
TRIMEDIA_ieqli
TRIMEDIA_iaddi
TRIMEDIA_ild16d
TRIMEDIA_ld32d
TRIMEDIA_uld8d
TRIMEDIA_lsri
TRIMEDIA_asri
TRIMEDIA_asli
TRIMEDIA_iadd
TRIMEDIA_isub
TRIMEDIA_igeq
TRIMEDIA_igtr
TRIMEDIA_bitand
TRIMEDIA_bitor
TRIMEDIA_asr
TRIMEDIA_asl
TRIMEDIA_ifloat
TRIMEDIA_ifixrz
TRIMEDIA_fadd
TRIMEDIA_imin
TRIMEDIA_imax
TRIMEDIA_iavgonep
TRIMEDIA_ume8uu
TRIMEDIA_imul
TRIMEDIA_fmul
TRIMEDIA_h_st8d
TRIMEDIA_h_st16d
TRIMEDIA_h_st32d
TRIMEDIA_isubi
TRIMEDIA_ugtr
TRIMEDIA_ugtri
TRIMEDIA_ugeq
TRIMEDIA_ugeqi
TRIMEDIA_ieql
TRIMEDIA_ueqli
TRIMEDIA_ineq
TRIMEDIA_uneqi
TRIMEDIA_ulesi
TRIMEDIA_ileqi
TRIMEDIA_uleqi
TRIMEDIA_h_iabs
TRIMEDIA_carry
TRIMEDIA_izero
TRIMEDIA_inonzero
TRIMEDIA_bitxor
TRIMEDIA_bitandinv
TRIMEDIA_bitinv
TRIMEDIA_sex16
TRIMEDIA_packbytes
TRIMEDIA_pack16lsb
TRIMEDIA_pack16msb
TRIMEDIA_ubytesel
TRIMEDIA_ibytesel
TRIMEDIA_mergelsb
TRIMEDIA_mergemsb
TRIMEDIA_ume8ii
TRIMEDIA_h_dspiabs
TRIMEDIA_dspiadd
TRIMEDIA_dspuadd
TRIMEDIA_dspisub
TRIMEDIA_dspusub
TRIMEDIA_dspidualadd
TRIMEDIA_dspidualsub
TRIMEDIA_h_dspidualabs
TRIMEDIA_quadavg
TRIMEDIA_iclipi
TRIMEDIA_uclipi
TRIMEDIA_uclipu
TRIMEDIA_iflip
TRIMEDIA_dspuquadaddui
TRIMEDIA_quadumin
TRIMEDIA_quadumax
TRIMEDIA_dualiclipi
TRIMEDIA_dualuclipi
TRIMEDIA_quadumulmsb
TRIMEDIA_ufir8uu
TRIMEDIA_ifir8ui
TRIMEDIA_ifir8ii
TRIMEDIA_ifir16
TRIMEDIA_ufir16
TRIMEDIA_dspidualmul
TRIMEDIA_lsr
TRIMEDIA_rol
TRIMEDIA_roli
TRIMEDIA_funshift1
TRIMEDIA_funshift2
TRIMEDIA_funshift3
TRIMEDIA_dualasr
TRIMEDIA_mergedual16lsb
TRIMEDIA_fdiv
TRIMEDIA_fdivflags
TRIMEDIA_fsqrt
TRIMEDIA_fsqrtflags
TRIMEDIA_faddflags
TRIMEDIA_fsub
TRIMEDIA_fsubflags
TRIMEDIA_fabsval
TRIMEDIA_fabsvalflags
TRIMEDIA_ifloatrz
TRIMEDIA_ifloatrzflags
TRIMEDIA_ufloatrz
TRIMEDIA_ufloatrzflags
TRIMEDIA_ifixieee
TRIMEDIA_ifixieeeflags
TRIMEDIA_ufixieee
TRIMEDIA_ufixieeeflags
TRIMEDIA_ufixrz
TRIMEDIA_ufixrzflags
TRIMEDIA_ufloat
TRIMEDIA_ufloatflags
TRIMEDIA_ifixrzflags
TRIMEDIA_ifloatflags
TRIMEDIA_umul
TRIMEDIA_imulm
TRIMEDIA_umulm
TRIMEDIA_dspimul
TRIMEDIA_dspumul
TRIMEDIA_fmulflags
TRIMEDIA_fgtr
TRIMEDIA_fgtrflags
TRIMEDIA_fgeq
TRIMEDIA_fgeqflags
TRIMEDIA_feql
TRIMEDIA_feqlflags
TRIMEDIA_fneq
TRIMEDIA_fneqflags
TRIMEDIA_fsign
TRIMEDIA_fsignflags
TRIMEDIA_cycles
TRIMEDIA_hicycles
TRIMEDIA_readdpc
TRIMEDIA_readspc
TRIMEDIA_readpcsw
TRIMEDIA_writespc
TRIMEDIA_writedpc
TRIMEDIA_writepcsw
TRIMEDIA_curcycles
TRIMEDIA_jmpt
TRIMEDIA_ijmpt
TRIMEDIA_jmpi
TRIMEDIA_ijmpi
TRIMEDIA_jmpf
TRIMEDIA_ijmpf
TRIMEDIA_iclr
TRIMEDIA_uimm
TRIMEDIA_ild8d
TRIMEDIA_ild8r
TRIMEDIA_uld8r
TRIMEDIA_ild16r
TRIMEDIA_ild16x
TRIMEDIA_uld16d
TRIMEDIA_uld16r
TRIMEDIA_uld16x
TRIMEDIA_ld32r
TRIMEDIA_ld32x
TRIMEDIA_rdtag
TRIMEDIA_rdstatus
TRIMEDIA_dcb
TRIMEDIA_dinvalid
TRIMEDIA_prefd
TRIMEDIA_prefr
TRIMEDIA_pref16x
TRIMEDIA_pref32x
TRIMEDIA_allocd
TRIMEDIA_allocr
TRIMEDIA_allocx
TRIMEDIA_nop
TRIMEDIA_alloc
TRIMEDIA_dspiabs
TRIMEDIA_dspidualabs
TRIMEDIA_iabs
TRIMEDIA_ild16
TRIMEDIA_ild8
TRIMEDIA_ineg
TRIMEDIA_ld32
TRIMEDIA_pref
TRIMEDIA_sex8
TRIMEDIA_st16
TRIMEDIA_st16d
TRIMEDIA_st32
TRIMEDIA_st32d
TRIMEDIA_st8
TRIMEDIA_st8d
TRIMEDIA_uld16
TRIMEDIA_uld8
TRIMEDIA_zex16
TRIMEDIA_zex8
TRIMEDIA_ident
TRIMEDIA_iles
TRIMEDIA_ileq
TRIMEDIA_ules
TRIMEDIA_uleq
TRIMEDIA_fles
TRIMEDIA_fleq
TRIMEDIA_ueql
TRIMEDIA_uneq
TRIMEDIA_flesflags
TRIMEDIA_fleqflags
TRIMEDIA_borrow
TRIMEDIA_umin
TRIMEDIA_lsl
TRIMEDIA_lsli
TRIMEDIA_last
NEC_78K_0_null
NEC_78K_0_mov
NEC_78K_0_xch
NEC_78K_0_movw
NEC_78K_0_xchw
NEC_78K_0_add
NEC_78K_0_addc
NEC_78K_0_sub
NEC_78K_0_subc
NEC_78K_0_and
NEC_78K_0_or
NEC_78K_0_xor
NEC_78K_0_cmp
NEC_78K_0_addw
NEC_78K_0_subw
NEC_78K_0_cmpw
NEC_78K_0_mulu
NEC_78K_0_divuw
NEC_78K_0_inc
NEC_78K_0_dec
NEC_78K_0_incw
NEC_78K_0_decw
NEC_78K_0_ror
NEC_78K_0_rol
NEC_78K_0_rorc
NEC_78K_0_rolc
NEC_78K_0_ror4
NEC_78K_0_rol4
NEC_78K_0_adjba
NEC_78K_0_adjbs
NEC_78K_0_mov1
NEC_78K_0_and1
NEC_78K_0_or1
NEC_78K_0_xor1
NEC_78K_0_set1
NEC_78K_0_clr1
NEC_78K_0_not1
NEC_78K_0_call
NEC_78K_0_callf
NEC_78K_0_callt
NEC_78K_0_brk
NEC_78K_0_ret
NEC_78K_0_retb
NEC_78K_0_reti
NEC_78K_0_push
NEC_78K_0_pop
NEC_78K_0_br
NEC_78K_0_bc
NEC_78K_0_bnc
NEC_78K_0_bz
NEC_78K_0_bnz
NEC_78K_0_bt
NEC_78K_0_bf
NEC_78K_0_btclr
NEC_78K_0_dbnz
NEC_78K_0_sel
NEC_78K_0_nop
NEC_78K_0_EI
NEC_78K_0_DI
NEC_78K_0_HALT
NEC_78K_0_STOP
NEC_78K_0_last
NEC_78K_0S_null
NEC_78K_0S_cmp
NEC_78K_0S_xor
NEC_78K_0S_and
NEC_78K_0S_or
NEC_78K_0S_add
NEC_78K_0S_sub
NEC_78K_0S_addc
NEC_78K_0S_subc
NEC_78K_0S_subw
NEC_78K_0S_addw
NEC_78K_0S_cmpw
NEC_78K_0S_inc
NEC_78K_0S_dec
NEC_78K_0S_incw
NEC_78K_0S_decw
NEC_78K_0S_ror
NEC_78K_0S_rol
NEC_78K_0S_rorc
NEC_78K_0S_rolc
NEC_78K_0S_call
NEC_78K_0S_callt
NEC_78K_0S_ret
NEC_78K_0S_reti
NEC_78K_0S_mov
NEC_78K_0S_xch
NEC_78K_0S_xchw
NEC_78K_0S_set1
NEC_78K_0S_clr1
NEC_78K_0S_not1
NEC_78K_0S_push
NEC_78K_0S_pop
NEC_78K_0S_movw
NEC_78K_0S_br
NEC_78K_0S_bc
NEC_78K_0S_bnc
NEC_78K_0S_bz
NEC_78K_0S_bnz
NEC_78K_0S_bt
NEC_78K_0S_bf
NEC_78K_0S_dbnz
NEC_78K_0S_nop
NEC_78K_0S_EI
NEC_78K_0S_DI
NEC_78K_0S_HALT
NEC_78K_0S_STOP
NEC_78K_0S_last
M16C_null
M16C_abs
M16C_adc
M16C_adcf
M16C_add
M16C_adjnz
M16C_and
M16C_band
M16C_bclr
M16C_bmcnd
M16C_bmgeu
M16C_bmgtu
M16C_bmeq
M16C_bmn
M16C_bmle
M16C_bmo
M16C_bmge
M16C_bmltu
M16C_bmleu
M16C_bmne
M16C_bmpz
M16C_bmgt
M16C_bmno
M16C_bmlt
M16C_bnand
M16C_bnor
M16C_bnot
M16C_bntst
M16C_bnxor
M16C_bor
M16C_brk
M16C_bset
M16C_btst
M16C_btstc
M16C_btsts
M16C_bxor
M16C_cmp
M16C_dadc
M16C_dadd
M16C_dec
M16C_div
M16C_divu
M16C_divx
M16C_dsbb
M16C_dsub
M16C_enter
M16C_exitd
M16C_exts
M16C_fclr
M16C_fset
M16C_inc
M16C_int
M16C_into
M16C_jcnd
M16C_jgeu
M16C_jgtu
M16C_jeq
M16C_jn
M16C_jle
M16C_jo
M16C_jge
M16C_jltu
M16C_jleu
M16C_jne
M16C_jpz
M16C_jgt
M16C_jno
M16C_jlt
M16C_jmp
M16C_jmpi
M16C_jmps
M16C_jsr
M16C_jsri
M16C_jsrs
M16C_ldc
M16C_ldctx
M16C_lde
M16C_ldintb
M16C_ldipl
M16C_mov
M16C_mova
M16C_movhh
M16C_movhl
M16C_movlh
M16C_movll
M16C_mul
M16C_mulu
M16C_neg
M16C_nop
M16C_not
M16C_or
M16C_pop
M16C_popc
M16C_popm
M16C_push
M16C_pusha
M16C_pushc
M16C_pushm
M16C_reit
M16C_rmpa
M16C_rolc
M16C_rorc
M16C_rot
M16C_rts
M16C_sbb
M16C_sbjnz
M16C_sha
M16C_shl
M16C_smovb
M16C_smovf
M16C_sstr
M16C_stc
M16C_stctx
M16C_ste
M16C_stnz
M16C_stz
M16C_stzx
M16C_sub
M16C_tst
M16C_und
M16C_wait
M16C_xchg
M16C_xor
M16C_last
m32r_null
m32r_add
m32r_add3
m32r_addi
m32r_addv
m32r_addv3
m32r_addx
m32r_and
m32r_and3
m32r_bc
m32r_beq
m32r_beqz
m32r_bgez
m32r_bgtz
m32r_bl
m32r_blez
m32r_bltz
m32r_bnc
m32r_bne
m32r_bnez
m32r_bra
m32r_cmp
m32r_cmpi
m32r_cmpu
m32r_cmpui
m32r_div
m32r_divu
m32r_jl
m32r_jmp
m32r_ld
m32r_ld24
m32r_ldb
m32r_ldh
m32r_ldi
m32r_ldub
m32r_lduh
m32r_lock
m32r_machi
m32r_maclo
m32r_macwhi
m32r_macwlo
m32r_mul
m32r_mulhi
m32r_mullo
m32r_mulwhi
m32r_mulwlo
m32r_mv
m32r_mvfachi
m32r_mvfaclo
m32r_mvfacmi
m32r_mvfc
m32r_mvtachi
m32r_mvtaclo
m32r_mvtc
m32r_neg
m32r_nop
m32r_not
m32r_or
m32r_or3
m32r_push
m32r_pop
m32r_rac
m32r_rach
m32r_rem
m32r_remu
m32r_rte
m32r_seth
m32r_sll
m32r_sll3
m32r_slli
m32r_sra
m32r_sra3
m32r_srai
m32r_srl
m32r_srl3
m32r_srli
m32r_st
m32r_stb
m32r_sth
m32r_sub
m32r_subv
m32r_subx
m32r_trap
m32r_unlock
m32r_xor
m32r_xor3
m32rx_bcl
m32rx_bncl
m32rx_cmpeq
m32rx_cmpz
m32rx_divh
m32rx_jc
m32rx_jnc
m32rx_machi
m32rx_maclo
m32rx_macwhi
m32rx_macwlo
m32rx_mulhi
m32rx_mullo
m32rx_mulwhi
m32rx_mulwlo
m32rx_mvfachi
m32rx_mvfaclo
m32rx_mvfacmi
m32rx_mvtachi
m32rx_mvtaclo
m32rx_rac
m32rx_rach
m32rx_satb
m32rx_sath
m32rx_sat
m32rx_pcmpbz
m32rx_sadd
m32rx_macwu1
m32rx_msblo
m32rx_mulwu1
m32rx_maclh1
m32rx_sc
m32rx_snc
m32r_fadd
m32r_fsub
m32r_fmul
m32r_fdiv
m32r_fmadd
m32r_fmsub
m32r_itof
m32r_utof
m32r_ftoi
m32r_ftos
m32r_fcmp
m32r_fcmpe
m32r_bset
m32r_bclr
m32r_btst
m32r_setpsw
m32r_clrpsw
m32r_last
m740_null
m740_adc
m740_and
m740_asl
m740_bbc
m740_bbs
m740_bcc
m740_bcs
m740_beq
m740_bit
m740_bmi
m740_bne
m740_bpl
m740_bra
m740_brk
m740_bvc
m740_bvs
m740_clb
m740_clc
m740_cld
m740_cli
m740_clt
m740_clv
m740_cmp
m740_com
m740_cpx
m740_cpy
m740_dec
m740_dex
m740_dey
m740_div
m740_eor
m740_inc
m740_inx
m740_iny
m740_jmp
m740_jsr
m740_lda
m740_ldm
m740_ldx
m740_ldy
m740_lsr
m740_mul
m740_nop
m740_ora
m740_pha
m740_php
m740_pla
m740_plp
m740_rol
m740_ror
m740_rrf
m740_rti
m740_rts
m740_sbc
m740_seb
m740_sec
m740_sed
m740_sei
m740_set
m740_sta
m740_stp
m740_stx
m740_sty
m740_tax
m740_tay
m740_tst
m740_tsx
m740_txa
m740_txs
m740_tya
m740_wit
m740_last
m7700_null
m7700_adc
m7700_and
m7700_asl
m7700_bbc
m7700_bbs
m7700_bcc
m7700_bcs
m7700_beq
m7700_bmi
m7700_bne
m7700_bpl
m7700_bra
m7700_brk
m7700_bvc
m7700_bvs
m7700_clb
m7700_clc
m7700_cli
m7700_clm
m7700_clp
m7700_clv
m7700_cmp
m7700_cpx
m7700_cpy
m7700_dec
m7700_dex
m7700_dey
m7700_div
m7700_eor
m7700_inc
m7700_inx
m7700_iny
m7700_jmp
m7700_jsr
m7700_lda
m7700_ldm
m7700_ldt
m7700_ldx
m7700_ldy
m7700_lsr
m7700_mpy
m7700_mvn
m7700_mvp
m7700_nop
m7700_ora
m7700_pea
m7700_pei
m7700_per
m7700_pha
m7700_phb
m7700_phd
m7700_phg
m7700_php
m7700_pht
m7700_phx
m7700_phy
m7700_pla
m7700_plb
m7700_pld
m7700_plp
m7700_plt
m7700_plx
m7700_ply
m7700_psh
m7700_pul
m7700_rla
m7700_rol
m7700_ror
m7700_rti
m7700_rtl
m7700_rts
m7700_sbc
m7700_seb
m7700_sec
m7700_sei
m7700_sem
m7700_sep
m7700_sta
m7700_stp
m7700_stx
m7700_sty
m7700_tad
m7700_tas
m7700_tax
m7700_tay
m7700_tbd
m7700_tbs
m7700_tbx
m7700_tby
m7700_tda
m7700_tdb
m7700_tsa
m7700_tsb
m7700_tsx
m7700_txa
m7700_txb
m7700_txs
m7700_txy
m7700_tya
m7700_tyb
m7700_tyx
m7700_wit
m7700_xab
m7750_asr
m7750_divs
m7750_exts
m7750_extz
m7750_mpys
m7700_last
m7900_null
m7900_abs
m7900_absd
m7900_adc
m7900_adcb
m7900_adcd
m7900_add
m7900_addb
m7900_addd
m7900_addm
m7900_addmb
m7900_addmd
m7900_adds
m7900_addx
m7900_addy
m7900_and
m7900_andb
m7900_andm
m7900_andmb
m7900_andmd
m7900_asl
m7900_asln
m7900_asldn
m7900_asr
m7900_asrn
m7900_asrdn
m7900_bbc
m7900_bbcb
m7900_bbs
m7900_bbsb
m7900_bcc
m7900_bcs
m7900_beq
m7900_bge
m7900_bgt
m7900_bgtu
m7900_ble
m7900_bleu
m7900_blt
m7900_bmi
m7900_bne
m7900_bpl
m7900_bra
m7900_bral
m7900_brk
m7900_bsc
m7900_bsr
m7900_bss
m7900_bvc
m7900_bvs
m7900_cbeq
m7900_cbeqb
m7900_cbne
m7900_cbneb
m7900_clc
m7900_cli
m7900_clm
m7900_clp
m7900_clr
m7900_clrb
m7900_clrm
m7900_clrmb
m7900_clrx
m7900_clry
m7900_clv
m7900_cmp
m7900_cmpb
m7900_cmpd
m7900_cmpm
m7900_cmpmb
m7900_cmpmd
m7900_cpx
m7900_cpy
m7900_debne
m7900_dec
m7900_dex
m7900_dey
m7900_div
m7900_divs
m7900_dxbne
m7900_dybne
m7900_eor
m7900_eorb
m7900_eorm
m7900_eormb
m7900_eormd
m7900_exts
m7900_extsd
m7900_extz
m7900_extzd
m7900_inc
m7900_inx
m7900_iny
m7900_jmp
m7900_jmpl
m7900_jsr
m7900_jsrl
m7900_lda
m7900_ldab
m7900_ldad
m7900_lddn
m7900_ldt
m7900_ldx
m7900_ldxb
m7900_ldy
m7900_ldyb
m7900_lsr
m7900_lsrn
m7900_lsrdn
m7900_movm
m7900_movmb
m7900_movr
m7900_movrb
m7900_mpy
m7900_mpys
m7900_mvn
m7900_mvp
m7900_neg
m7900_negd
m7900_nop
m7900_ora
m7900_orab
m7900_oram
m7900_oramb
m7900_oramd
m7900_pea
m7900_pei
m7900_per
m7900_pha
m7900_phb
m7900_phd
m7900_phdn
m7900_phg
m7900_phldn
m7900_php
m7900_pht
m7900_phx
m7900_phy
m7900_pla
m7900_plb
m7900_pld
m7900_pldn
m7900_plp
m7900_plt
m7900_plx
m7900_ply
m7900_psh
m7900_pul
m7900_rla
m7900_rmpa
m7900_rol
m7900_roln
m7900_roldn
m7900_ror
m7900_rorn
m7900_rordn
m7900_rti
m7900_rtl
m7900_rtld
m7900_rts
m7900_rtsdn
m7900_sbc
m7900_sbcb
m7900_sbcd
m7900_sec
m7900_sei
m7900_sem
m7900_sep
m7900_sta
m7900_stab
m7900_stad
m7900_stp
m7900_stx
m7900_sty
m7900_sub
m7900_subb
m7900_subd
m7900_subm
m7900_submb
m7900_submd
m7900_subs
m7900_subx
m7900_suby
m7900_tadn
m7900_tas
m7900_tax
m7900_tay
m7900_tbdn
m7900_tbs
m7900_tbx
m7900_tby
m7900_tdan
m7900_tdbn
m7900_tds
m7900_tsa
m7900_tsb
m7900_tsd
m7900_tsx
m7900_txa
m7900_txb
m7900_txs
m7900_txy
m7900_tya
m7900_tyb
m7900_tyx
m7900_wit
m7900_xab
m7900_last
st9_null
st9_ld
st9_ldw
st9_ldpp
st9_ldpd
st9_lddp
st9_lddd
st9_add
st9_addw
st9_adc
st9_adcw
st9_sub
st9_subw
st9_sbc
st9_sbcw
st9_and
st9_andw
st9_or
st9_orw
st9_xor
st9_xorw
st9_cp
st9_cpw
st9_tm
st9_tmw
st9_tcm
st9_tcmw
st9_inc
st9_incw
st9_dec
st9_decw
st9_sla
st9_slaw
st9_sra
st9_sraw
st9_rrc
st9_rrcw
st9_rlc
st9_rlcw
st9_ror
st9_rol
st9_clr
st9_cpl
st9_swap
st9_da
st9_push
st9_pushw
st9_pea
st9_pop
st9_popw
st9_pushu
st9_pushuw
st9_peau
st9_popu
st9_popuw
st9_link
st9_unlink
st9_linku
st9_unlinku
st9_mul
st9_div
st9_divws
st9_bset
st9_bres
st9_bcpl
st9_btset
st9_bld
st9_band
st9_bor
st9_bxor
st9_ret
st9_rets
st9_iret
st9_jrcc
st9_jpcc
st9_jp
st9_jps
st9_call
st9_calls
st9_btjf
st9_btjt
st9_djnz
st9_dwjnz
st9_cpjfi
st9_cpjti
st9_xch
st9_srp
st9_srp0
st9_srp1
st9_spp
st9_ext
st9_ei
st9_di
st9_scf
st9_rcf
st9_ccf
st9_spm
st9_sdm
st9_nop
st9_wfi
st9_halt
st9_etrap
st9_eret
st9_ald
st9_aldw
st9_last
fr_null
fr_add
fr_add2
fr_addc
fr_addn
fr_addn2
fr_sub
fr_subc
fr_subn
fr_cmp
fr_cmp2
fr_and
fr_andh
fr_andb
fr_or
fr_orh
fr_orb
fr_eor
fr_eorh
fr_eorb
fr_bandl
fr_bandh
fr_borl
fr_borh
fr_beorl
fr_beorh
fr_btstl
fr_btsth
fr_mul
fr_mulu
fr_mulh
fr_muluh
fr_div0s
fr_div0u
fr_div1
fr_div2
fr_div3
fr_div4s
fr_lsl
fr_lsl2
fr_lsr
fr_lsr2
fr_asr
fr_asr2
fr_ldi_32
fr_ldi_20
fr_ldi_8
fr_ld
fr_lduh
fr_ldub
fr_st
fr_sth
fr_stb
fr_mov
fr_jmp
fr_call
fr_ret
fr_int
fr_inte
fr_reti
fr_bra
fr_bno
fr_beq
fr_bne
fr_bc
fr_bnc
fr_bn
fr_bp
fr_bv
fr_bnv
fr_blt
fr_bge
fr_ble
fr_bgt
fr_bls
fr_bhi
fr_dmov
fr_dmovh
fr_dmovb
fr_ldres
fr_stres
fr_copop
fr_copld
fr_copst
fr_copsv
fr_nop
fr_andccr
fr_orccr
fr_stilm
fr_addsp
fr_extsb
fr_extub
fr_extsh
fr_extuh
fr_ldm0
fr_ldm1
fr_stm0
fr_stm1
fr_enter
fr_leave
fr_xchb
fr_last
ALPHA_null
ALPHA_addf
ALPHA_addg
ALPHA_addl
ALPHA_addl_v
ALPHA_addq
ALPHA_addq_v
ALPHA_adds
ALPHA_addt
ALPHA_amask
ALPHA_and
ALPHA_beq
ALPHA_bge
ALPHA_bgt
ALPHA_bic
ALPHA_bis
ALPHA_blbc
ALPHA_blbs
ALPHA_ble
ALPHA_blt
ALPHA_bne
ALPHA_br
ALPHA_bsr
ALPHA_call_pal
ALPHA_cmoveq
ALPHA_cmovge
ALPHA_cmovgt
ALPHA_cmovlbc
ALPHA_cmovlbs
ALPHA_cmovle
ALPHA_cmovlt
ALPHA_cmovne
ALPHA_cmpbge
ALPHA_cmpeq
ALPHA_cmpgeq
ALPHA_cmpgle
ALPHA_cmpglt
ALPHA_cmple
ALPHA_cmplt
ALPHA_cmpteq
ALPHA_cmptle
ALPHA_cmptlt
ALPHA_cmptun
ALPHA_cmpule
ALPHA_cmpult
ALPHA_cpys
ALPHA_cpyse
ALPHA_cpysn
ALPHA_ctlz
ALPHA_ctpop
ALPHA_cttz
ALPHA_cvtdg
ALPHA_cvtgd
ALPHA_cvtgf
ALPHA_cvtgq
ALPHA_cvtlq
ALPHA_cvtqf
ALPHA_cvtqg
ALPHA_cvtql
ALPHA_cvtqs
ALPHA_cvtqt
ALPHA_cvtst
ALPHA_cvttq
ALPHA_cvtts
ALPHA_divf
ALPHA_divg
ALPHA_divs
ALPHA_divt
ALPHA_ecb
ALPHA_eqv
ALPHA_excb
ALPHA_extbl
ALPHA_extlh
ALPHA_extll
ALPHA_extqh
ALPHA_extql
ALPHA_extwh
ALPHA_extwl
ALPHA_fbeq
ALPHA_fbge
ALPHA_fbgt
ALPHA_fble
ALPHA_fblt
ALPHA_fbne
ALPHA_fcmoveq
ALPHA_fcmovge
ALPHA_fcmovgt
ALPHA_fcmovle
ALPHA_fcmovlt
ALPHA_fcmovne
ALPHA_fetch
ALPHA_fetch_m
ALPHA_ftois
ALPHA_ftoit
ALPHA_implver
ALPHA_insbl
ALPHA_inslh
ALPHA_insll
ALPHA_insqh
ALPHA_insql
ALPHA_inswh
ALPHA_inswl
ALPHA_itoff
ALPHA_itofs
ALPHA_itoft
ALPHA_jmp
ALPHA_jsr
ALPHA_jsr_coroutine
ALPHA_lda
ALPHA_ldah
ALPHA_ldbu
ALPHA_ldwu
ALPHA_ldf
ALPHA_ldg
ALPHA_ldl
ALPHA_ldl_l
ALPHA_ldq
ALPHA_ldq_l
ALPHA_ldq_u
ALPHA_lds
ALPHA_ldt
ALPHA_maxsb8
ALPHA_maxsw4
ALPHA_maxub8
ALPHA_maxuw4
ALPHA_mb
ALPHA_mf_fpcr
ALPHA_minsb8
ALPHA_minsw4
ALPHA_minub8
ALPHA_minuw4
ALPHA_mskbl
ALPHA_msklh
ALPHA_mskll
ALPHA_mskqh
ALPHA_mskql
ALPHA_mskwh
ALPHA_mskwl
ALPHA_mt_fpcr
ALPHA_mulf
ALPHA_mulg
ALPHA_mull
ALPHA_mull_v
ALPHA_mulq
ALPHA_mulq_v
ALPHA_muls
ALPHA_mult
ALPHA_ornot
ALPHA_perr
ALPHA_pklb
ALPHA_pkwb
ALPHA_rc
ALPHA_ret
ALPHA_rpcc
ALPHA_rs
ALPHA_s4addl
ALPHA_s4addq
ALPHA_s4subl
ALPHA_s4subq
ALPHA_s8addl
ALPHA_s8addq
ALPHA_s8subl
ALPHA_s8subq
ALPHA_sextb
ALPHA_sextw
ALPHA_sll
ALPHA_sqrtf
ALPHA_sqrtg
ALPHA_sqrts
ALPHA_sqrtt
ALPHA_sra
ALPHA_srl
ALPHA_stb
ALPHA_stf
ALPHA_stg
ALPHA_sts
ALPHA_stl
ALPHA_stl_c
ALPHA_stq
ALPHA_stq_c
ALPHA_stq_u
ALPHA_stt
ALPHA_stw
ALPHA_subf
ALPHA_subg
ALPHA_subl
ALPHA_subl_v
ALPHA_subq
ALPHA_subq_v
ALPHA_subs
ALPHA_subt
ALPHA_trapb
ALPHA_umulh
ALPHA_unpkbl
ALPHA_unpkbw
ALPHA_wh64
ALPHA_wmb
ALPHA_xor
ALPHA_zap
ALPHA_zapnot
ALPHA_unop
ALPHA_nop
ALPHA_fnop
ALPHA_clr
ALPHA_fabs
ALPHA_fclr
ALPHA_fmov
ALPHA_fneg
ALPHA_mov
ALPHA_negl
ALPHA_negl_v
ALPHA_negq
ALPHA_negq_v
ALPHA_negf
ALPHA_negg
ALPHA_negs
ALPHA_negt
ALPHA_not
ALPHA_sextl
ALPHA_or
ALPHA_andnot
ALPHA_xornot
ALPHA_br0
ALPHA_last
KR1878_null
KR1878_mov
KR1878_cmp
KR1878_add
KR1878_sub
KR1878_and
KR1878_or
KR1878_xor
KR1878_movl
KR1878_cmpl
KR1878_addl
KR1878_subl
KR1878_bic
KR1878_bis
KR1878_btg
KR1878_btt
KR1878_swap
KR1878_neg
KR1878_not
KR1878_shl
KR1878_shr
KR1878_shra
KR1878_rlc
KR1878_rrc
KR1878_adc
KR1878_sbc
KR1878_ldr
KR1878_mtpr
KR1878_mfpr
KR1878_push
KR1878_pop
KR1878_sst
KR1878_cst
KR1878_tof
KR1878_tdc
KR1878_jmp
KR1878_jsr
KR1878_jnz
KR1878_jz
KR1878_jns
KR1878_js
KR1878_jnc
KR1878_jc
KR1878_ijmp
KR1878_ijsr
KR1878_rts
KR1878_rtsc
KR1878_rti
KR1878_nop
KR1878_wait
KR1878_stop
KR1878_reset
KR1878_sksp
KR1878_last
AD218X_null
AD218X_amf_01
AD218X_amf_03
AD218X_amf_02
AD218X_amf_04
AD218X_amf_05
AD218X_amf_06
AD218X_amf_07
AD218X_amf_08
AD218X_amf_09
AD218X_amf_0a
AD218X_amf_0b
AD218X_amf_0c
AD218X_amf_0d
AD218X_amf_0e
AD218X_amf_0f
AD218X_amf_10
AD218X_amf_11
AD218X_amf_12
AD218X_amf_13
AD218X_amf_14
AD218X_amf_15
AD218X_amf_16
AD218X_amf_17
AD218X_amf_18
AD218X_amf_19
AD218X_amf_1a
AD218X_amf_1b
AD218X_amf_1c
AD218X_amf_1d
AD218X_amf_1e
AD218X_amf_1f
AD218X_shft_0
AD218X_shft_1
AD218X_shft_2
AD218X_shft_3
AD218X_shft_4
AD218X_shft_5
AD218X_shft_6
AD218X_shft_7
AD218X_shft_8
AD218X_shft_9
AD218X_shft_a
AD218X_shft_b
AD218X_shft_c
AD218X_shft_d
AD218X_shft_e
AD218X_shft_f
AD218X_alu_00
AD218X_alu_01
AD218X_alu_02
AD218X_alu_03
AD218X_alu_04
AD218X_alu_05
AD218X_alu_06
AD218X_alu_07
AD218X_alu_08
AD218X_alu_09
AD218X_alu_0a
AD218X_alu_0b
AD218X_alu_0c
AD218X_alu_0d
AD218X_alu_0e
AD218X_alu_0f
AD218X_alu_10
AD218X_alu_11
AD218X_alu_12
AD218X_alu_13
AD218X_alu_14
AD218X_alu_15
AD218X_alu_16
AD218X_alu_17
AD218X_alu_18
AD218X_alu_19
AD218X_alu_1a
AD218X_alu_1b
AD218X_alu_1c
AD218X_alu_1d
AD218X_mac_0
AD218X_mac_1
AD218X_mac_2
AD218X_mac_3
AD218X_mac_4
AD218X_mac_5
AD218X_mac_6
AD218X_mac_7
AD218X_mac_8
AD218X_mac_9
AD218X_mac_a
AD218X_mac_b
AD218X_amf
AD218X_shft
AD218X_shifter_0
AD218X_shifter_1
AD218X_shifter_2
AD218X_shifter_3
AD218X_shifter_4
AD218X_shifter_5
AD218X_shifter_6
AD218X_shifter_7
AD218X_move_0
AD218X_move_1
AD218X_move_2
AD218X_move_3
AD218X_move_4
AD218X_move_5
AD218X_move_6
AD218X_move_7
AD218X_move_8
AD218X_move_9
AD218X_move_a
AD218X_move_b
AD218X_jump
AD218X_jump_1
AD218X_jump_2
AD218X_jump_3
AD218X_jump_4
AD218X_call
AD218X_call_1
AD218X_call_2
AD218X_rts
AD218X_rts_cond
AD218X_rti
AD218X_rti_cond
AD218X_nop
AD218X_do
AD218X_idle
AD218X_idle_1
AD218X_flag_out
AD218X_stack_ctl
AD218X_mode_ctl
AD218X_tops_w
AD218X_tops_r
AD218X_ints_dis
AD218X_ints_ena
AD218X_modify
AD218X_double_move
AD218X_amf_move_0
AD218X_amf_move_1
AD218X_amf_move_2
AD218X_amf_move_3
AD218X_amf_move_4
AD218X_amf_move_5
AD218X_amf_move_6
AD218X_amf_move_7
AD218X_amf_move_8
AD218X_amf_move_9
AD218X_amf_move_a
AD218X_last
OAK_Dsp_null
OAK_Dsp_proc
OAK_Dsp_or
OAK_Dsp_and
OAK_Dsp_xor
OAK_Dsp_add
OAK_Dsp_alm_tst0
OAK_Dsp_alm_tst1
OAK_Dsp_cmp
OAK_Dsp_sub
OAK_Dsp_alm_msu
OAK_Dsp_addh
OAK_Dsp_addl
OAK_Dsp_subh
OAK_Dsp_subl
OAK_Dsp_sqr
OAK_Dsp_sqra
OAK_Dsp_cmpu
OAK_Dsp_shr
OAK_Dsp_shr4
OAK_Dsp_shl
OAK_Dsp_shl4
OAK_Dsp_ror
OAK_Dsp_rol
OAK_Dsp_clr
OAK_Dsp_mod_reserved
OAK_Dsp_not
OAK_Dsp_neg
OAK_Dsp_rnd
OAK_Dsp_pacr
OAK_Dsp_clrr
OAK_Dsp_inc
OAK_Dsp_dec
OAK_Dsp_copy
OAK_Dsp_norm
OAK_Dsp_divs
OAK_Dsp_set
OAK_Dsp_rst
OAK_Dsp_chng
OAK_Dsp_addv
OAK_Dsp_alb_tst0
OAK_Dsp_alb_tst1
OAK_Dsp_cmpv
OAK_Dsp_subv
OAK_Dsp_maxd
OAK_Dsp_max
OAK_Dsp_min
OAK_Dsp_lim
OAK_Dsp_mpy
OAK_Dsp_mpysu
OAK_Dsp_mac
OAK_Dsp_macus
OAK_Dsp_maa
OAK_Dsp_macuu
OAK_Dsp_macsu
OAK_Dsp_maasu
OAK_Dsp_mpyi
OAK_Dsp_msu
OAK_Dsp_tstb
OAK_Dsp_shfc
OAK_Dsp_shfi
OAK_Dsp_exp
OAK_Dsp_mov
OAK_Dsp_movp
OAK_Dsp_movs
OAK_Dsp_movsi
OAK_Dsp_movr
OAK_Dsp_movd
OAK_Dsp_push
OAK_Dsp_pop
OAK_Dsp_swap
OAK_Dsp_banke
OAK_Dsp_rep
OAK_Dsp_bkrep
OAK_Dsp_break
OAK_Dsp_br
OAK_Dsp_brr
OAK_Dsp_br_u
OAK_Dsp_brr_u
OAK_Dsp_call
OAK_Dsp_callr
OAK_Dsp_calla
OAK_Dsp_ret
OAK_Dsp_ret_u
OAK_Dsp_retd
OAK_Dsp_reti
OAK_Dsp_reti_u
OAK_Dsp_retid
OAK_Dsp_rets
OAK_Dsp_cntx
OAK_Dsp_nop
OAK_Dsp_modr
OAK_Dsp_dint
OAK_Dsp_eint
OAK_Dsp_trap
OAK_Dsp_lpg
OAK_Dsp_load
OAK_Dsp_mov_eu
OAK_Dsp_last
T900_null
T900_ld
T900_ldw
T900_push
T900_pushw
T900_pop
T900_popw
T900_lda
T900_ldar
T900_ex
T900_mirr
T900_ldi
T900_ldiw
T900_ldir
T900_ldirw
T900_ldd
T900_lddw
T900_lddr
T900_lddrw
T900_cpi
T900_cpir
T900_cpd
T900_cpdr
T900_add
T900_addw
T900_adc
T900_adcw
T900_sub
T900_subw
T900_sbc
T900_sbcw
T900_cp
T900_cpw
T900_inc
T900_incw
T900_dec
T900_decw
T900_neg
T900_extz
T900_exts
T900_daa
T900_paa
T900_cpl
T900_mul
T900_muls
T900_div
T900_divs
T900_mula
T900_minc1
T900_minc2
T900_minc4
T900_mdec1
T900_mdec2
T900_mdec4
T900_and
T900_andw
T900_or
T900_orw
T900_xor
T900_xorw
T900_ldcf
T900_stcf
T900_andcf
T900_orcf
T900_xorcf
T900_rcf
T900_scf
T900_ccf
T900_zcf
T900_bit
T900_res
T900_set
T900_chg
T900_tset
T900_bs1f
T900_bs1b
T900_nop
T900_ei
T900_di
T900_swi
T900_halt
T900_ldc
T900_ldx
T900_link
T900_unlk
T900_ldf
T900_incf
T900_decf
T900_scc
T900_rlc
T900_rlc_mem
T900_rlcw_mem
T900_rrc
T900_rrc_mem
T900_rrcw_mem
T900_rl
T900_rl_mem
T900_rlw_mem
T900_rr
T900_rr_mem
T900_rrw_mem
T900_sla
T900_sla_mem
T900_slaw_mem
T900_sra
T900_sra_mem
T900_sraw_mem
T900_sll
T900_sll_mem
T900_sllw_mem
T900_srl
T900_srl_mem
T900_srlw_mem
T900_rld
T900_rrd
T900_jp
T900_jp_cond
T900_jr
T900_jr_cond
T900_jrl
T900_jrl_cond
T900_call
T900_calr
T900_djnz
T900_ret
T900_ret_cond
T900_retd
T900_reti
T900_max
T900_normal
T900_last
C39_null
C39_adc
C39_add
C39_anc
C39_and
C39_ane
C39_arr
C39_asl
C39_asr
C39_bar
C39_bas
C39_bbr
C39_bbs
C39_bcc
C39_bcs
C39_beq
C39_bit
C39_bmi
C39_bne
C39_bpl
C39_bra
C39_brk
C39_bvc
C39_bvs
C39_clc
C39_cld
C39_cli
C39_clv
C39_clw
C39_cmp
C39_cpx
C39_cpy
C39_dcp
C39_dec
C39_dex
C39_dey
C39_eor
C39_exc
C39_inc
C39_ini
C39_inx
C39_iny
C39_isb
C39_jmp
C39_jpi
C39_jsb
C39_jsr
C39_lab
C39_lae
C39_lai
C39_lan
C39_lax
C39_lda
C39_ldx
C39_ldy
C39_lii
C39_lsr
C39_lxa
C39_mpa
C39_mpy
C39_neg
C39_nop
C39_nxt
C39_ora
C39_pha
C39_phi
C39_php
C39_phw
C39_phx
C39_phy
C39_pia
C39_pla
C39_pli
C39_plp
C39_plw
C39_plx
C39_ply
C39_psh
C39_pul
C39_rba
C39_rla
C39_rmb
C39_rnd
C39_rol
C39_ror
C39_rra
C39_rti
C39_rts
C39_sax
C39_sba
C39_sbc
C39_sbx
C39_sec
C39_sed
C39_sei
C39_sha
C39_shs
C39_shx
C39_shy
C39_slo
C39_smb
C39_sre
C39_sta
C39_sti
C39_stx
C39_sty
C39_tax
C39_tay
C39_taw
C39_tip
C39_tsx
C39_twa
C39_txa
C39_txs
C39_tya
C39_last
CR16_null
CR16_addb
CR16_addw
CR16_addub
CR16_adduw
CR16_addcb
CR16_addcw
CR16_andb
CR16_andw
CR16_ashub
CR16_ashuw
CR16_beq
CR16_bne
CR16_bcs
CR16_bcc
CR16_bhi
CR16_bls
CR16_bgt
CR16_ble
CR16_bfs
CR16_bfc
CR16_blo
CR16_bhs
CR16_blt
CR16_bge
CR16_br
CR16_bal
CR16_cmpb
CR16_cmpw
CR16_beq1b
CR16_beq1w
CR16_beq0b
CR16_beq0w
CR16_bne1b
CR16_bne1w
CR16_bne0b
CR16_bne0w
CR16_di
CR16_ei
CR16_excp
CR16_jeq
CR16_jne
CR16_jcs
CR16_jcc
CR16_jhi
CR16_jls
CR16_jgt
CR16_jle
CR16_jfs
CR16_jfc
CR16_jlo
CR16_jhs
CR16_jlt
CR16_jge
CR16_jump
CR16_jal
CR16_loadb
CR16_loadw
CR16_loadm
CR16_lpr
CR16_lshb
CR16_lshw
CR16_movb
CR16_movw
CR16_movxb
CR16_movzb
CR16_movd
CR16_mulb
CR16_mulw
CR16_mulsb
CR16_mulsw
CR16_muluw
CR16_nop
CR16_orb
CR16_orw
CR16_push
CR16_pop
CR16_popret
CR16_retx
CR16_seq
CR16_sne
CR16_scs
CR16_scc
CR16_shi
CR16_sls
CR16_sgt
CR16_sle
CR16_sfs
CR16_sfc
CR16_slo
CR16_shs
CR16_slt
CR16_sge
CR16_spr
CR16_storb
CR16_storw
CR16_storm
CR16_subb
CR16_subw
CR16_subcb
CR16_subcw
CR16_tbit
CR16_tbitb
CR16_tbitw
CR16_sbitb
CR16_sbitw
CR16_cbitb
CR16_cbitw
CR16_wait
CR16_eiwait
CR16_xorb
CR16_xorw
CR16_last
mn102_null
mn102_add
mn102_addc
mn102_addnf
mn102_and
mn102_asr
mn102_bcc
mn102_bccx
mn102_bclr
mn102_bcs
mn102_bcsx
mn102_beq
mn102_beqx
mn102_bge
mn102_bgex
mn102_bgt
mn102_bgtx
mn102_bhi
mn102_bhix
mn102_ble
mn102_blex
mn102_bls
mn102_blsx
mn102_blt
mn102_bltx
mn102_bnc
mn102_bncx
mn102_bne
mn102_bnex
mn102_bns
mn102_bnsx
mn102_bra
mn102_bset
mn102_btst
mn102_bvc
mn102_bvcx
mn102_bvs
mn102_bvsx
mn102_cmp
mn102_divu
mn102_ext
mn102_extx
mn102_extxb
mn102_extxbu
mn102_extxu
mn102_jmp
mn102_jsr
mn102_lsr
mn102_mov
mn102_movb
mn102_movbu
mn102_movx
mn102_mul
mn102_mulq
mn102_mulqh
mn102_mulql
mn102_mulu
mn102_nop
mn102_not
mn102_or
mn102_pxst
mn102_rol
mn102_ror
mn102_rti
mn102_rts
mn102_sub
mn102_subc
mn102_tbnz
mn102_tbz
mn102_xor
mn102_last
PPC_null
PPC_add
PPC_addc
PPC_adde
PPC_addi
PPC_addic
PPC_addis
PPC_addme
PPC_addze
PPC_and
PPC_andc
PPC_andi
PPC_andis
PPC_b
PPC_bc
PPC_bcctr
PPC_bclr
PPC_cmp
PPC_cmpi
PPC_cmpl
PPC_cmpli
PPC_cntlzd
PPC_cntlzw
PPC_crand
PPC_crandc
PPC_creqv
PPC_crnand
PPC_crnor
PPC_cror
PPC_crorc
PPC_crxor
PPC_dcba
PPC_dcbf
PPC_dcbi
PPC_dcbst
PPC_dcbt
PPC_dcbtst
PPC_dcbz
PPC_divd
PPC_divdu
PPC_divw
PPC_divwu
PPC_eciwx
PPC_ecowx
PPC_eieio
PPC_eqv
PPC_extsb
PPC_extsh
PPC_extsw
PPC_fabs
PPC_fadd
PPC_fadds
PPC_fcfid
PPC_fcmpo
PPC_fcmpu
PPC_fctid
PPC_fctidz
PPC_fctiw
PPC_fctiwz
PPC_fdiv
PPC_fdivs
PPC_fmadd
PPC_fmadds
PPC_fmr
PPC_fmsub
PPC_fmsubs
PPC_fmul
PPC_fmuls
PPC_fnabs
PPC_fneg
PPC_fnmadd
PPC_fnmadds
PPC_fnmsub
PPC_fnmsubs
PPC_fres
PPC_frsp
PPC_frsqrte
PPC_fsel
PPC_fsqrt
PPC_fsqrts
PPC_fsub
PPC_fsubs
PPC_icbi
PPC_isync
PPC_lbz
PPC_lbzu
PPC_lbzux
PPC_lbzx
PPC_ld
PPC_ldarx
PPC_ldu
PPC_ldux
PPC_ldx
PPC_lfd
PPC_lfdu
PPC_lfdux
PPC_lfdx
PPC_lfs
PPC_lfsu
PPC_lfsux
PPC_lfsx
PPC_lha
PPC_lhau
PPC_lhaux
PPC_lhax
PPC_lhbrx
PPC_lhz
PPC_lhzu
PPC_lhzux
PPC_lhzx
PPC_lmw
PPC_lswi
PPC_lswx
PPC_lwa
PPC_lwarx
PPC_lwaux
PPC_lwax
PPC_lwbrx
PPC_lwz
PPC_lwzu
PPC_lwzux
PPC_lwzx
PPC_mcrf
PPC_mcrfs
PPC_mcrxr
PPC_mfcr
PPC_mffs
PPC_mfmsr
PPC_mfspr
PPC_mfsr
PPC_mfsrin
PPC_mftb
PPC_mtcrf
PPC_mtfsb0
PPC_mtfsb1
PPC_mtfsf
PPC_mtfsfi
PPC_mtmsr
PPC_mtmsrd
PPC_mtspr
PPC_mtsr
PPC_mtsrd
PPC_mtsrdin
PPC_mtsrin
PPC_mulhd
PPC_mulhdu
PPC_mulhw
PPC_mulhwu
PPC_mulld
PPC_mulli
PPC_mullw
PPC_nand
PPC_neg
PPC_nor
PPC_or
PPC_orc
PPC_ori
PPC_oris
PPC_rfi
PPC_rfid
PPC_rldcl
PPC_rldcr
PPC_rldic
PPC_rldicl
PPC_rldicr
PPC_rldimi
PPC_rlwimi
PPC_rlwinm
PPC_rlwnm
PPC_sc
PPC_slbia
PPC_slbie
PPC_sld
PPC_slw
PPC_srad
PPC_sradi
PPC_sraw
PPC_srawi
PPC_srd
PPC_srw
PPC_stb
PPC_stbu
PPC_stbux
PPC_stbx
PPC_std
PPC_stdcx
PPC_stdu
PPC_stdux
PPC_stdx
PPC_stfd
PPC_stfdu
PPC_stfdux
PPC_stfdx
PPC_stfiwx
PPC_stfs
PPC_stfsu
PPC_stfsux
PPC_stfsx
PPC_sth
PPC_sthbrx
PPC_sthu
PPC_sthux
PPC_sthx
PPC_stmw
PPC_stswi
PPC_stswx
PPC_stw
PPC_stwbrx
PPC_stwcx
PPC_stwu
PPC_stwux
PPC_stwx
PPC_subf
PPC_subfc
PPC_subfe
PPC_subfic
PPC_subfme
PPC_subfze
PPC_sync
PPC_td
PPC_tdi
PPC_tlbia
PPC_tlbie
PPC_tlbsync
PPC_tw
PPC_twi
PPC_xor
PPC_xori
PPC_xoris
PPC_last_basic
PPC_cmpwi
PPC_cmpw
PPC_cmplwi
PPC_cmplw
PPC_cmpdi
PPC_cmpd
PPC_cmpldi
PPC_cmpld
PPC_trap
PPC_trapd
PPC_twlgt
PPC_twllt
PPC_tweq
PPC_twlge
PPC_twlle
PPC_twgt
PPC_twge
PPC_twlt
PPC_twle
PPC_twne
PPC_twlgti
PPC_twllti
PPC_tweqi
PPC_twlgei
PPC_twllei
PPC_twgti
PPC_twgei
PPC_twlti
PPC_twlei
PPC_twnei
PPC_tdlgt
PPC_tdllt
PPC_tdeq
PPC_tdlge
PPC_tdlle
PPC_tdgt
PPC_tdge
PPC_tdlt
PPC_tdle
PPC_tdne
PPC_tdlgti
PPC_tdllti
PPC_tdeqi
PPC_tdlgei
PPC_tdllei
PPC_tdgti
PPC_tdgei
PPC_tdlti
PPC_tdlei
PPC_tdnei
PPC_nop
PPC_not
PPC_mr
PPC_subi
PPC_subic
PPC_subis
PPC_li
PPC_lis
PPC_crset
PPC_crnot
PPC_crmove
PPC_crclr
PPC_mtxer
PPC_mtlr
PPC_mtctr
PPC_mtdsisr
PPC_mtdar
PPC_mtdec
PPC_mtsrr0
PPC_mtsrr1
PPC_mtsprg0
PPC_mtsprg1
PPC_mtsprg2
PPC_mtsprg3
PPC_mttbl
PPC_mttbu
PPC_mfxer
PPC_mflr
PPC_mfctr
PPC_mfdsisr
PPC_mfdar
PPC_mfdec
PPC_mfsrr0
PPC_mfsrr1
PPC_mfsprg0
PPC_mfsprg1
PPC_mfsprg2
PPC_mfsprg3
PPC_mftbl
PPC_mftbu
PPC_mfpvr
PPC_balways
PPC_bt
PPC_bf
PPC_bdnz
PPC_bdnzt
PPC_bdnzf
PPC_bdz
PPC_bdzt
PPC_bdzf
PPC_blt
PPC_ble
PPC_beq
PPC_bge
PPC_bgt
PPC_bne
PPC_bso
PPC_bns
PPC_extlwi
PPC_extrwi
PPC_inslwi
PPC_insrwi
PPC_rotlwi
PPC_rotrwi
PPC_rotlw
PPC_slwi
PPC_srwi
PPC_clrlwi
PPC_clrrwi
PPC_clrlslwi
PPC_dccci
PPC_dcread
PPC_icbt
PPC_iccci
PPC_icread
PPC_mfdcr
PPC_mtdcr
PPC_rfci
PPC_tlbre
PPC_tlbsx
PPC_tlbwe
PPC_wrtee
PPC_wrteei
PPC_abs
PPC_clcs
PPC_clf
PPC_cli
PPC_dclst
PPC_div
PPC_divs
PPC_doz
PPC_dozi
PPC_frsqrtes
PPC_hrfid
PPC_lscbx
PPC_maskg
PPC_maskir
PPC_mfsri
PPC_mul
PPC_nabs
PPC_popcntb
PPC_rac
PPC_rfsvc
PPC_rlmi
PPC_rrib
PPC_slbmfee
PPC_slbmfev
PPC_slbmte
PPC_sle
PPC_sleq
PPC_sliq
PPC_slliq
PPC_sllq
PPC_slq
PPC_sraiq
PPC_sraq
PPC_sre
PPC_srea
PPC_sreq
PPC_sriq
PPC_srliq
PPC_srlq
PPC_srq
PPC_mtocrf
PPC_mfocrf
PPC_isel
PPC_isellt
PPC_iselgt
PPC_iseleq
PPC_dcblc
PPC_dcbtls
PPC_dcbtstls
PPC_icblc
PPC_icbtls
PPC_tlbivax
PPC_rfdi
PPC_tlbld
PPC_tlbli
PPC_brinc
PPC_evabs
PPC_evaddiw
PPC_evaddsmiaaw
PPC_evaddssiaaw
PPC_evaddumiaaw
PPC_evaddusiaaw
PPC_evaddw
PPC_evand
PPC_evandc
PPC_evcmpeq
PPC_evcmpgts
PPC_evcmpgtu
PPC_evcmplts
PPC_evcmpltu
PPC_evcntlsw
PPC_evcntlzw
PPC_evdivws
PPC_evdivwu
PPC_eveqv
PPC_evextsb
PPC_evextsh
PPC_evldd
PPC_evlddx
PPC_evldh
PPC_evldhx
PPC_evldw
PPC_evldwx
PPC_evlhhesplat
PPC_evlhhesplatx
PPC_evlhhossplat
PPC_evlhhossplatx
PPC_evlhhousplat
PPC_evlhhousplatx
PPC_evlwhe
PPC_evlwhex
PPC_evlwhos
PPC_evlwhosx
PPC_evlwhou
PPC_evlwhoux
PPC_evlwhsplat
PPC_evlwhsplatx
PPC_evlwwsplat
PPC_evlwwsplatx
PPC_evmergehi
PPC_evmergehilo
PPC_evmergelo
PPC_evmergelohi
PPC_evmhegsmfaa
PPC_evmhegsmfan
PPC_evmhegsmiaa
PPC_evmhegsmian
PPC_evmhegumiaa
PPC_evmhegumian
PPC_evmhesmf
PPC_evmhesmfa
PPC_evmhesmfaaw
PPC_evmhesmfanw
PPC_evmhesmi
PPC_evmhesmia
PPC_evmhesmiaaw
PPC_evmhesmianw
PPC_evmhessf
PPC_evmhessfa
PPC_evmhessfaaw
PPC_evmhessfanw
PPC_evmhessiaaw
PPC_evmhessianw
PPC_evmheumi
PPC_evmheumia
PPC_evmheumiaaw
PPC_evmheumianw
PPC_evmheusiaaw
PPC_evmheusianw
PPC_evmhogsmfaa
PPC_evmhogsmfan
PPC_evmhogsmiaa
PPC_evmhogsmian
PPC_evmhogumiaa
PPC_evmhogumian
PPC_evmhosmf
PPC_evmhosmfa
PPC_evmhosmfaaw
PPC_evmhosmfanw
PPC_evmhosmi
PPC_evmhosmia
PPC_evmhosmiaaw
PPC_evmhosmianw
PPC_evmhossf
PPC_evmhossfa
PPC_evmhossfaaw
PPC_evmhossfanw
PPC_evmhossiaaw
PPC_evmhossianw
PPC_evmhoumi
PPC_evmhoumia
PPC_evmhoumiaaw
PPC_evmhoumianw
PPC_evmhousiaaw
PPC_evmhousianw
PPC_evmra
PPC_evmwhsmf
PPC_evmwhsmfa
PPC_evmwhsmi
PPC_evmwhsmia
PPC_evmwhssf
PPC_evmwhssfa
PPC_evmwhumi
PPC_evmwhumia
PPC_evmwlsmiaaw
PPC_evmwlsmianw
PPC_evmwlssiaaw
PPC_evmwlssianw
PPC_evmwlumi
PPC_evmwlumia
PPC_evmwlumiaaw
PPC_evmwlumianw
PPC_evmwlusiaaw
PPC_evmwlusianw
PPC_evmwsmf
PPC_evmwsmfa
PPC_evmwsmfaa
PPC_evmwsmfan
PPC_evmwsmi
PPC_evmwsmia
PPC_evmwsmiaa
PPC_evmwsmian
PPC_evmwssf
PPC_evmwssfa
PPC_evmwssfaa
PPC_evmwssfan
PPC_evmwumi
PPC_evmwumia
PPC_evmwumiaa
PPC_evmwumian
PPC_evnand
PPC_evneg
PPC_evnor
PPC_evor
PPC_evorc
PPC_evrlw
PPC_evrlwi
PPC_evrndw
PPC_evsel
PPC_evslw
PPC_evslwi
PPC_evsplatfi
PPC_evsplati
PPC_evsrwis
PPC_evsrwiu
PPC_evsrws
PPC_evsrwu
PPC_evstdd
PPC_evstddx
PPC_evstdh
PPC_evstdhx
PPC_evstdw
PPC_evstdwx
PPC_evstwhe
PPC_evstwhex
PPC_evstwho
PPC_evstwhox
PPC_evstwwe
PPC_evstwwex
PPC_evstwwo
PPC_evstwwox
PPC_evsubfsmiaaw
PPC_evsubfssiaaw
PPC_evsubfumiaaw
PPC_evsubfusiaaw
PPC_evsubfw
PPC_evsubifw
PPC_evxor
PPC_efdabs
PPC_efdadd
PPC_efdcfs
PPC_efdcfsf
PPC_efdcfsi
PPC_efdcfsid
PPC_efdcfuf
PPC_efdcfui
PPC_efdcfuid
PPC_efdcmpeq
PPC_efdcmpgt
PPC_efdcmplt
PPC_efdctsf
PPC_efdctsi
PPC_efdctsidz
PPC_efdctsiz
PPC_efdctuf
PPC_efdctui
PPC_efdctuidz
PPC_efdctuiz
PPC_efddiv
PPC_efdmul
PPC_efdnabs
PPC_efdneg
PPC_efdsub
PPC_efdtsteq
PPC_efdtstgt
PPC_efdtstlt
PPC_efscfd
PPC_efsabs
PPC_efsadd
PPC_efscfsf
PPC_efscfsi
PPC_efscfuf
PPC_efscfui
PPC_efscmpeq
PPC_efscmpgt
PPC_efscmplt
PPC_efsctsf
PPC_efsctsi
PPC_efsctsiz
PPC_efsctuf
PPC_efsctui
PPC_efsctuiz
PPC_efsdiv
PPC_efsmul
PPC_efsnabs
PPC_efsneg
PPC_efssub
PPC_efststeq
PPC_efststgt
PPC_efststlt
PPC_evfsabs
PPC_evfsadd
PPC_evfscfsf
PPC_evfscfsi
PPC_evfscfuf
PPC_evfscfui
PPC_evfscmpeq
PPC_evfscmpgt
PPC_evfscmplt
PPC_evfsctsf
PPC_evfsctsi
PPC_evfsctsiz
PPC_evfsctuf
PPC_evfsctui
PPC_evfsctuiz
PPC_evfsdiv
PPC_evfsmul
PPC_evfsnabs
PPC_evfsneg
PPC_evfssub
PPC_evfststeq
PPC_evfststgt
PPC_evfststlt
PPC_bpermd
PPC_divde
PPC_divdeu
PPC_ldbrx
PPC_prtyd
PPC_stdbrx
PPC_cmpb
PPC_divwe
PPC_divweu
PPC_lbarx
PPC_lharx
PPC_popcntd
PPC_popcntw
PPC_prtyw
PPC_stbcx
PPC_sthcx
PPC_addg6s
PPC_cbcdtd
PPC_cdtbcd
PPC_dadd
PPC_daddq
PPC_dcffix
PPC_dcffixq
PPC_dcmpo
PPC_dcmpoq
PPC_dcmpu
PPC_dcmpuq
PPC_dctdp
PPC_dctfix
PPC_dctfixq
PPC_dctqpq
PPC_ddedpd
PPC_ddedpdq
PPC_ddiv
PPC_ddivq
PPC_denbcd
PPC_denbcdq
PPC_diex
PPC_diexq
PPC_dmul
PPC_dmulq
PPC_dqua
PPC_dquai
PPC_dquaiq
PPC_dquaq
PPC_drdpq
PPC_drintn
PPC_drintnq
PPC_drintx
PPC_drintxq
PPC_drrnd
PPC_drrndq
PPC_drsp
PPC_dscli
PPC_dscliq
PPC_dscri
PPC_dscriq
PPC_dsub
PPC_dsubq
PPC_dtstdc
PPC_dtstdcq
PPC_dtstdg
PPC_dtstdgq
PPC_dtstex
PPC_dtstexq
PPC_dtstsf
PPC_dtstsfq
PPC_dxex
PPC_dxexq
PPC_dsn
PPC_lbdx
PPC_lddx
PPC_lfddx
PPC_lhdx
PPC_lwdx
PPC_stbdx
PPC_stddx
PPC_stfddx
PPC_sthdx
PPC_stwdx
PPC_mbar
PPC_rfmci
PPC_tlbilx
PPC_dci
PPC_ici
PPC_mfdcrux
PPC_mfdcrx
PPC_mtdcrux
PPC_mtdcrx
PPC_dnh
PPC_ehpriv
PPC_rfgi
PPC_msgclr
PPC_msgsnd
PPC_dcbfep
PPC_dcbstep
PPC_dcbtep
PPC_dcbtstep
PPC_dcbzep
PPC_evlddepx
PPC_evstddepx
PPC_icbiep
PPC_lbepx
PPC_lfdepx
PPC_lhepx
PPC_lvepx
PPC_lvepxl
PPC_lwepx
PPC_stbepx
PPC_stfdepx
PPC_sthepx
PPC_stvepx
PPC_stvepxl
PPC_stwepx
PPC_ldepx
PPC_stdepx
PPC_mfpmr
PPC_mtpmr
PPC_mftmr
PPC_mttmr
PPC_tlbsrx
PPC_fcfids
PPC_fcfidu
PPC_fcfidus
PPC_fctidu
PPC_fctiduz
PPC_fctiwu
PPC_fctiwuz
PPC_ftdiv
PPC_ftsqrt
PPC_lfiwax
PPC_lfiwzx
PPC_lfdp
PPC_lfdpx
PPC_stfdp
PPC_stfdpx
PPC_fcpsgn
PPC_fre
PPC_frim
PPC_frin
PPC_frip
PPC_friz
PPC_macchw
PPC_macchws
PPC_macchwsu
PPC_macchwu
PPC_machhw
PPC_machhws
PPC_machhwsu
PPC_machhwu
PPC_maclhw
PPC_maclhws
PPC_maclhwsu
PPC_maclhwu
PPC_mulchw
PPC_mulchwu
PPC_mulhhw
PPC_mulhhwu
PPC_mullhw
PPC_mullhwu
PPC_nmacchw
PPC_nmacchws
PPC_nmachhw
PPC_nmachhws
PPC_nmaclhw
PPC_nmaclhws
PPC_dlmzb
PPC_lq
PPC_stq
PPC_doze
PPC_lbzcix
PPC_ldcix
PPC_lhzcix
PPC_lwzcix
PPC_nap
PPC_rvwinkle
PPC_slbfee
PPC_sleep
PPC_stbcix
PPC_stdcix
PPC_sthcix
PPC_stwcix
PPC_tlbiel
PPC_lvebx
PPC_lvehx
PPC_lvewx
PPC_lvsl
PPC_lvsr
PPC_lvx
PPC_lvxl
PPC_mfvscr
PPC_mtvscr
PPC_stvebx
PPC_stvehx
PPC_stvewx
PPC_stvx
PPC_stvxl
PPC_vaddcuw
PPC_vaddfp
PPC_vaddsbs
PPC_vaddshs
PPC_vaddsws
PPC_vaddubm
PPC_vaddubs
PPC_vadduhm
PPC_vadduhs
PPC_vadduwm
PPC_vadduws
PPC_vand
PPC_vandc
PPC_vavgsb
PPC_vavgsh
PPC_vavgsw
PPC_vavgub
PPC_vavguh
PPC_vavguw
PPC_vcfsx
PPC_vcfux
PPC_vcmpbfp
PPC_vcmpeqfp
PPC_vcmpequb
PPC_vcmpequh
PPC_vcmpequw
PPC_vcmpgefp
PPC_vcmpgtfp
PPC_vcmpgtsb
PPC_vcmpgtsh
PPC_vcmpgtsw
PPC_vcmpgtub
PPC_vcmpgtuh
PPC_vcmpgtuw
PPC_vctsxs
PPC_vctuxs
PPC_vexptefp
PPC_vlogefp
PPC_vmaddfp
PPC_vmaxfp
PPC_vmaxsb
PPC_vmaxsh
PPC_vmaxsw
PPC_vmaxub
PPC_vmaxuh
PPC_vmaxuw
PPC_vmhaddshs
PPC_vmhraddshs
PPC_vminfp
PPC_vminsb
PPC_vminsh
PPC_vminsw
PPC_vminub
PPC_vminuh
PPC_vminuw
PPC_vmladduhm
PPC_vmrghb
PPC_vmrghh
PPC_vmrghw
PPC_vmrglb
PPC_vmrglh
PPC_vmrglw
PPC_vmsummbm
PPC_vmsumshm
PPC_vmsumshs
PPC_vmsumubm
PPC_vmsumuhm
PPC_vmsumuhs
PPC_vmulesb
PPC_vmulesh
PPC_vmuleub
PPC_vmuleuh
PPC_vmulosb
PPC_vmulosh
PPC_vmuloub
PPC_vmulouh
PPC_vnmsubfp
PPC_vnor
PPC_vor
PPC_vperm
PPC_vpkpx
PPC_vpkshss
PPC_vpkshus
PPC_vpkswss
PPC_vpkswus
PPC_vpkuhum
PPC_vpkuhus
PPC_vpkuwum
PPC_vpkuwus
PPC_vrefp
PPC_vrfim
PPC_vrfin
PPC_vrfip
PPC_vrfiz
PPC_vrlb
PPC_vrlh
PPC_vrlw
PPC_vrsqrtefp
PPC_vsel
PPC_vsl
PPC_vslb
PPC_vsldoi
PPC_vslh
PPC_vslo
PPC_vslw
PPC_vspltb
PPC_vsplth
PPC_vspltisb
PPC_vspltish
PPC_vspltisw
PPC_vspltw
PPC_vsr
PPC_vsrab
PPC_vsrah
PPC_vsraw
PPC_vsrb
PPC_vsrh
PPC_vsro
PPC_vsrw
PPC_vsubcuw
PPC_vsubfp
PPC_vsubsbs
PPC_vsubshs
PPC_vsubsws
PPC_vsububm
PPC_vsububs
PPC_vsubuhm
PPC_vsubuhs
PPC_vsubuwm
PPC_vsubuws
PPC_vsum2sws
PPC_vsum4sbs
PPC_vsum4shs
PPC_vsum4ubs
PPC_vsumsws
PPC_vupkhpx
PPC_vupkhsb
PPC_vupkhsh
PPC_vupklpx
PPC_vupklsb
PPC_vupklsh
PPC_vxor
PPC_lxsdx
PPC_lxvd2x
PPC_lxvdsx
PPC_lxvw4x
PPC_stxsdx
PPC_stxvd2x
PPC_stxvw4x
PPC_xsabsdp
PPC_xsadddp
PPC_xscmpodp
PPC_xscmpudp
PPC_xscpsgndp
PPC_xscvdpsp
PPC_xscvdpsxds
PPC_xscvdpsxws
PPC_xscvdpuxds
PPC_xscvdpuxws
PPC_xscvspdp
PPC_xscvsxddp
PPC_xscvuxddp
PPC_xsdivdp
PPC_xsmaddadp
PPC_xsmaddmdp
PPC_xsmaxdp
PPC_xsmindp
PPC_xsmsubadp
PPC_xsmsubmdp
PPC_xsmuldp
PPC_xsnabsdp
PPC_xsnegdp
PPC_xsnmaddadp
PPC_xsnmaddmdp
PPC_xsnmsubadp
PPC_xsnmsubmdp
PPC_xsrdpi
PPC_xsrdpic
PPC_xsrdpim
PPC_xsrdpip
PPC_xsrdpiz
PPC_xsredp
PPC_xsrsqrtedp
PPC_xssqrtdp
PPC_xssubdp
PPC_xstdivdp
PPC_xstsqrtdp
PPC_xvabsdp
PPC_xvabssp
PPC_xvadddp
PPC_xvaddsp
PPC_xvcmpeqdp
PPC_xvcmpeqsp
PPC_xvcmpgedp
PPC_xvcmpgesp
PPC_xvcmpgtdp
PPC_xvcmpgtsp
PPC_xvcpsgndp
PPC_xvcpsgnsp
PPC_xvcvdpsp
PPC_xvcvdpsxds
PPC_xvcvdpsxws
PPC_xvcvdpuxds
PPC_xvcvdpuxws
PPC_xvcvspdp
PPC_xvcvspsxds
PPC_xvcvspsxws
PPC_xvcvspuxds
PPC_xvcvspuxws
PPC_xvcvsxddp
PPC_xvcvsxdsp
PPC_xvcvsxwdp
PPC_xvcvsxwsp
PPC_xvcvuxddp
PPC_xvcvuxdsp
PPC_xvcvuxwdp
PPC_xvcvuxwsp
PPC_xvdivdp
PPC_xvdivsp
PPC_xvmaddadp
PPC_xvmaddasp
PPC_xvmaddmdp
PPC_xvmaddmsp
PPC_xvmaxdp
PPC_xvmaxsp
PPC_xvmindp
PPC_xvminsp
PPC_xvmsubadp
PPC_xvmsubasp
PPC_xvmsubmdp
PPC_xvmsubmsp
PPC_xvmuldp
PPC_xvmulsp
PPC_xvnabsdp
PPC_xvnabssp
PPC_xvnegdp
PPC_xvnegsp
PPC_xvnmaddadp
PPC_xvnmaddasp
PPC_xvnmaddmdp
PPC_xvnmaddmsp
PPC_xvnmsubadp
PPC_xvnmsubasp
PPC_xvnmsubmdp
PPC_xvnmsubmsp
PPC_xvrdpi
PPC_xvrdpic
PPC_xvrdpim
PPC_xvrdpip
PPC_xvrdpiz
PPC_xvredp
PPC_xvresp
PPC_xvrspi
PPC_xvrspic
PPC_xvrspim
PPC_xvrspip
PPC_xvrspiz
PPC_xvrsqrtedp
PPC_xvrsqrtesp
PPC_xvsqrtdp
PPC_xvsqrtsp
PPC_xvsubdp
PPC_xvsubsp
PPC_xvtdivdp
PPC_xvtdivsp
PPC_xvtsqrtdp
PPC_xvtsqrtsp
PPC_xxland
PPC_xxlandc
PPC_xxlnor
PPC_xxlor
PPC_xxlxor
PPC_xxmrghw
PPC_xxmrglw
PPC_xxpermdi
PPC_xxsel
PPC_xxsldwi
PPC_xxspltw
PPC_wait
PPC_dss
PPC_dssall
PPC_dst
PPC_dstt
PPC_dstst
PPC_dststt
PPC_lvlx
PPC_lvlxl
PPC_lvrx
PPC_lvrxl
PPC_stvlx
PPC_stvlxl
PPC_stvrx
PPC_stvrxl
PPC_add16i
PPC_add2i
PPC_add2is
PPC_and2i
PPC_and2is
PPC_cmp16i
PPC_cmph
PPC_cmph16i
PPC_cmphl
PPC_cmphl16i
PPC_cmpl16i
PPC_mull2i
PPC_or2i
PPC_or2is
PPC_rlw
PPC_rlwi
PPC_bclri
PPC_bgeni
PPC_bmaski
PPC_bseti
PPC_btsti
PPC_extzb
PPC_extzh
PPC_illegal
PPC_mfar
PPC_mtar
PPC_sub
PPC_sub16i
PPC_sub2i
PPC_sub2is
PPC_extldi
PPC_extrdi
PPC_insrdi
PPC_rotldi
PPC_rotrdi
PPC_rotld
PPC_sldi
PPC_srdi
PPC_clrldi
PPC_clrrdi
PPC_clrlsldi
PPC_xnop
PPC_hnop
PPC_dcbfl
PPC_dcbflp
PPC_dcbtt
PPC_dcbtstt
PPC_lwsync
PPC_ptesync
PPC_waitrsv
PPC_waitimpl
PPC_evmr
PPC_evnot
PPC_mtcr
PPC_xvmovdp
PPC_xvmovsp
PPC_xxspltd
PPC_xxmrghd
PPC_xxmrgld
PPC_xxswapd
PPC_dcbz128
PPC_last
NEC850_NULL
NEC850_BREAKPOINT
NEC850_XORI
NEC850_XOR
NEC850_TST1
NEC850_TST
NEC850_TRAP
NEC850_SUBR
NEC850_SUB
NEC850_STSR
NEC850_ST_B
NEC850_ST_H
NEC850_ST_W
NEC850_SST_B
NEC850_SST_H
NEC850_SST_W
NEC850_SLD_B
NEC850_SLD_H
NEC850_SLD_W
NEC850_SHR
NEC850_SHL
NEC850_SET1
NEC850_SETFV
NEC850_SETFL
NEC850_SETFZ
NEC850_SETFNH
NEC850_SETFN
NEC850_SETFT
NEC850_SETFLT
NEC850_SETFLE
NEC850_SETFNV
NEC850_SETFNC
NEC850_SETFNZ
NEC850_SETFH
NEC850_SETFP
NEC850_SETFSA
NEC850_SETFGE
NEC850_SETFGT
NEC850_SATSUBR
NEC850_SATSUBI
NEC850_SATSUB
NEC850_SATADD
NEC850_SAR
NEC850_RETI
NEC850_ORI
NEC850_OR
NEC850_NOT1
NEC850_NOT
NEC850_NOP
NEC850_MULHI
NEC850_MULH
NEC850_MOVHI
NEC850_MOVEA
NEC850_MOV
NEC850_LDSR
NEC850_LD_B
NEC850_LD_H
NEC850_LD_W
NEC850_JR
NEC850_JMP
NEC850_JARL
NEC850_HALT
NEC850_EI
NEC850_DIVH
NEC850_DI
NEC850_CMP
NEC850_CLR1
NEC850_BV
NEC850_BL
NEC850_BZ
NEC850_BNH
NEC850_BN
NEC850_BR
NEC850_BLT
NEC850_BLE
NEC850_BNV
NEC850_BNC
NEC850_BNZ
NEC850_BH
NEC850_BP
NEC850_BSA
NEC850_BGE
NEC850_BGT
NEC850_ANDI
NEC850_AND
NEC850_ADDI
NEC850_ADD
NEC850_SWITCH
NEC850_ZXB
NEC850_SXB
NEC850_ZXH
NEC850_SXH
NEC850_DISPOSE_r0
NEC850_DISPOSE_r
NEC850_CALLT
NEC850_DBTRAP
NEC850_DBRET
NEC850_CTRET
NEC850_SASFV
NEC850_SASFL
NEC850_SASFZ
NEC850_SASFNH
NEC850_SASFN
NEC850_SASFT
NEC850_SASFLT
NEC850_SASFLE
NEC850_SASFNV
NEC850_SASFNC
NEC850_SASFNZ
NEC850_SASFH
NEC850_SASFP
NEC850_SASFSA
NEC850_SASFGE
NEC850_SASFGT
NEC850_PREPARE_sp
NEC850_PREPARE_i
NEC850_MUL
NEC850_MULU
NEC850_DIVH_r3
NEC850_DIVHU
NEC850_DIV
NEC850_DIVU
NEC850_BSW
NEC850_BSH
NEC850_HSW
NEC850_CMOVV
NEC850_CMOVL
NEC850_CMOVZ
NEC850_CMOVNH
NEC850_CMOVN
NEC850_CMOV
NEC850_CMOVLT
NEC850_CMOVLE
NEC850_CMOVNV
NEC850_CMOVNC
NEC850_CMOVNZ
NEC850_CMOVH
NEC850_CMOVP
NEC850_CMOVSA
NEC850_CMOVGE
NEC850_CMOVGT
NEC850_SLD_BU
NEC850_SLD_HU
NEC850_LD_BU
NEC850_LD_HU
NEC850_LAST_INSTRUCTION
TRICORE_null
TRICORE_abs
TRICORE_abs_b
TRICORE_abs_h
TRICORE_absdif
TRICORE_absdif_b
TRICORE_absdif_h
TRICORE_absdifs
TRICORE_absdifs_h
TRICORE_abss
TRICORE_abss_h
TRICORE_add_b
TRICORE_add_f
TRICORE_add_h
TRICORE_add16
TRICORE_add16_a
TRICORE_add32
TRICORE_add32_a
TRICORE_addc
TRICORE_addi
TRICORE_addih
TRICORE_addih_a
TRICORE_adds
TRICORE_adds_h
TRICORE_adds_hu
TRICORE_adds_u
TRICORE_adds16
TRICORE_addsc_at
TRICORE_addsc16_a
TRICORE_addsc32_a
TRICORE_addx
TRICORE_and_and_t
TRICORE_and_andn_t
TRICORE_and_eq
TRICORE_and_ge
TRICORE_and_ge_u
TRICORE_and_lt
TRICORE_and_lt_u
TRICORE_and_ne
TRICORE_and_nor_t
TRICORE_and_or_t
TRICORE_and_t
TRICORE_and16
TRICORE_and32
TRICORE_andn
TRICORE_andn_t
TRICORE_bisr16
TRICORE_bisr32
TRICORE_bmerge
TRICORE_bsplit
TRICORE_cachea_i
TRICORE_cachea_w
TRICORE_cachea_wi
TRICORE_cadd16
TRICORE_cadd32
TRICORE_caddn16
TRICORE_caddn32
TRICORE_call16
TRICORE_call32
TRICORE_calla
TRICORE_calli
TRICORE_clo
TRICORE_clo_h
TRICORE_cls
TRICORE_cls_h
TRICORE_clz
TRICORE_clz_h
TRICORE_cmov16
TRICORE_cmovn16
TRICORE_cmp_f
TRICORE_csub
TRICORE_csubn
TRICORE_debug16
TRICORE_debug32
TRICORE_dextr
TRICORE_disable
TRICORE_div_f
TRICORE_dsync
TRICORE_dvadj
TRICORE_dvinit
TRICORE_dvinit_b
TRICORE_dvinit_bu
TRICORE_dvinit_h
TRICORE_dvinit_hu
TRICORE_dvinit_u
TRICORE_dvstep
TRICORE_dvstep_u
TRICORE_enable
TRICORE_eq_a
TRICORE_eq_b
TRICORE_eq_h
TRICORE_eq_w
TRICORE_eq16
TRICORE_eq32
TRICORE_eqany_b
TRICORE_eqany_h
TRICORE_eqz_a
TRICORE_extr
TRICORE_extr_u
TRICORE_ftoi
TRICORE_ftoq31
TRICORE_ftou
TRICORE_ge
TRICORE_ge_a
TRICORE_ge_u
TRICORE_imask
TRICORE_ins_t
TRICORE_insert
TRICORE_insn_t
TRICORE_isync
TRICORE_itof
TRICORE_ixmax
TRICORE_ixmax_u
TRICORE_ixmin
TRICORE_ixmin_u
TRICORE_j16
TRICORE_j32
TRICORE_ja
TRICORE_jeq_a
TRICORE_jeq16
TRICORE_jeq32
TRICORE_jge
TRICORE_jge_u
TRICORE_jgez16
TRICORE_jgtz16
TRICORE_ji16
TRICORE_ji32
TRICORE_jl
TRICORE_jla
TRICORE_jlez16
TRICORE_jli
TRICORE_jlt
TRICORE_jlt_u
TRICORE_jltz16
TRICORE_jne_a
TRICORE_jne16
TRICORE_jne32
TRICORE_jned
TRICORE_jnei
TRICORE_jnz16
TRICORE_jnz16_a
TRICORE_jnz16_t
TRICORE_jnz32_a
TRICORE_jnz32_t
TRICORE_jz16
TRICORE_jz16_a
TRICORE_jz16_t
TRICORE_jz32_a
TRICORE_jz32_t
TRICORE_ld_b
TRICORE_ld_d
TRICORE_ld_da
TRICORE_ld_hu
TRICORE_ld_q
TRICORE_ld16_a
TRICORE_ld16_bu
TRICORE_ld16_h
TRICORE_ld16_w
TRICORE_ld32_a
TRICORE_ld32_bu
TRICORE_ld32_h
TRICORE_ld32_w
TRICORE_ldlcx
TRICORE_ldmst
TRICORE_lducx
TRICORE_lea
TRICORE_loop16
TRICORE_loop32
TRICORE_loopu
TRICORE_lt_a
TRICORE_lt_b
TRICORE_lt_bu
TRICORE_lt_h
TRICORE_lt_hu
TRICORE_lt_u
TRICORE_lt_w
TRICORE_lt_wu
TRICORE_lt16
TRICORE_lt32
TRICORE_madd
TRICORE_madd_f
TRICORE_madd_h
TRICORE_madd_q
TRICORE_madd_u
TRICORE_maddm_h
TRICORE_maddms_h
TRICORE_maddr_h
TRICORE_maddr_q
TRICORE_maddrs_h
TRICORE_maddrs_q
TRICORE_madds
TRICORE_madds_h
TRICORE_madds_q
TRICORE_madds_u
TRICORE_maddsu_h
TRICORE_maddsum_h
TRICORE_maddsums_h
TRICORE_maddsur_h
TRICORE_maddsurs_h
TRICORE_maddsus_h
TRICORE_max
TRICORE_max_b
TRICORE_max_bu
TRICORE_max_h
TRICORE_max_hu
TRICORE_max_u
TRICORE_mfcr
TRICORE_min
TRICORE_min_b
TRICORE_min_bu
TRICORE_min_h
TRICORE_min_hu
TRICORE_min_u
TRICORE_mov_u
TRICORE_mov16
TRICORE_mov16_a
TRICORE_mov16_aa
TRICORE_mov16_d
TRICORE_mov32
TRICORE_mov32_a
TRICORE_mov32_aa
TRICORE_mov32_d
TRICORE_movh
TRICORE_movh_a
TRICORE_msub
TRICORE_msub_f
TRICORE_msub_h
TRICORE_msub_q
TRICORE_msub_u
TRICORE_msubad_h
TRICORE_msubadm_h
TRICORE_msubadms_h
TRICORE_msubadr_h
TRICORE_msubadrs_h
TRICORE_msubads_h
TRICORE_msubm_h
TRICORE_msubms_h
TRICORE_msubr_h
TRICORE_msubr_q
TRICORE_msubrs_h
TRICORE_msubrs_q
TRICORE_msubs
TRICORE_msubs_h
TRICORE_msubs_q
TRICORE_msubs_u
TRICORE_mtcr
TRICORE_mul_f
TRICORE_mul_h
TRICORE_mul_q
TRICORE_mul_u
TRICORE_mul16
TRICORE_mul32
TRICORE_mulm_h
TRICORE_mulms_h
TRICORE_mulr_h
TRICORE_mulr_q
TRICORE_muls
TRICORE_muls_u
TRICORE_nand
TRICORE_nand_t
TRICORE_ne
TRICORE_ne_a
TRICORE_nez_a
TRICORE_nop16
TRICORE_nop32
TRICORE_nor_t
TRICORE_nor16
TRICORE_nor32
TRICORE_or_and_t
TRICORE_or_andn_t
TRICORE_or_eq
TRICORE_or_ge
TRICORE_or_ge_u
TRICORE_or_lt
TRICORE_or_lt_u
TRICORE_or_ne
TRICORE_or_nor_t
TRICORE_or_or_t
TRICORE_or_t
TRICORE_or16
TRICORE_or32
TRICORE_orn
TRICORE_orn_t
TRICORE_pack
TRICORE_parity
TRICORE_q31tof
TRICORE_qseed_f
TRICORE_ret16
TRICORE_ret32
TRICORE_rfe16
TRICORE_rfe32
TRICORE_rfm
TRICORE_rslcx
TRICORE_rstv
TRICORE_rsub16
TRICORE_rsub32
TRICORE_rsubs
TRICORE_rsubs_u
TRICORE_sat16_b
TRICORE_sat16_bu
TRICORE_sat16_h
TRICORE_sat16_hu
TRICORE_sat32_b
TRICORE_sat32_bu
TRICORE_sat32_h
TRICORE_sat32_hu
TRICORE_sel
TRICORE_seln
TRICORE_sh_and_t
TRICORE_sh_andn_t
TRICORE_sh_eq
TRICORE_sh_ge
TRICORE_sh_ge_u
TRICORE_sh_h
TRICORE_sh_lt
TRICORE_sh_lt_u
TRICORE_sh_nand_t
TRICORE_sh_ne
TRICORE_sh_nor_t
TRICORE_sh_or_t
TRICORE_sh_orn_t
TRICORE_sh_xnor_t
TRICORE_sh_xor_t
TRICORE_sh16
TRICORE_sh32
TRICORE_sha_h
TRICORE_sha16
TRICORE_sha32
TRICORE_shas
TRICORE_st_d
TRICORE_st_da
TRICORE_st_q
TRICORE_st_t
TRICORE_st16_a
TRICORE_st16_b
TRICORE_st16_h
TRICORE_st16_w
TRICORE_st32_a
TRICORE_st32_b
TRICORE_st32_h
TRICORE_st32_w
TRICORE_stlcx
TRICORE_stucx
TRICORE_sub_b
TRICORE_sub_f
TRICORE_sub_h
TRICORE_sub16
TRICORE_sub16_a
TRICORE_sub32
TRICORE_sub32_a
TRICORE_subc
TRICORE_subs_h
TRICORE_subs_hu
TRICORE_subs_u
TRICORE_subs16
TRICORE_subs32
TRICORE_subx
TRICORE_svlcx
TRICORE_swap_w
TRICORE_syscall
TRICORE_tlbdemap
TRICORE_tlbflush_a
TRICORE_tlbflush_b
TRICORE_tlbmap
TRICORE_tlbprobe_a
TRICORE_tlbprobe_i
TRICORE_trapsv
TRICORE_trapv
TRICORE_unpack
TRICORE_updfl
TRICORE_utof
TRICORE_xnor
TRICORE_xnor_t
TRICORE_xor_eq
TRICORE_xor_ge
TRICORE_xor_ge_u
TRICORE_xor_lt
TRICORE_xor_lt_u
TRICORE_xor_ne
TRICORE_xor_t
TRICORE_xor16
TRICORE_xor32
TRICORE_last
);

1;
