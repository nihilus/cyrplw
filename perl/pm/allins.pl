#!perl -w
# Script to convert allins.hpp from IDA SDK to IDAOps perl module
# 11 Dec 2011 (C) RedPlait
use strict;
use warnings;

sub calc_maxoplen
{
  my $hdb = shift;
  my $res = 0;
  my $clen;
  foreach ( keys %$hdb )
  {
    $clen = length;
    $res = $clen if ( $clen > $res );
  }
  return $res;
}

sub parse
{
  my($fname, $href, $aref) = @_;
  my($str, $fh, $name, $state, $op, $value, $curr);
  open($fh, '<', $fname) or die("Cannot open $fname, error $!\n");
  $state = $curr = 0;
  while( $str = <$fh> )
  {
    chomp $str;
    if ( !$state and ($str =~ /^enum\s+{/ or
                      $str =~ /^\s*{/)
       )
    {
      $state = 1;
      next;
    }
    if ( $str =~ /^\s*};$/ )
    {
      $state = 0;
      $curr = 0;
      next;
    }
    next if ( $str eq '' );
    if ( $state )
    {
      $str =~ s#//.*$##;
      foreach $op ( split(',', $str) )
      {
        $op =~ s/\s//g;
        next if ( $op eq '' );
        # check for =
        if ( $op =~ /^(\S+)\s*=\s*(\S+)\s*$/ )
        {
          $name = $1;
          $value = exists $href->{$2} ? $href->{$2} : int($2);
        } else {
          $name = $op;
          $value = ++$curr;
        }
        $href->{$name} = $value;
        push @$aref, $name;
      }
    }
  }
  close $fh;
}

# main
my %hdb;
my @list;
parse($_, \%hdb, \@list) foreach @ARGV;
my $maxlen = calc_maxoplen(\%hdb);

# make header
print <<'EOF';
# Autogenerated IDAOps from allins.hpp
use strict;
use warnings;
package IDAOps;

require Exporter;
our @ISA = qw(Exporter);

EOF

# add constants
my($iter, $len);
foreach $iter ( @list )
{
  $len = length($iter);
  printf("use constant %s%s => %d;\n", $iter, ' ' x ( $maxlen - $len ), $hdb{$iter});
}

# make EXPORTS
print <<'EOF2';
###
#
# E X P O R T E D   N A M E S
#
###
our @EXPORT = qw(
EOF2

foreach $iter ( @list )
{
  printf("%s\n", $iter);
}

# finalize
print <<'EOF3';
);

1;
EOF3
